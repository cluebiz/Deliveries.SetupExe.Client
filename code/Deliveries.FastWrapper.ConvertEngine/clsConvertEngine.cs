using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Text.RegularExpressions;
using System.Web;

namespace Deliveries.FastWrapper.Logic
{
    public class clsConvertEngine
    {


        [DllImport("shell32.dll", SetLastError = true)]
        static extern IntPtr CommandLineToArgvW([MarshalAs(UnmanagedType.LPWStr)] string lpCmdLine, out int pNumArgs);

        public static string[] CommandLineToArgs(string commandLine)
        {
            int argc;
            var argv = CommandLineToArgvW(commandLine, out argc);
            if (argv == IntPtr.Zero)
                throw new System.ComponentModel.Win32Exception();
            try
            {
                var args = new string[argc];
                for (var i = 0; i < args.Length; i++)
                {
                    var p = Marshal.ReadIntPtr(argv, i * IntPtr.Size);
                    args[i] = Marshal.PtrToStringUni(p);
                }

                return args;
            }
            finally
            {
                Marshal.FreeHGlobal(argv);
            }
        }



        public static string ModifyDeployXMLWithNewSubfolder(string lsDeployXML, string lsNewSubFolder)
        {

            writeToLogFile("modifydeployxmlwithnewsubfolder: start");
            int liCount = 0;

            bool lbFoundSomething = false;
            do
            {
                writeToLogFile("modifydeployxmlwithnewsubfolder: round " + liCount.ToString());
                liCount += 1;
                if (liCount > 1000)
                {
                    lbFoundSomething = false;
                    break;
                }

                lbFoundSomething = false;
                string lsResult = FindBetween(lsDeployXML, @"path=""", @"""");
                if (lsResult != "")
                {
                    if (!lsResult.StartsWith("%") && !lsResult.StartsWith(lsNewSubFolder))
                    {
                        string lsNewResult = lsNewSubFolder + lsResult;
                        lsDeployXML = lsDeployXML.Replace(@"path=""" + lsResult + @"""", @"path=""" + lsNewResult + @"""");
                        lbFoundSomething = true;
                    }
                }
                lsResult = "";
                if (!lbFoundSomething)
                {
                    lsResult = "";
                    lsResult = FindBetween(lsDeployXML, @"source=""", @"""");
                    if (lsResult != "")
                    {
                        if (!lsResult.StartsWith("%") && !lsResult.StartsWith(lsNewSubFolder))
                        {
                            string lsNewResult = lsNewSubFolder + lsResult;
                            lsDeployXML = lsDeployXML.Replace(@"source=""" + lsResult + @"""", @"source=""" + lsNewResult + @"""");
                            lbFoundSomething = true;
                        }
                    }
                }
                lsResult = "";
                if (!lbFoundSomething)
                {
                    lsResult = "";
                    for (int liPosition = 0; liPosition < lsDeployXML.Length - "<parameter>".Length; liPosition++)
                    {
                        lsResult = "";
                        if (lsDeployXML.Substring(liPosition).StartsWith("<parameter>"))
                        {
                            lsResult = lsDeployXML.Substring(liPosition + "<parameter>".Length);
                            lsResult = lsResult.Substring(0, lsResult.IndexOf(@"</parameter>"));
                            writeToLogFile("modifydeployxmlwithnewsubfolder: <parameter>" + lsResult + "</parameter>");
                            if (lsResult != "")
                            {
                                if (lsResult.ToLower().Contains(".msi"))
                                {
                                    writeToLogFile("converting msi: " + lsResult);
                                    if (!lsResult.Contains(lsNewSubFolder))
                                    {
                                        if (lsResult.StartsWith(@""""))
                                        {
                                            lsDeployXML = lsDeployXML.Replace("<parameter>" + lsResult + "</parameter>", @"<parameter>""" + lsNewSubFolder + lsResult.Replace(@"""", "") + @"""</parameter>");
                                            lbFoundSomething = true;
                                        }
                                        else
                                        {
                                            lsDeployXML = lsDeployXML.Replace("<parameter>" + lsResult + "</parameter>", @"<parameter>""" + lsNewSubFolder + lsResult + @"""</parameter>");
                                            lbFoundSomething = true;
                                        }
                                        break;
                                    }
                                }
                                if (lsResult.ToLower().Contains(".mst"))
                                {
                                    if (!lsResult.Contains(lsNewSubFolder))
                                    {
                                        if (lsResult.Contains("TRANSFORMS="))
                                        {
                                            if (lsResult.StartsWith(@"TRANSFORMS="""))
                                            {
                                                string lsMyTransform = lsResult.Replace(@"TRANSFORMS=""", "");
                                                lsMyTransform = lsMyTransform.Replace(@"""", "");
                                                lsDeployXML = lsDeployXML.Replace("<parameter>" + lsResult + "</parameter>", @"<parameter>TRANSFORMS=""" + lsNewSubFolder + lsMyTransform + @"""</parameter>");
                                                lbFoundSomething = true;
                                            }
                                            else
                                            {
                                                string lsMyTransform = lsResult.Replace(@"TRANSFORMS=", "");
                                                lsDeployXML = lsDeployXML.Replace("<parameter>" + lsResult + "</parameter>", @"<parameter>TRANSFORMS=" + lsNewSubFolder + lsMyTransform + @"</parameter>");
                                                lbFoundSomething = true;
                                            }
                                            break;
                                        }
                                        lbFoundSomething = true;
                                        break;
                                    }
                                }
                            }

                        }
                    }
                }



            } while (lbFoundSomething == true);

            writeToLogFile("modifydeployxmlwithnewsubfolder: end");

            return lsDeployXML;
        }

      

   
        //public static string CreateContinental(string lsType, string lsDeployXML, string lsManufacturer, string lsProduct, string lsVersion, string lsReleaseName, string lsReleaseComment, string lsPackageTypeId, string lsUninstallKey, string lsDownloadName, string lsSCCMShare, string lsSCCMDomain, string lsSCCMSite, string lsSCCMLimitCollection, string lsReleaseId, string lsApplicationRootPath, string lsCollectionRootPath, string lsCollectionUninstallRootPath, string lsDistributionPoint, string lsSecurityGroupLDAP, string lsSecurityServer, string lsSecurityName, string lsInternalPackageId, string lsDeployment, string lsRealLanguages, string lsMainInstallFolderx64, string lsMainInstallFolderx86, string lsMainExe, DataTable loParameterTable)
        //{
        //    StringBuilder loStringBuilder = new StringBuilder();

        //    string lsPackageId = "OF0009999";
        //    string lsDeleteDSPIDKey = "";
        //    string lsSilentMSIMSP = "False";
        //    string lsUninstallProduct = "";
        //    string lsLegacyUninstall = "";
        //    string lsLegacyUninstallParams = "";
        //    string lsRequiredProduct = "";
        //    string lsRequiredDiskSpace = "";
        //    string lsDiskName = "C:";
        //    string lsWaitForOpenProcesses = "";
        //    string lsSupportedPlatformsMin = "6.1";
        //    string lsSupportedPlatformsMax = "0";
        //    string lsPlatformsBitwise = "both";
        //    string lsRebootComputer = "False";
        //    string lsShowMessageBoxPre = "False";
        //    string lsShowMessageBoxPost = "False";
        //    string lsShowProgressBar = "True";

        //    foreach (DataRow loParameterRow in loParameterTable.Rows)
        //    {
        //        switch (loParameterRow["name"].ToString().ToLower())
        //        {
        //            case "packageid":
        //                lsPackageId = loParameterRow["value"].ToString();
        //                break;
        //            case "deletedspidkey":
        //                lsDeleteDSPIDKey = loParameterRow["value"].ToString();
        //                break;
        //            case "silentmsimsp":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsSilentMSIMSP = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "uninstallproduct":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsUninstallProduct = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "legacyuninstall":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsLegacyUninstall = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "legacyuninstallparams":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsLegacyUninstallParams = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "requiredproduct":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsRequiredProduct = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "requireddiskspace":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsRequiredDiskSpace = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "diskname":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsDiskName = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "waitforopenprocesses":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsWaitForOpenProcesses = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "supportedplatformsmin":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsSupportedPlatformsMin = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "supportedplatformsmax":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsSupportedPlatformsMax = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "platformsbitwise":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsPlatformsBitwise = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "rebootcomputer":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsRebootComputer = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "showmessageboxpre":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsShowMessageBoxPre = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "showmessageboxpost":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsShowMessageBoxPost = loParameterRow["value"].ToString();
        //                }
        //                break;
        //            case "showprogressbar":
        //                if (loParameterRow["value"].ToString() != "")
        //                {
        //                    lsShowProgressBar = loParameterRow["value"].ToString();
        //                }
        //                break;
        //        }
        //    }

        //    if (lsUninstallProduct != "")
        //    {
        //        lsUninstallProduct = "#" + lsUninstallProduct;
        //    }
        //    if (lsWaitForOpenProcesses != "")
        //    {
        //        lsWaitForOpenProcesses = "#" + lsWaitForOpenProcesses;
        //    }

        //    string lsPackageName = lsManufacturer + " " + lsProduct + " " + lsReleaseName;

        //    DataTable loInstallTable = ConvertXMLToDataTable("install", lsDeployXML, false);
        //    DataTable loUninstallTable = ConvertXMLToDataTable("uninstall", lsDeployXML, false);

        //    //551c4c56-805a-47df-9d8f-50f7dfbcd513 - legacy

        //    //190f2f55-b1f9-434b-818e-65ab4f02a131 - msi snapshot
        //    //97054a19-a3b6-4213-9a30-ad50d7270344 - msi package

        //    string lsProcessKill = "";
        //    foreach (DataRow loRow in loInstallTable.Select("actiontype='killprocess'"))
        //    {
        //        if (!lsProcessKill.ToLower().Contains(loRow["command"].ToString().ToLower()))
        //        {
        //            lsProcessKill += loRow["command"].ToString().ToLower() + "#";
        //        }
        //    }
        //    foreach (DataRow loRow in loUninstallTable.Select("actiontype='killprocess'"))
        //    {
        //        if (!lsProcessKill.ToLower().Contains(loRow["command"].ToString().ToLower()))
        //        {
        //            lsProcessKill += loRow["command"].ToString().ToLower() + "#";
        //        }
        //    }
        //    lsProcessKill = lsProcessKill.Replace("#", ".exe#");
        //    if (lsProcessKill.EndsWith("#"))
        //    {
        //        lsProcessKill = lsProcessKill.Substring(0, lsProcessKill.Length - 1);
        //    }

        //    string lsEXEFile = "";
        //    string lsMSIFile = "";
        //    string lsMSPFile = "";
        //    string lsMSTFile = "";
        //    string lsParameters = "";
        //    string lsProductCode = "";
        //    string lsSilent = "";
        //    string lsLog = "";


        //    string lsInstallers = "";
        //    string lsInstallerParameters = "";

        //    //msi
        //    foreach (DataRow loRow in loInstallTable.Select("actiontype='msiexec'"))
        //    {
        //        writeToLogFile("msiexecccc: " + loRow["param"].ToString());
        //        lsMSIFile = "";
        //        lsMSPFile = "";
        //        lsMSTFile = "";
        //        lsParameters = "";
        //        lsProductCode = "";
        //        lsSilent = "";
        //        lsLog = "";
        //        GetMSIParameters(loRow["param"].ToString(), ref lsProductCode, ref lsMSIFile, ref lsMSPFile, ref lsMSTFile, ref lsParameters, ref lsSilent, ref lsLog);
        //        if (lsMSIFile != "")
        //        {
        //            lsInstallers += lsMSIFile + "#";
        //            lsInstallerParameters += lsParameters + "#";
        //        }
        //        writeToLogFile("msi parameters ok");
        //    }
        //    if (lsInstallers.EndsWith("#"))
        //    {
        //        lsInstallers = lsInstallers.Substring(0, lsInstallers.Length - 1);
        //    }
        //    if (lsInstallerParameters.EndsWith("#"))
        //    {
        //        lsInstallerParameters = lsInstallerParameters.Substring(0, lsInstallerParameters.Length - 1);
        //    }

        //    if (lsInstallerParameters == "")
        //    {
        //        writeToLogFile("looking for exe");
        //        foreach (DataRow loRow in loInstallTable.Select("actiontype='LaunchProcess' OR actiontype='LaunchProcessNoWait'"))
        //        {
        //            lsEXEFile = "";
        //            lsParameters = "";
        //            GetSetupParameters(loRow["command"].ToString(), loRow["param"].ToString(), ref lsEXEFile, ref lsParameters);

        //            if (lsEXEFile != "")
        //            {
        //                lsInstallers += lsEXEFile + "#";
        //                lsInstallerParameters += lsParameters + "#";
        //            }
        //        }
        //        if (lsInstallers.EndsWith("#"))
        //        {
        //            lsInstallers = lsInstallers.Substring(0, lsInstallers.Length - 1);
        //        }
        //        if (lsInstallerParameters.EndsWith("#"))
        //        {
        //            lsInstallerParameters = lsInstallerParameters.Substring(0, lsInstallerParameters.Length - 1);
        //        }
        //    }


        //    switch (lsType)
        //    {
        //        case "mytext":
        //            {
        //                loStringBuilder.AppendLine(@"command line for this package:");
        //                loStringBuilder.AppendLine(@"------------------------------");
        //                loStringBuilder.AppendLine(@"InstallDirect.exe");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"command line for this uninstall:");
        //                loStringBuilder.AppendLine(@"--------------------------------");
        //                loStringBuilder.AppendLine(@"UninstallDirect.exe");
        //                loStringBuilder.AppendLine(@"");
        //                break;
        //            }
        //        case "starterini":
        //            {
        //                loStringBuilder.AppendLine(@"; .ini file for DSMsg.exe");
        //                loStringBuilder.AppendLine(@"; v2.0 - Razvan Tudose, razvan.tudose@continental-corporation.com");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; All lines starting with ; will be ignored");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; ----------------------These lines apply to the Installation Message Box-------------------");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; Title_Caption  = title of the message window");
        //                loStringBuilder.AppendLine(@"; Label1_Caption = the first label that appears on the message window");
        //                loStringBuilder.AppendLine(@"; Label1_Color   = color of the first label");
        //                loStringBuilder.AppendLine(@"; Label2_Caption = the message window label that appears underneath Label1");
        //                loStringBuilder.AppendLine(@"; Label2_Color   = color of the second label");
        //                loStringBuilder.AppendLine(@"; Label3_Color   = color of the reboot label");
        //                loStringBuilder.AppendLine(@"; Label4_Color   = color of the approx installation time label");
        //                loStringBuilder.AppendLine(@"; Reboots        = the number of reboots (0|1)");
        //                loStringBuilder.AppendLine(@"; CloseAfter     = the number of seconds after which the message box will automatically close ");
        //                loStringBuilder.AppendLine(@";                  and installation will continue");
        //                loStringBuilder.AppendLine(@"; TimeoutAfter   = the number of seconds after which the message box will automatically close ");
        //                loStringBuilder.AppendLine(@";                  and installation will be aborted");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; Title and Label1 are mandatory, the rest are all optional");
        //                loStringBuilder.AppendLine(@"; ");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; -------------------------These lines apply to the Restart Message Box----------------------");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; RebootCounter        = True|False (default = True) - if false, disables the reboot counter");
        //                loStringBuilder.AppendLine(@"; RebootTitle          = title of the reboot message window");
        //                loStringBuilder.AppendLine(@"; RebootLabel1_Caption = the first label of the reboot message window");
        //                loStringBuilder.AppendLine(@"; RebootLabel1_Color   = the color of the first label");
        //                loStringBuilder.AppendLine(@"; RebootLabel2_Caption = the label that appears underneath Label1");
        //                loStringBuilder.AppendLine(@"; RebootLabel2_Color   = the color of the second label");
        //                loStringBuilder.AppendLine(@"; RebootSeconds        = the number of seconds after which the reboot is automatically performed");
        //                loStringBuilder.AppendLine(@"; RebootSec_Color      = the color of the shutdown counter label ");
        //                loStringBuilder.AppendLine(@"; RebootMessage        = allows the customizing of the label that contains the reboot message");
        //                loStringBuilder.AppendLine(@";		         (default value: To restart the computer now, press the RESTART NOW button.)");
        //                loStringBuilder.AppendLine(@"; ContinueMessage      = allows the customizing of post-installation message (if Reboots = 0)");
        //                loStringBuilder.AppendLine(@";		         (default value: Press OK to continue working.)");
        //                loStringBuilder.AppendLine(@"; RebootMsg_Color      = the color of the reboot message label ");
        //                loStringBuilder.AppendLine(@"; RebootTitle, RebootLabel1 and RebootSeconds are mandatory, the rest are all optional");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; ");
        //                loStringBuilder.AppendLine(@"; Example :");
        //                loStringBuilder.AppendLine(@";Title           = Adobe Acrobat XI Pro Patch 11.0.23.0 installation");
        //                loStringBuilder.AppendLine(@";Label1          = The Adobe Acrobat XI Pro Patch 11.0.23.0 will be installed now and this is just a message!");
        //                loStringBuilder.AppendLine(@";Label2          = Please save your work and close all your open applications (e.g. Lotus Notes, Word, Excel) and then press the OK button. ");
        //                loStringBuilder.AppendLine(@";Reboots         = 1");
        //                loStringBuilder.AppendLine(@";InstallTime     = 20");
        //                loStringBuilder.AppendLine(@";CloseAfter      = 50");
        //                loStringBuilder.AppendLine(@";TimeoutAfter    = 7200");
        //                loStringBuilder.AppendLine(@";RebootTitle     = Adobe Acrobat XI Pro Patch 11.0.23.0 has finished installing");
        //                loStringBuilder.AppendLine(@";RebootLabel1    = The installation of Adobe Acrobat XI Pro Patch 11.0.23.0 finished succesfully.");
        //                loStringBuilder.AppendLine(@";RebootLabel2    = Please make sure all your data is saved and the applications are closed.");
        //                loStringBuilder.AppendLine(@";RebootSeconds   = 100");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"Title_Caption = " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " installation");
        //                loStringBuilder.AppendLine(@"Label1_Caption = The " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " will be installed now.");
        //                loStringBuilder.AppendLine(@"Label1_Color = White");
        //                loStringBuilder.AppendLine(@"Label2_Caption = Please save your work and close all your open applications (e.g. Lotus Notes, Word, Excel) and then press the OK button.Provided by Continental Software Integration Management");
        //                loStringBuilder.AppendLine(@"Label2_Color = Black");
        //                loStringBuilder.AppendLine(@"Label3_Color = Red");
        //                loStringBuilder.AppendLine(@"Reboots = 0");
        //                loStringBuilder.AppendLine(@"InstallTime = 5");
        //                loStringBuilder.AppendLine(@"TimeoutAfter = 10800");
        //                loStringBuilder.AppendLine(@"RebootTitle = " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " has finished installing");
        //                loStringBuilder.AppendLine(@"RebootLabel1_Caption = The installation of " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " finished successfully.");
        //                loStringBuilder.AppendLine(@"RebootLabel2_Caption = Please make sure all your data is saved and the applications are closed.");
        //                loStringBuilder.AppendLine(@"RebootSeconds = 120");
        //                loStringBuilder.AppendLine(@"");
        //            }
        //            break;
        //        case "uninstallini":
        //            {
        //                loStringBuilder.AppendLine(@"; .ini file for DSMsg.exe");
        //                loStringBuilder.AppendLine(@"; v2.0 - Razvan Tudose, razvan.tudose@continental-corporation.com");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; All lines starting with ; will be ignored");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; ----These lines apply to the Installation Message Box or Uninstallation Message Box----");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; Title_Caption  = title of the message window");
        //                loStringBuilder.AppendLine(@"; Label1_Caption = the first label that appears on the message window");
        //                loStringBuilder.AppendLine(@"; Label1_Color   = color of the first label");
        //                loStringBuilder.AppendLine(@"; Label2_Caption = the message window label that appears underneath Label1");
        //                loStringBuilder.AppendLine(@"; Label2_Color   = color of the second label");
        //                loStringBuilder.AppendLine(@"; Label3_Color   = color of the reboot label");
        //                loStringBuilder.AppendLine(@"; Label4_Color   = color of the approx installation time label");
        //                loStringBuilder.AppendLine(@"; Reboots        = the number of reboots (0|1)");
        //                loStringBuilder.AppendLine(@"; UninstallTime  = the number of minutes the uninstallation will last");
        //                loStringBuilder.AppendLine(@"; CloseAfter     = the number of seconds after which the message box will automatically close ");
        //                loStringBuilder.AppendLine(@";                  and installation will continue");
        //                loStringBuilder.AppendLine(@"; TimeoutAfter   = the number of seconds after which the message box will automatically close");
        //                loStringBuilder.AppendLine(@";                  and installation will be aborted");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; Title and Label1 are mandatory, the rest are all optional");
        //                loStringBuilder.AppendLine(@"; ");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; -------------------------These lines apply to the Restart Message Box----------------------");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; RebootCounter        = True|False (default = True) - if false, disables the reboot counter");
        //                loStringBuilder.AppendLine(@"; RebootTitle          = title of the reboot message window");
        //                loStringBuilder.AppendLine(@"; RebootLabel1_Caption = the first label of the reboot message window");
        //                loStringBuilder.AppendLine(@"; RebootLabel1_Color   = the color of the first label");
        //                loStringBuilder.AppendLine(@"; RebootLabel2_Caption = the label that appears underneath Label1");
        //                loStringBuilder.AppendLine(@"; RebootLabel2_Color   = the color of the second label");
        //                loStringBuilder.AppendLine(@"; RebootSeconds        = the number of seconds after which the reboot is automatically performed");
        //                loStringBuilder.AppendLine(@"; RebootSec_Color      = the color of the shutdown counter label ");
        //                loStringBuilder.AppendLine(@"; RebootMessage        = allows the customizing of the label that contains the reboot message");
        //                loStringBuilder.AppendLine(@";		         (default value: To restart the computer now, press the RESTART NOW button.)");
        //                loStringBuilder.AppendLine(@"; ContinueMessage      = allows the customizing of post-installation message (if Reboots = 0)");
        //                loStringBuilder.AppendLine(@";		         (default value: Press OK to continue working.)");
        //                loStringBuilder.AppendLine(@"; RebootMsg_Color      = the color of the reboot message label ");
        //                loStringBuilder.AppendLine(@"; RebootTitle, RebootLabel1 and RebootSeconds are mandatory, the rest are all optional");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"; ");
        //                loStringBuilder.AppendLine(@"; Example :");
        //                loStringBuilder.AppendLine(@";Title           = Adobe Acrobat XI Pro Patch 11.0.23.0 uninstall");
        //                loStringBuilder.AppendLine(@";Label1          = The Adobe Acrobat XI Pro Patch 11.0.23.0 will be uninstalled now and this is just a message!");
        //                loStringBuilder.AppendLine(@";Label2          = Please save your work and close all your open applications (e.g. Lotus Notes, Word, Excel) and then press the OK button.");
        //                loStringBuilder.AppendLine(@";Reboots         = 1");
        //                loStringBuilder.AppendLine(@";UninstallTime   = 20");
        //                loStringBuilder.AppendLine(@";CloseAfter      = 50");
        //                loStringBuilder.AppendLine(@";TimeoutAfter    = 43200");
        //                loStringBuilder.AppendLine(@";RebootTitle     = Adobe Acrobat XI Pro Patch 11.0.23.0 has finished uninstalling");
        //                loStringBuilder.AppendLine(@";RebootLabel1    = The uninstall of Adobe Acrobat XI Pro Patch 11.0.23.0 finished succesfully.");
        //                loStringBuilder.AppendLine(@";RebootLabel2    = Please make sure all your data is saved and the applications are closed.");
        //                loStringBuilder.AppendLine(@";RebootSeconds   = 100");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@";");
        //                loStringBuilder.AppendLine(@"Title_Caption = " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " uninstall");
        //                loStringBuilder.AppendLine(@"Label1_Caption = The " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " will be uninstalled now.");
        //                loStringBuilder.AppendLine(@"Label1_Color = White");
        //                loStringBuilder.AppendLine(@"Label2_Caption = Please save your work and close all your open applications (e.g. Lotus Notes, Word, Excel) and then press the OK button. Provided by Continental Software Integration Management");
        //                loStringBuilder.AppendLine(@"Label2_Color = Black");
        //                loStringBuilder.AppendLine(@"Label3_Color = Red");
        //                loStringBuilder.AppendLine(@"Reboots = 0");
        //                loStringBuilder.AppendLine(@"UninstallTime = 5");
        //                loStringBuilder.AppendLine(@"TimeoutAfter = 10800");
        //                loStringBuilder.AppendLine(@"RebootTitle = " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " has finished uninstalling");
        //                loStringBuilder.AppendLine(@"RebootLabel1_Caption = The uninstall of " + lsManufacturer + " " + lsProduct + " " + lsVersion + " " + lsReleaseName + " finished successfully.");
        //                loStringBuilder.AppendLine(@"RebootLabel2_Caption = Please make sure all your data is saved and the applications are closed.");
        //                loStringBuilder.AppendLine(@"RebootSeconds = 120");
        //                loStringBuilder.AppendLine(@"");
        //            }
        //            break;
        //        case "uninstall":
        //            {
        //                loStringBuilder.AppendLine(@"' **************************** !!!!! DO NOT DELETE !!!!!*******************************");
        //                loStringBuilder.AppendLine(@"' Company: Continental AG");
        //                loStringBuilder.AppendLine(@"' Script GUID: {EDB1128A-8302-4CB7-B24E-A26B79BB8954}");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' *******************************END    OF     SECTION*********************************");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' ******************************* DS multi-platform uninstall script (exact frame vers see below under 'Version') ********************************");
        //                loStringBuilder.AppendLine(@"' Filename: " + lsPackageId + @"_W10_uninstall.vbs");
        //                loStringBuilder.AppendLine(@"' ");
        //                loStringBuilder.AppendLine(@"' ALL YOU HAVE TO DO IS TO FILL IN THE PACKAGE INFO BELOW !!!");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Build version 5.0.0.3");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Option Explicit");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Const ReadyForUse = True				' SET THIS CONSTANT TO TRUE ONLY AFTER THE PACKAGE IS READY FOR USAGE");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' define global constants");
        //                loStringBuilder.AppendLine(@"' *******************************************************************************");
        //                loStringBuilder.AppendLine(@"Const Version = ""5.0""					' Version of Uninstall Script");
        //                loStringBuilder.AppendLine(@"Const SCRIPTBUILD = ""5.0.0.3""				' Build Version of Uninstall Script");
        //                loStringBuilder.AppendLine(@"Const ForAppending = 8					' Needed for Logfile mode");
        //                loStringBuilder.AppendLine(@"Const HKEY_LOCAL_MACHINE = &H80000002			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_CLASSES_ROOT = &H80000000			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_CURRENT_USER = &H80000001			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_USERS = &H80000003				' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_CURRENT_CONFIG = &H80000005			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Fill in package Infos below");
        //                loStringBuilder.AppendLine(@"Const PackageID = """ + lsPackageId + @"""					' Specify DSPID of main package here; normally this is the folder name");
        //                loStringBuilder.AppendLine(@"Const PackageName = """ + lsPackageName + @"""					' Specify package name and version of main package here, e.g. Mindmanager Pro 7.0.429.0");
        //                loStringBuilder.AppendLine(@"Const SilentMSIMSP = " + lsSilentMSIMSP + @"				' Set to True If you want all MSI uninstalls to run silent. If set to False, they are run with /qb!");
        //                switch (lsPackageTypeId)
        //                {
        //                    case "551c4c56-805a-47df-9d8f-50f7dfbcd513":
        //                        //legacy

        //                        loStringBuilder.AppendLine(@"Const UninstallProduct = """ + lsUninstallKey + lsUninstallProduct + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify a MSI package - using productcode - to be uninstalled here, eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}");
        //                        loStringBuilder.AppendLine(@"							' Use prefix I:: if the uninstall requires an InstallShield installation and the DCOM Server must be set to the Launching User instead of the Interactive User.");
        //                        loStringBuilder.AppendLine(@"                                                        ' eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}#I::{DAA212AA-2F2B-4225-9223-222ABBBAAAAA}");
        //                        loStringBuilder.AppendLine(@"Const LegacyUninstall = """ + lsLegacyUninstall + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the path and name of the uninstall setup file");
        //                        loStringBuilder.AppendLine(@"							' Use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' e.g :%SourcePath%$DSClient\Ipastall\setup.exe#%windir%\notepad.exe");
        //                        loStringBuilder.AppendLine(@"							' you can use %windir%\, %ProgramFiles% and %ProgramFiles(x86)% defined for 64 bit process, etc...");
        //                        loStringBuilder.AppendLine(@"Const AdditionalLegacyUninstallParameters = """ + lsLegacyUninstallParams + @"""		' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify additional parameters for legacy Uninstall installation here.");
        //                        loStringBuilder.AppendLine(@"							' You can use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' !!Handle full path name with space using double quotes!!  eg. "" -s -f1""""%SourcePath%$DSClient\uninstall"""""" or");
        //                        loStringBuilder.AppendLine(@"							' "" -s -f1""""%SourcePath%$DSClient\uninstall.file""""#-s -f1""""%SourcePath%$DSClient\uninstall.file"""""" ");


        //                        break;
        //                    default:
        //                        loStringBuilder.AppendLine(@"Const UninstallProduct = """ + lsUninstallKey + lsUninstallProduct + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify a MSI package - using productcode - to be uninstalled here, eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}");
        //                        loStringBuilder.AppendLine(@"							' Use prefix I:: if the uninstall requires an InstallShield installation and the DCOM Server must be set to the Launching User instead of the Interactive User.");
        //                        loStringBuilder.AppendLine(@"                                                        ' eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}#I::{DAA212AA-2F2B-4225-9223-222ABBBAAAAA}");
        //                        loStringBuilder.AppendLine(@"Const LegacyUninstall = """ + lsLegacyUninstall + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the path and name of the uninstall setup file");
        //                        loStringBuilder.AppendLine(@"							' Use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' e.g :%SourcePath%$DSClient\Ipastall\setup.exe#%windir%\notepad.exe");
        //                        loStringBuilder.AppendLine(@"							' you can use %windir%\, %ProgramFiles% and %ProgramFiles(x86)% defined for 64 bit process, etc...");
        //                        loStringBuilder.AppendLine(@"Const AdditionalLegacyUninstallParameters = """ + lsLegacyUninstallParams + @"""		' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify additional parameters for legacy Uninstall installation here.");
        //                        loStringBuilder.AppendLine(@"							' You can use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' !!Handle full path name with space using double quotes!!  eg. "" -s -f1""""%SourcePath%$DSClient\uninstall"""""" or");
        //                        loStringBuilder.AppendLine(@"							' "" -s -f1""""%SourcePath%$DSClient\uninstall.file""""#-s -f1""""%SourcePath%$DSClient\uninstall.file"""""" ");
        //                        break;
        //                }
        //                loStringBuilder.AppendLine(@"Const SetDefaultPath = ""%Sourcepath%""			' Set default path to custom directory. Default value is Sourcepath / Sometime landesk policy.invoker don't provide current directory and set this to c:\windows\system32 and not for the package source							");
        //                loStringBuilder.AppendLine(@"Const winlogonInst =  False				' Check Winlogon prompt - start package in master mode(silent install) If nobody is logged ");
        //                loStringBuilder.AppendLine(@"Const AllowLANDeskParameter = True			' Allow Landesk Parameter(s) - 1: Landesk Parameter: /Silent start package in master mode(silent install) if nobody is logged and !!quit with error code 1602 if user is logged!!");
        //                loStringBuilder.AppendLine(@"							' this can be a problem for exe that build current directory path from parent process");
        //                loStringBuilder.AppendLine(@"Const RequiredDiskSpace	= """ + lsRequiredDiskSpace + @"""				' Can be a hash (#) separated list.");
        //                loStringBuilder.AppendLine(@"							' Measure in MB unit and support non-decimal value only.				");
        //                loStringBuilder.AppendLine(@"                                                        ' Specify the minimum required disk space on specified drives for installation. ");
        //                loStringBuilder.AppendLine(@"                                                        ' 0 = no check. If requirement is not fullfilled message box is shown and installation will quit with errorcode 1602.");
        //                loStringBuilder.AppendLine(@"Const DiskName = """ + lsDiskName + @"""					' Can be a hash (#) separated list.");
        //                loStringBuilder.AppendLine(@"                                                        ' Specify drive name for disk space checking.");
        //                loStringBuilder.AppendLine(@"Const WaitForOpenProcesses = """ + lsProcessKill + lsWaitForOpenProcesses + @"""				' Can be a hash (#) separated list.");
        //                loStringBuilder.AppendLine(@"                                                        ' Script displays a message box to user and waits until all processes are closed.");
        //                loStringBuilder.AppendLine(@"Const KillOpenProcesses = """ + lsProcessKill + @"""				' Can be a hash (#) separated list.");
        //                loStringBuilder.AppendLine(@"                                                        ' These processes will be killed after warning the user 3 times with a message box that they are still open.");
        //                loStringBuilder.AppendLine(@"Const StopServiceProcess = """"				' Can be a hash (#) separated list. ");
        //                loStringBuilder.AppendLine(@"                                                        ' These processes will be stoped using the same 3 message box that KillOpenProcesses.");
        //                loStringBuilder.AppendLine(@"Const StartMutex = True					' Specify if Mutex Tool should be used. True|False");
        //                loStringBuilder.AppendLine(@"Const VulscanCheck = False				' Specify if start vulscan check. True|False");
        //                loStringBuilder.AppendLine(@"Const LANDeskInventory = ""Both""				' Specify if and what type of LANDesk Inventory should be started after successful Package installation. (Default: Hardware)");
        //                loStringBuilder.AppendLine(@"							' Values can be: Hardware   - start LANDesk Hardware Inventory");
        //                loStringBuilder.AppendLine(@"							' 	Software   - start LANDesk Software Inventory");
        //                loStringBuilder.AppendLine(@"							' 	Both       - start Hardware AND Software Inventory");
        //                loStringBuilder.AppendLine(@"							' 	Empty ("""") - don't start any Inventory");
        //                loStringBuilder.AppendLine(@"Const DeleteDSPIDKey = """ + lsPackageId + @"""				' Can be a hash (#) separated list.");
        //                loStringBuilder.AppendLine(@"                                                        ' Name of DSPID Key(s) to delete.  [String]");
        //                loStringBuilder.AppendLine(@"Const ASDeleteKey = """ + lsPackageId + @"""					' Can be a hash (#) separated list.");
        //                loStringBuilder.AppendLine(@"                                                        ' Specify here the list of ActiveSetup keys that will be deleted If the uninstallation is successful. [String]");
        //                loStringBuilder.AppendLine(@"Const AscContext = 32 					' Define where is deleted activesetup(ASDeleteKey) !!!, default value for 32 bit system and 64 bit system is 32, ");
        //                loStringBuilder.AppendLine(@"							' If you need to switch to 64 bit context for Active setup key change this value for 64");
        //                loStringBuilder.AppendLine(@"Const RebootComputer = " + lsRebootComputer + @"   				' Set to True If you want the computer to reboot after a successful uninstallation.");
        //                loStringBuilder.AppendLine(@"							' Requires the DS_SIE.exe and <DSPID>_Uninstall.ini files in the $DSClient directory.");
        //                loStringBuilder.AppendLine(@"							' The DS_SIE_Uninstall.ini file must be filled out accordingly!");
        //                loStringBuilder.AppendLine(@"Const ShowMessageBoxPre = " + lsShowMessageBoxPre + @"				' Shows message box prior to running the installation. ");
        //                loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_uninstall.ini in the $DSClient directory.");
        //                loStringBuilder.AppendLine(@"							' The <DSPID>_uninstall.ini file must be filled out accordingly!");
        //                loStringBuilder.AppendLine(@"Const ShowMessageBoxPost = " + lsShowMessageBoxPost + @"			' Shows message box after running the installation (only If no reboot is scheduled; If reboot is schedule, reboot message box is shown!)");
        //                loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_uninstall.ini in the $DSClient directory.");
        //                loStringBuilder.AppendLine(@"							' The <DSPID>_uninstall.ini file must be filled out accordingly!");
        //                loStringBuilder.AppendLine(@"Const ShowProgressBar = " + lsShowProgressBar + @"				' Set to True if you want to show a progress bar during installation. Requires DS_SIE.exe on the client.");
        //                loStringBuilder.AppendLine(@"Const EnableCustomMessageBox = True			' Set to False if you want to hide the message box prompted for RequiredProduct and RequiredDiskSpace.");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' global variables for objects");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim fso, wso, WshNetwork");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' global variables for directories and user infos");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim Computername		' Computername as String");
        //                loStringBuilder.AppendLine(@"Dim Username			' Name of user (without domain name) who started this script as String");
        //                loStringBuilder.AppendLine(@"Dim Systemdrive			' Drive where Windows is installed, e.g. C: without ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SysRoot			' Path to Systemroot ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SWRep			' Path to Software Repository ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim Sourcepath			' Sourcepath of Script ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim Logfilename			' Name of the Logfile including full path as String (used only internally)");
        //                loStringBuilder.AppendLine(@"Dim IniFileName			' Name of the IniFile including full path as String (used only internally)");
        //                loStringBuilder.AppendLine(@"Dim ProgramFiles		' Path to 32-bit Programfiles folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim ProgramFiles64		' Path to 64-bit Programfiles folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SystemFolder		' Path to 32-bit System32 folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SystemFolder64		' Path to 64-bit System32 folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim FreeDiskSpace		' Amount of free space on System drive in MB");
        //                loStringBuilder.AppendLine(@"Dim MSILogDir			' Directory for the MSI logfile ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim InstallerVersion		' Version of windows installer (msiexec.exe) as String");
        //                loStringBuilder.AppendLine(@"Dim CurrUserProfile		' Current login user profile ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim CurrUserAppdata		' Current login user AppData ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim CurrUserLocalAppdata	' Current login user LocalAppData ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim ALLUSERSPROFILE		' Allusers profile ending with ""\"" as String	");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' global temporary variables");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim check, pbPID, pbMsg, CustPID, ZoneCheckDisabled, InstallSwitch, bitWise, OSVer");
        //                loStringBuilder.AppendLine(@"Dim UninstallReturnCode");
        //                loStringBuilder.AppendLine(@"Dim ProductMatrix, ClientPlatform, ShowMessageBoxes, WaitToKillProcess, StopLANDeskInventory");
        //                loStringBuilder.AppendLine(@"Dim DCOMInstallShieldAppIDs");
        //                loStringBuilder.AppendLine(@"Dim arrFolders(), intSize");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' get basic objects");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Set fso = CreateObject( ""Scripting.FileSystemObject"" )");
        //                loStringBuilder.AppendLine(@"Set wso = WScript.CreateObject( ""WScript.Shell"" )");
        //                loStringBuilder.AppendLine(@"Set WshNetwork = WScript.CreateObject(""WScript.Network"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Get OS Architecture vs Processor ARCHITECTURE");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim PROC_ARCH1 : PROC_ARCH1 = UCASE( wso.ExpandEnvironmentStrings(""%PROCESSOR_ARCHITECTURE%"") )	'detect OS PROCESSOR ARCHITECTURE");
        //                loStringBuilder.AppendLine(@"Dim PROC_ARCH2 : PROC_ARCH2 = UCASE( wso.ExpandEnvironmentStrings(""%PROCESSOR_ARCHITEW6432%"") ) 'detect OS PROCESSOR ARCHITECTURE");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' start execution");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' run prerequisites -- Do not add anything in front of this block !!!");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"'Set ReturnCode default value");
        //                loStringBuilder.AppendLine(@"UninstallReturnCode = -1");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Mandatory function to initialize variables, must be first, do not touch!");
        //                loStringBuilder.AppendLine(@"If InitializeLogfile = False Then");
        //                loStringBuilder.AppendLine(@"	write2Log(""WARNING: Some of your environment variables could not be read!"")");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Disable IE zone checks");
        //                loStringBuilder.AppendLine(@"ZoneCheckDisabled = DisableIEZoneChecks(True)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Set default path");
        //                loStringBuilder.AppendLine(@"SetdefaultpathSrc()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'Check for silent install mode and LANdesk paramater(s)");
        //                loStringBuilder.AppendLine(@"CheckSilentUninstall()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Query for installed products (ProductMatrix)");
        //                loStringBuilder.AppendLine(@"BuildInstalledProductMatrix(UninstallProduct)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' End of Mandatory Function to initialize variables, must be first, do not touch!");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' pre-uninstallations section - optional block, can be modified by package creator");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' end of pre-uninstallations section");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'Exit If there are no products found to uninstall");
        //                loStringBuilder.AppendLine(@"If ProductMatrix = """" Then");
        //                loStringBuilder.AppendLine(@"	Dim NothingToDo");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	NothingToDo = True");
        //                loStringBuilder.AppendLine(@"	If (LegacyUninstall <> """") or (PackageID <> """") Then");
        //                loStringBuilder.AppendLine(@"		If Key_Exists_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & PackageID & ""\DisplayName"") Then ");
        //                loStringBuilder.AppendLine(@"			NothingToDo = False");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			UninstallReturnCode = 0");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If NothingToDo Then");
        //                loStringBuilder.AppendLine(@"		ExitScript "" No product found to uninstall, exiting..."", UninstallReturnCode");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'Check if vulscan is running");
        //                loStringBuilder.AppendLine(@"If CheckProcess(""VULSCAN.EXE"") Then Write2Log(""Vulscan found running ..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'Show message box, If there are products found to uninstall and ShowMessageBox = True");
        //                loStringBuilder.AppendLine(@"If ShowMessageBoxPre = True Then");
        //                loStringBuilder.AppendLine(@"	ShowMessagePre");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Wait for user to close open applications if necessary");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------");
        //                loStringBuilder.AppendLine(@"HandlingUserforkillApp()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Display progress bar if pre-installation actions are taking too long ");
        //                loStringBuilder.AppendLine(@"If ShowProgressBar = True Then");
        //                loStringBuilder.AppendLine(@"	' If you want to display a custom message, call DisplayCustomProgressBar instead of DisplayProgressBar(1):");
        //                loStringBuilder.AppendLine(@"	' pbPID = DisplayProgressBar(3)");
        //                loStringBuilder.AppendLine(@"	' pbMsg: Display progress bar custom message");
        //                loStringBuilder.AppendLine(@"	pbMsg = PackageName & "" uninstallation is in the progress ...""");
        //                loStringBuilder.AppendLine(@"	pbPID = DisplayCustomProgressBar(pbMsg)");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' run uninstallations");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"UninstallReturnCode = StartUninstallations ()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Post-uninstallation section - optional block, can be modified by package creator");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"If UninstallReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Final uninstallation checks");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' Do additional operations in case of uninstall success");
        //                loStringBuilder.AppendLine(@"	DeleteDSPID(DeleteDSPIDKey)");
        //                loStringBuilder.AppendLine(@"	DeleteAS()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (LANDeskInventory <> """") And (StopLANDeskInventory = False) Then StartLANDeskInventory()");
        //                loStringBuilder.AppendLine(@"	If RebootComputer Then ");
        //                loStringBuilder.AppendLine(@"		LANDeskSDCLIENT(""Reboot initiated by DS_SIE."")");
        //                loStringBuilder.AppendLine(@"		Reboot(UninstallReturnCode)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		'Show message box after installation");
        //                loStringBuilder.AppendLine(@"		If ShowMessageBoxPost = True Then");
        //                loStringBuilder.AppendLine(@"			ShowMessagePost");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ExitScript ""End of MP Uninstall script for "" & PackageID & "". Uninstallation was successful without reboot. "", UninstallReturnCode");
        //                loStringBuilder.AppendLine(@"Else");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ExitScript ""End of MP Uninstall script for "" & PackageID & "". Uninstallation was not successful! "", UninstallReturnCode");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"' *********************************End of main Function********************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' ********************************* Functions & Sub ************************************************");
        //                loStringBuilder.AppendLine(@"' **************************************************************************************************");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ParseConst");
        //                loStringBuilder.AppendLine(@"' Function:	To replace the variables in const with actual value");
        //                loStringBuilder.AppendLine(@"' Parameter:   	Strconst");
        //                loStringBuilder.AppendLine(@"' Return:       String");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ParseConst(Strconst)");
        //                loStringBuilder.AppendLine(@"	Dim tmpVar, tmpVal");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%Systemdrive%"",Systemdrive,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SysRoot%"",SysRoot,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SWRep%"",SWRep,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%Sourcepath%"",Sourcepath,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ProgramFiles%"",ProgramFiles,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ProgramFiles64%"",ProgramFiles64,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%CurrUserProfile%"",CurrUserProfile,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%CurrUserAppdata%"",CurrUserAppdata,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%CurrUserLocalAppdata%"",CurrUserLocalAppdata,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ALLUSERSPROFILE%"",ALLUSERSPROFILE,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%MSILogDir%"",MSILogDir,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SystemFolder%"",SystemFolder,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SystemFolder64%"",SystemFolder64,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ProgramData%"",ALLUSERSPROFILE,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%MSILogDir%"",MSILogDir,1,-1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(Strconst, ""%"") > 0 Then");
        //                loStringBuilder.AppendLine(@"		tmpVar = Mid(Strconst, InStr(Strconst, ""%""), InStrRev(Strconst, ""%""))");
        //                loStringBuilder.AppendLine(@"		tmpVal = wso.ExpandEnvironmentStrings(tmpVar)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If tmpVal = tmpVar Then ");
        //                loStringBuilder.AppendLine(@"			tmpVal = """"");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			If Right(tmpVal,1) <> ""\"" Then tmpVal = tmpVal & ""\""");
        //                loStringBuilder.AppendLine(@"			Strconst = tmpVal & Right(Strconst, Len(Strconst) - InStrRev(Strconst, ""%""))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ParseConst = Strconst");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: PreInstallCheck");
        //                loStringBuilder.AppendLine(@"' Function:	Check for running vulscan and mutex");
        //                loStringBuilder.AppendLine(@"' Parameter:   	");
        //                loStringBuilder.AppendLine(@"' Return:       ");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"	' Check if Vulscan is running at the background. Installation will continue once the vulscan is completed.");
        //                loStringBuilder.AppendLine(@"	If VulscanCheck Then");
        //                loStringBuilder.AppendLine(@"		Dim cp, timeOut");
        //                loStringBuilder.AppendLine(@"		cp = CheckProcess(""VULSCAN.EXE"")");
        //                loStringBuilder.AppendLine(@"		If cp = True Then CustPID = DisplayCustomProgressBar(""Vulscan is found running.Installation will continue once it is completed."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		timeOut = 0");
        //                loStringBuilder.AppendLine(@"		While cp");
        //                loStringBuilder.AppendLine(@"			write2Log(""Vulscan is found running... Waiting for vulscan to complete."")");
        //                loStringBuilder.AppendLine(@"			Wscript.Sleep 10000");
        //                loStringBuilder.AppendLine(@"			cp = CheckProcess(""VULSCAN.EXE"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			timeOut = timeOut + 10000");
        //                loStringBuilder.AppendLine(@"			' Exit loop after 15 minutes");
        //                loStringBuilder.AppendLine(@"			If (timeOut > 900000) Then");
        //                loStringBuilder.AppendLine(@"				KillProgressBar(CustPID)");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Timeout received from vulscan check. Exiting..."", 1602 : Err.Clear");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Wend");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		KillProgressBar(CustPID)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Check if there is other MSI installation in the progress.");
        //                loStringBuilder.AppendLine(@"	If StartMutex Then");
        //                loStringBuilder.AppendLine(@"		Dim mm");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		mm = MSIMutex()");
        //                loStringBuilder.AppendLine(@"		If mm = True Then CustPID = DisplayCustomProgressBar(""Another MSI installation is in progress.Installation will continue once it is completed."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		While mm");
        //                loStringBuilder.AppendLine(@"			Write2Log(""Another MSI installation is in progress. Waiting 10 seconds."")");
        //                loStringBuilder.AppendLine(@"			Wscript.Sleep 10000");
        //                loStringBuilder.AppendLine(@"			mm = MSIMutex()");
        //                loStringBuilder.AppendLine(@"		Wend");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		KillProgressBar(CustPID)");
        //                loStringBuilder.AppendLine(@"		write2Log(VbTab & ""=> No other running MSI installations found now..."")");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CustomMessageBox");
        //                loStringBuilder.AppendLine(@"' Function:	To prompt custom message with the Timeout support");
        //                loStringBuilder.AppendLine(@"' Parameter:   	strText,[nSecondsToWait],[strTitle],[nType]");
        //                loStringBuilder.AppendLine(@"' Return:       intButton, number of the button that the user clicked, -1 if timed out");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CustomMessageBox(strText, timeouts, strTitle, iconType)");
        //                loStringBuilder.AppendLine(@"	Dim msg, btnrtn, buttonClicked");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	btnrtn = -1");
        //                loStringBuilder.AppendLine(@"	If IsNull(strText) Then strText = ""For support call your local servicedesk.""");
        //                loStringBuilder.AppendLine(@"	If IsNull(timeouts) Then timeouts = 10800");
        //                loStringBuilder.AppendLine(@"	If IsNull(strTitle) Then strTitle = ""Software Uninstallation - "" & PackageID");
        //                loStringBuilder.AppendLine(@"	If IsNull(iconType) Then iconType = vbOKOnly + vbCritical");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	msg = ""The uninstallation of "" & PackageName & "" has been interrupted."" & vbCrLf & vbCrLf & strText");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (ShowMessageBoxes = True) And (EnableCustomMessageBox = True) Then");
        //                loStringBuilder.AppendLine(@"		'For detail on message customization, refer to http://msdn.microsoft.com/en-us/library/x83z1d9f(v=vs.84).aspx");
        //                loStringBuilder.AppendLine(@"		'Default nType set to OK button, Stop Mark icon. 0 + 16 = 16");
        //                loStringBuilder.AppendLine(@"		btnrtn = wso.Popup(msg, timeouts, strTitle, iconType)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case btnrtn");
        //                loStringBuilder.AppendLine(@"		Case -1 buttonClicked = ""Timed Out, no""");
        //                loStringBuilder.AppendLine(@"		Case 1 buttonClicked = ""OK""");
        //                loStringBuilder.AppendLine(@"		Case 2 buttonClicked = ""Cancel""");
        //                loStringBuilder.AppendLine(@"		Case 3 buttonClicked = ""Abort""");
        //                loStringBuilder.AppendLine(@"		Case 4 buttonClicked = ""Retry""");
        //                loStringBuilder.AppendLine(@"		Case 5 buttonClicked = ""Ignore""");
        //                loStringBuilder.AppendLine(@"		Case 6 buttonClicked = ""Yes""");
        //                loStringBuilder.AppendLine(@"		Case 7 buttonClicked = ""No""");
        //                loStringBuilder.AppendLine(@"		Case 10 buttonClicked = ""Try Again""");
        //                loStringBuilder.AppendLine(@"		Case 11 buttonClicked = ""Continue""	");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2log(""Custom message box: "" & buttonClicked & "" button clicked, "" & btnrtn)");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	CustomMessageBox = btnrtn");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Messagebox");
        //                loStringBuilder.AppendLine(@"' Function:	To prompt message with the Timeout support");
        //                loStringBuilder.AppendLine(@"' Parameter:   	strText,[nSecondsToWait],[strTitle],[nType]");
        //                loStringBuilder.AppendLine(@"' Return:       intButton, number of the button that the user clicked, -1 if timed out");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function MessageBox (strText)");
        //                loStringBuilder.AppendLine(@"	Dim btnrtn, buttonClicked, timeouts, strTitle, iconType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	btnrtn = -1");
        //                loStringBuilder.AppendLine(@"	timeouts = 10800");
        //                loStringBuilder.AppendLine(@"	strTitle = PackageName");
        //                loStringBuilder.AppendLine(@"	'OK button only, information icon, alwaysOnTop");
        //                loStringBuilder.AppendLine(@"	'0 + 64 + 4096");
        //                loStringBuilder.AppendLine(@"	iconType = vbOKOnly + vbExclamation + vbSystemModal");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	btnrtn = wso.Popup(strText, timeouts, strTitle, iconType)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case btnrtn");
        //                loStringBuilder.AppendLine(@"		Case -1 buttonClicked = ""Timed Out, no""");
        //                loStringBuilder.AppendLine(@"		Case 1 buttonClicked = ""OK""");
        //                loStringBuilder.AppendLine(@"		Case 2 buttonClicked = ""Cancel""");
        //                loStringBuilder.AppendLine(@"		Case 3 buttonClicked = ""Abort""");
        //                loStringBuilder.AppendLine(@"		Case 4 buttonClicked = ""Retry""");
        //                loStringBuilder.AppendLine(@"		Case 5 buttonClicked = ""Ignore""");
        //                loStringBuilder.AppendLine(@"		Case 6 buttonClicked = ""Yes""");
        //                loStringBuilder.AppendLine(@"		Case 7 buttonClicked = ""No""");
        //                loStringBuilder.AppendLine(@"		Case 10 buttonClicked = ""Try Again""");
        //                loStringBuilder.AppendLine(@"		Case 11 buttonClicked = ""Continue""	");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2log(""Message box prompted: "" & buttonClicked & "" button clicked, "" & btnrtn)");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	MessageBox = btnrtn");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckSilentUninstall");
        //                loStringBuilder.AppendLine(@"' Function: 1 - If winlogonInst is True, Start as silent uninstall If nobody is logged, or If user is logged start with standard setting configuration. like ds_sie messagebox. (see release note)");
        //                loStringBuilder.AppendLine(@"' Function: 2 - If AllowLAndeskParameter is True, check If the script is started with /Silent parameter -> Start silent uninstall If nobody is logged or quit with error 1602 If user is logged. (see release note)");
        //                loStringBuilder.AppendLine(@"' Parameter:   	Using Global Const: winlogonInst, AllowLAndeskParameter");
        //                loStringBuilder.AppendLine(@"' Parameter:   	from command line of vbscript: /Silent");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub CheckSilentUninstall()");
        //                loStringBuilder.AppendLine(@"	' Start as silent install if nobody is logged, or if user is logged start with standard setting configuration. like ds_sie messagebox. (see release note)");
        //                loStringBuilder.AppendLine(@"	If winlogonInst Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info: switch this package to silent if nobody is logged""");
        //                loStringBuilder.AppendLine(@"		If AllowLANDeskParameter = True Then ");
        //                loStringBuilder.AppendLine(@"			If LandeskSilent = False Then");
        //                loStringBuilder.AppendLine(@"				SilentInst()");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			SilentInst()");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	'If AllowLANDeskParameter is True, check if the script is started with /Silent parameter -> Start silent install if nobody is logged or quit with error 1602 if user is logged. (see release note)");
        //                loStringBuilder.AppendLine(@"	'If winlogonInst = False and AllowLANDeskParameter = True Then ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If AllowLANDeskParameter = True Then ");
        //                loStringBuilder.AppendLine(@"		write2Log(""Landesk Parameter /Silent is allowed to switch this package to silent"")");
        //                loStringBuilder.AppendLine(@"		If LandeskSilent = True Then ");
        //                loStringBuilder.AppendLine(@"			write2Log(""Receive Landesk Parameter /Silent - switch this package to silent"")");
        //                loStringBuilder.AppendLine(@"			SilentInst()");
        //                loStringBuilder.AppendLine(@"			If ShowMessageBoxes = True Then   ");
        //                loStringBuilder.AppendLine(@"				'LANDeskSDCLIENT(""Landesk parameter /Silent UserLogged"")");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Landesk parameter /Silent - User Logged exit script"", 1602");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: HandlingUserforkillApp");
        //                loStringBuilder.AppendLine(@"' Function: 1 - displays a message box to user for handling process to close.");
        //                loStringBuilder.AppendLine(@"' Function: 2 - kill list of process after 3 messagebox to the user ");
        //                loStringBuilder.AppendLine(@"' Function: 3 - Stop service process");
        //                loStringBuilder.AppendLine(@"' Parameter:   Using Global Const WaitForOpenProcesses, KillOpenProcesses,StopServiceProcess");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function HandlingUserforkillApp()");
        //                loStringBuilder.AppendLine(@"	Dim tmp :: tmp = True");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If WaitForOpenProcesses <> """" Then");
        //                loStringBuilder.AppendLine(@"		write2Log(""Start checking open processes and Services"")");
        //                loStringBuilder.AppendLine(@"		tmp = WaitForOpenApps (WaitForOpenProcesses, KillOpenProcesses, StopServiceProcess)");
        //                loStringBuilder.AppendLine(@"		If tmp Then");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> End of checking open processes and Services no more dependent open applications found, continue installation..."")");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		HandlingUserforkillApp =  tmp");
        //                loStringBuilder.AppendLine(@"	Elseif WaitForOpenProcesses = """" and KillOpenProcesses  = """" and StopServiceProcess <> """" Then");
        //                loStringBuilder.AppendLine(@"		write2Log(""Start checking Services is started"")");
        //                loStringBuilder.AppendLine(@"		StopServices(StopServiceProcess)");
        //                loStringBuilder.AppendLine(@"		HandlingUserforkillApp =  True ' Not implemented");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: winlogonstate");
        //                loStringBuilder.AppendLine(@"' Function:	Check winlogon prompt");
        //                loStringBuilder.AppendLine(@"' Parameter:   	none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function  winlogonstate()");
        //                loStringBuilder.AppendLine(@"	Dim sessionID :: sessionID = False");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService,colProcesses,objProcess,ProcessId,colLogonSessions,LogonSession");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	write2Log ""Info: winlogonstate started checking """);
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Warning: winlogonstate GetObject = "" & Err.number & "" "" & Err.Description : Err.Clear");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Set colProcesses = objWMIService.ExecQuery(""Select * from Win32_Process Where Name = 'explorer.exe'"")");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then ");
        //                loStringBuilder.AppendLine(@"			write2Log ""Warning: Win32_Process query = "" & Err.number & "" "" & Err.Description : Err.Clear");
        //                loStringBuilder.AppendLine(@"		Else	");
        //                loStringBuilder.AppendLine(@"			For Each objProcess in colProcesses");
        //                loStringBuilder.AppendLine(@"				ProcessId = objProcess.ProcessId");
        //                loStringBuilder.AppendLine(@"				Set colLogonSessions = objWMIService.ExecQuery(""Associators of {Win32_Process='"" & ProcessId & ""'} Where Resultclass = Win32_LogonSession Assocclass = Win32_SessionProcess"", ""WQL"", 48)");
        //                loStringBuilder.AppendLine(@"				If Err <> 0 Then ");
        //                loStringBuilder.AppendLine(@"					write2Log ""Warning:  winlogonstate Win32_LogonSession query = "" & Err.number & "" "" & Err.Description : Err.Clear");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					For Each LogonSession in colLogonSessions    ");
        //                loStringBuilder.AppendLine(@"						sessionID = True");
        //                loStringBuilder.AppendLine(@"					Next");
        //                loStringBuilder.AppendLine(@"					If Err <> 0 Then write2Log ""Warning:  winlogonstate LogonSession Result = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			Next");
        //                loStringBuilder.AppendLine(@"		End If	");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If sessionID = False Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info:  winlogonstate LogonSession Result = False""");
        //                loStringBuilder.AppendLine(@"		Dim UserContext :: UserContext = LANDeskStartAsUser");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If UserContext = False Then ");
        //                loStringBuilder.AppendLine(@"			write2Log ""Info:  winlogonstate LANDeskStartAsUser Result = False..."" ");
        //                loStringBuilder.AppendLine(@"			winlogonstate = True ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2Log ""Warning:  winlogonstate LANDeskStartAsUser Result = True - the LogonSession return code is False but the LANDeskStartAsUser return code is True !!""");
        //                loStringBuilder.AppendLine(@"			winlogonstate = False");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Elseif sessionID = True Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info:  winlogonstate LogonSession Result = True""");
        //                loStringBuilder.AppendLine(@"		winlogonstate = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: LandeskSilent");
        //                loStringBuilder.AppendLine(@"' Function:	Landesk parameter /Silent, switch to silent mode");
        //                loStringBuilder.AppendLine(@"' Parameter:   	none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function LandeskSilent()");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Dim landeskarg,ArrayLandeskarg,i");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Landesksilent = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set landeskarg = WScript.Arguments.Named ");
        //                loStringBuilder.AppendLine(@"	If Err.number <> 0 Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""ERROR: could not get arguments"" & Err.Description ");
        //                loStringBuilder.AppendLine(@"		ExitScript ""ERROR: could not get silent arguments! "" , 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 0 To landeskarg.Count - 1");
        //                loStringBuilder.AppendLine(@"		If landeskarg.Exists (""Silent"") = vbTrue Then");
        //                loStringBuilder.AppendLine(@"			LandeskSilent = True");
        //                loStringBuilder.AppendLine(@"			write2Log ""Silent: argument /Silent is found!""");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If landeskarg.Exists (""StopInventoryScan"") = vbTrue Then");
        //                loStringBuilder.AppendLine(@"			StopLANDeskInventory = True");
        //                loStringBuilder.AppendLine(@"			write2log ""LANDesk Inventory Scan: Argument /StopInventoryScan is found, LANDesk Inventory Scan is disabled!""");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		'If landeskarg.Exists (""Force"") = vbFalse Then");
        //                loStringBuilder.AppendLine(@"		'	write2Log ""ERROR: argument /S: is missing""");
        //                loStringBuilder.AppendLine(@"		'Else");
        //                loStringBuilder.AppendLine(@"		'	Landeskforce = True");
        //                loStringBuilder.AppendLine(@"		'End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error goto 0	");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: SilentInst");
        //                loStringBuilder.AppendLine(@"' Function:	disable messagebox and switch windows installer to silent");
        //                loStringBuilder.AppendLine(@"' Parameter:   	none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub SilentInst()");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes = False Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info: Silent uninstall is already selected by Master mode""");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		If winlogonstate = True Then ");
        //                loStringBuilder.AppendLine(@"			ShowMessageBoxes = False ");
        //                loStringBuilder.AppendLine(@"			InstallSwitch = "" /q""");
        //                loStringBuilder.AppendLine(@"			WaitToKillProcess =  True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: write2log");
        //                loStringBuilder.AppendLine(@"' Function:	Writing Line to given filename in global variable ""Logfilename""");
        //                loStringBuilder.AppendLine(@"' Parameter:    Text to write");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub write2log(LogText)");
        //                loStringBuilder.AppendLine(@"	Dim LogFile");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set LogFile = fso.OpenTextFile(LogFileName, ForAppending, True)");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	LogFile.AppendLine Date & "" "" & Time & ""|"" & vbTab & LogText");
        //                loStringBuilder.AppendLine(@"	Logfile.Close");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set LogFile = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: SetdefaultpathSrc");
        //                loStringBuilder.AppendLine(@"' Function:	set default path to sourcepath");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub SetdefaultpathSrc()");
        //                loStringBuilder.AppendLine(@"	On error resume next	");
        //                loStringBuilder.AppendLine(@"	wso.currentdirectory = ParseConst(SetDefaultPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"		Write2Log ""Warning: SetdefaultpathSrc not set to sourcepath : "" & Err.number & "" "" & Err.Description : Err.clear");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Write2Log ""set default path to : "" & ParseConst(SetDefaultPath)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	Write2log("""")");
        //                loStringBuilder.AppendLine(@"	On error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	ShowMessagePre");
        //                loStringBuilder.AppendLine(@"' Function:	Shows DS_SIE message box before uninstall and handles the open processes section");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub ShowMessagePre");
        //                loStringBuilder.AppendLine(@"	Dim tmp");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	' Show message box");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			If fso.FileExists(IniFileName) Then ");
        //                loStringBuilder.AppendLine(@"			  write2log(""Showing pre-uninstall message box..."")");
        //                loStringBuilder.AppendLine(@"			  tmp = wso.Run(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34) & "" --file="" & IniFileName,,True)");
        //                loStringBuilder.AppendLine(@"			  write2log(""Pre-uninstall message box closed."")");
        //                loStringBuilder.AppendLine(@"			  If tmp <> 0 Then ExitScript ""Timeout received from pre-uninstall message box. Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"			  ExitScript ""Cannot show pre-uninstall message box! "" & IniFileName & "" was not found!"" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"		  ExitScript ""Cannot show pre-uninstall message box! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"	  write2log(""Master PC installation detected. Skipping pre-uninstall message box..."")	");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	ShowMessagePost");
        //                loStringBuilder.AppendLine(@"' Function:	Shows DS_SIE message box after uninstall");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub ShowMessagePost");
        //                loStringBuilder.AppendLine(@"	Dim tmp");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	' Show message box");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			If fso.FileExists(IniFileName) Then ");
        //                loStringBuilder.AppendLine(@"				write2log(""Showing post-uninstall message box..."")");
        //                loStringBuilder.AppendLine(@"				tmp = wso.Run(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34) & "" --file="" & IniFileName & "" --mode=6"",,True)");
        //                loStringBuilder.AppendLine(@"				write2log(""Post-uninstall message box closed."")");
        //                loStringBuilder.AppendLine(@"				If tmp <> 0 Then ExitScript ""Timeout received from post-uninstall message box. Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Cannot show post-uninstall message box! "" & IniFileName & "" was not found!"" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ExitScript ""Cannot show post-uninstall message box! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Master PC installation detected. Skipping post-uninstall message box..."")	");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	OsSysnative");
        //                loStringBuilder.AppendLine(@"' Function:	Detects if 32-bit environment on 64-bit OS");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True if is a 32 Bit Process,False if is a 64 bit process.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function OS6432mode()");
        //                loStringBuilder.AppendLine(@"	If ( (PROC_ARCH1 = ""X86"") AND (PROC_ARCH2 = ""AMD64"") )  Then OS6432mode = TRUE _");
        //                loStringBuilder.AppendLine(@"	ELSE OS6432mode = FALSE");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	InitializeLogfile");
        //                loStringBuilder.AppendLine(@"' Function:	Read Environment Settings to global Variables:");
        //                loStringBuilder.AppendLine(@"'               SysRoot, Computername, SourcePath, ProgramFiles, MSILogDir, Logfilename, InstallerVersion and Username.");
        //                loStringBuilder.AppendLine(@"'               Initialize global Logfile and delete existing logfile If exists. Run prechecks.");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True If no errors occoured - False in case of errors.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function InitializeLogfile");
        //                loStringBuilder.AppendLine(@"	Dim Chk, tmp, objFile");
        //                loStringBuilder.AppendLine(@"	Dim colGroups, objGroup, objUser, SilentKey, cMode, DiskCheck, SpaceCap, DLoop, IntSpace, reqmsg, diskbool");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Reset variables");
        //                loStringBuilder.AppendLine(@"	Chk = True");
        //                loStringBuilder.AppendLine(@"	Systemdrive = """"");
        //                loStringBuilder.AppendLine(@"	Sysroot = """"");
        //                loStringBuilder.AppendLine(@"	Computername = """"");
        //                loStringBuilder.AppendLine(@"	SourcePath = """"");
        //                loStringBuilder.AppendLine(@"	ProgramFiles = """"");
        //                loStringBuilder.AppendLine(@"	ProgramFiles64 = """"");
        //                loStringBuilder.AppendLine(@"	FreeDiskSpace = 0");
        //                loStringBuilder.AppendLine(@"	Username = """"");
        //                loStringBuilder.AppendLine(@"	LogFileName = """"");
        //                loStringBuilder.AppendLine(@"	MSILogDir = """"");
        //                loStringBuilder.AppendLine(@"	tmp = """"");
        //                loStringBuilder.AppendLine(@"	InstallerVersion = """"");
        //                loStringBuilder.AppendLine(@"	CurrUserProfile = """"");
        //                loStringBuilder.AppendLine(@"	CurrUserAppdata = """"");
        //                loStringBuilder.AppendLine(@"	ALLUSERSPROFILE = """"");
        //                loStringBuilder.AppendLine(@"	SystemFolder = """"");
        //                loStringBuilder.AppendLine(@"	SystemFolder64 = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Start Initialize Logfile");
        //                loStringBuilder.AppendLine(@"	Logfilename = Replace(WScript.ScriptName,"".vbs"","".log"",1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (PackageName <> """") Then Logfilename = Replace(Logfilename,PackageID,PackageID & ""_MULTIPLATFORM_"" & PackageName,1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SysRoot = wso.ExpandEnvironmentStrings(""%SystemRoot%"")");
        //                loStringBuilder.AppendLine(@"	If SysRoot = ""%SystemRoot%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(SysRoot,1) <> ""\"" Then SysRoot = SysRoot & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.folderexists(Sysroot & ""DSClient\log"") Then");
        //                loStringBuilder.AppendLine(@"		Logfilename = SysRoot & ""DSClient\Log\"" & Logfilename");
        //                loStringBuilder.AppendLine(@"		MSILogDir = SysRoot & ""DSClient\Log\""");
        //                loStringBuilder.AppendLine(@"	Else	' use standard windows directory");
        //                loStringBuilder.AppendLine(@"		LogFileName = SysRoot & ""Temp\"" & Logfilename");
        //                loStringBuilder.AppendLine(@"		MSILogDir = SysRoot & ""Temp\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' delete local logfile if size > 50.000 Bytes ");
        //                loStringBuilder.AppendLine(@"	' --------------------------------------------");
        //                loStringBuilder.AppendLine(@"	If fso.fileexists(Logfilename) Then ");
        //                loStringBuilder.AppendLine(@"		Set objFile = fso.GetFile(Logfilename)");
        //                loStringBuilder.AppendLine(@"		If objFile.size > 50000 Then");
        //                loStringBuilder.AppendLine(@"			fso.DeleteFile(Logfilename)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		Set objFile = Nothing");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Check for fatal Error");
        //                loStringBuilder.AppendLine(@"	If Logfilename = """" Then 		' Error in Logfile Directory; cannot continue");
        //                loStringBuilder.AppendLine(@"		InitializeLogfile = False");
        //                loStringBuilder.AppendLine(@"		ExitScript ""Logfile could not be opened. Check your environment variables and try again!"", 1602		' Exit as user cancel");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2Log(""********************************** Global multiplatform uninstall script initializing *********************************"")");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	'End Initialize Logfile");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Detect client platform");
        //                loStringBuilder.AppendLine(@"	ClientPlatform = DetectClientPlatform()");
        //                loStringBuilder.AppendLine(@"	SilentKey = """"");
        //                loStringBuilder.AppendLine(@"	ShowMessageBoxes = True");
        //                loStringBuilder.AppendLine(@"	WaitToKillProcess = False");
        //                loStringBuilder.AppendLine(@"	StopLANDeskInventory = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SilentKey = ""HKEY_LOCAL_MACHINE\SOFTWARE\DSClient\PostSetup\Mode""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If SilentKey <> """" Then");
        //                loStringBuilder.AppendLine(@"		cMode = ReadRegStr(SilentKey, 32)");
        //                loStringBuilder.AppendLine(@"		If (cMode <> ""##ERR"") Then ");
        //                loStringBuilder.AppendLine(@"			ShowMessageBoxes = Not (LCase(cMode) = LCase(""Master"")) ");
        //                loStringBuilder.AppendLine(@"			WaitToKillProcess = (LCase(cMode) = LCase(""Master""))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If SilentMSIMSP Then InstallSwitch = "" /q"" Else InstallSwitch = "" /qb!""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ALLUSERSPROFILE = wso.ExpandEnvironmentStrings(""%ALLUSERSPROFILE%"")");
        //                loStringBuilder.AppendLine(@"	If ALLUSERSPROFILE = ""%ALLUSERSPROFILE%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(ALLUSERSPROFILE,1) <> ""\"" Then ALLUSERSPROFILE = ALLUSERSPROFILE & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Systemdrive = wso.ExpandEnvironmentStrings(""%SystemDrive%"")");
        //                loStringBuilder.AppendLine(@"	If Systemdrive = ""%SystemDrive%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(Systemdrive,1) <> ""\"" Then Systemdrive = Systemdrive & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SWRep = wso.ExpandEnvironmentStrings(""%DS_SWRep%"")");
        //                loStringBuilder.AppendLine(@"	If SWRep = ""%DS_SWRep%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(SWRep,1) <> ""\"" Then SWRep = SWRep & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Computername = WshNetwork.Computername");
        //                loStringBuilder.AppendLine(@"	If Computername = """" Then Chk = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Sourcepath = Replace(WScript.ScriptFullName, ""\"" & WScript.ScriptName, """")");
        //                loStringBuilder.AppendLine(@"	If Right(Sourcepath,1) <> ""\"" Then Sourcepath = Sourcepath & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SystemFolder64 = SysRoot & ""Sysnative\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If bitWise = ""64bit"" Then");
        //                loStringBuilder.AppendLine(@"		SystemFolder = SysRoot & ""SysWOW64\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		ProgramFiles = wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"		If ProgramFiles = ""%ProgramFiles(x86)%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If OS6432mode Then");
        //                loStringBuilder.AppendLine(@"			ProgramFiles64 = wso.ExpandEnvironmentStrings(""%ProgramW6432%"")");
        //                loStringBuilder.AppendLine(@"			If ProgramFiles64 = ""%ProgramW6432%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ProgramFiles64 = wso.ExpandEnvironmentStrings(""%ProgramFiles%"")");
        //                loStringBuilder.AppendLine(@"			If ProgramFiles64 = ""%ProgramFiles%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"		End if");
        //                loStringBuilder.AppendLine(@"	ElseIf bitWise = ""32bit"" Then");
        //                loStringBuilder.AppendLine(@"		SystemFolder = SysRoot & ""System32\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		ProgramFiles = wso.ExpandEnvironmentStrings(""%ProgramFiles%"")");
        //                loStringBuilder.AppendLine(@"		If ProgramFiles = ""%ProgramFiles%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"		ProgramFiles64 = """"");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Right(ProgramFiles,1) <> ""\"" Then ProgramFiles = ProgramFiles & ""\""");
        //                loStringBuilder.AppendLine(@"	If ProgramFiles64 <> """" Then");
        //                loStringBuilder.AppendLine(@"		If Right(ProgramFiles64,1) <> ""\"" Then ProgramFiles64 = ProgramFiles64 & ""\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Username = Wshnetwork.Username");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	IniFileName = Sourcepath & ""$DSClient\"" & Replace(WScript.ScriptName,"".vbs"","".ini"",1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CurrUserAppdata = ReadHKCUValue(""\Volatile Environment\APPDATA"")");
        //                loStringBuilder.AppendLine(@"	If Left(CurrUserAppdata,5) = ""##ERR"" Then ");
        //                loStringBuilder.AppendLine(@"		CurrUserAppdata = """"");
        //                loStringBuilder.AppendLine(@"	else");
        //                loStringBuilder.AppendLine(@"		If Right(CurrUserAppdata,1) <> ""\"" Then CurrUserAppdata = CurrUserAppdata & ""\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CurrUserLocalAppdata = ReadHKCUValue(""\Volatile Environment\LOCALAPPDATA"")	");
        //                loStringBuilder.AppendLine(@"	If Left(CurrUserLocalAppdata,5) = ""##ERR"" Then ");
        //                loStringBuilder.AppendLine(@"		CurrUserLocalAppdata = """"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		If Right(CurrUserLocalAppdata,1) <> ""\"" Then CurrUserLocalAppdata = CurrUserLocalAppdata & ""\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CurrUserProfile = ReadHKCUValue(""\Volatile Environment\USERPROFILE"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Right(CurrUserProfile,1) <> ""\"" and CurrUserProfile <> """" Then CurrUserProfile = CurrUserProfile & ""\""");
        //                loStringBuilder.AppendLine(@"	If Left(CurrUserProfile, 5) = ""##ERR"" or Right(CurrUserProfile, 5) = ""##ERR\"" Then CurrUserProfile = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Get Windows Installer Version");
        //                loStringBuilder.AppendLine(@"	If fso.fileexists(SysRoot & ""System32\msiexec.exe"") Then");
        //                loStringBuilder.AppendLine(@"		InstallerVersion = fso.GetFileVersion(SysRoot & ""System32\msiexec.exe"")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Query for required disk space");
        //                loStringBuilder.AppendLine(@"	DiskCheck = Split(DiskName, ""#"")");
        //                loStringBuilder.AppendLine(@"	SpaceCap = Split(RequiredDiskSpace, ""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	diskbool = False");
        //                loStringBuilder.AppendLine(@"	reqmsg = ""There is not enough free disk space to uninstall this package!"" & VbCrLf & _");
        //                loStringBuilder.AppendLine(@"		""Please make sure that you have the minimum required disk space before running this uninstallation again."" & vbCrLf & vbCrLf & _");
        //                loStringBuilder.AppendLine(@"		""Drive"" & vbTab & ""Required Disk Space"" & VbCrLf & _");
        //                loStringBuilder.AppendLine(@"		""------"" & vbTab & ""----------------------""	& VbCrLf");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For DLoop = 0 To UBound(DiskCheck)");
        //                loStringBuilder.AppendLine(@"		tmp = CheckDiskSpace (DiskCheck(DLoop))");
        //                loStringBuilder.AppendLine(@"		IntSpace = Round((SpaceCap(DLoop) / 1024),0)");
        //                loStringBuilder.AppendLine(@"		FreeDiskSpace = tmp");
        //                loStringBuilder.AppendLine(@"		write2log(""Drive "" & DiskCheck(DLoop) & "" has "" & tmp & "" GB free disk space available."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If tmp < IntSpace Then");
        //                loStringBuilder.AppendLine(@"			write2Log(""Not enough disk space on drive "" & DiskCheck(DLoop))");
        //                loStringBuilder.AppendLine(@"			write2Log(""At least "" & IntSpace & "" GB needed."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			reqmsg = reqmsg & DiskCheck(DLoop) & VbTab & IntSpace & ""GB"" & "" ("" & tmp & "" GB available"" & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			diskbool = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Write variables and information to logfile, do not touch!");
        //                loStringBuilder.AppendLine(@"	WriteEnvToLogfile()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If diskbool = True Then");
        //                loStringBuilder.AppendLine(@"		ExitScript reqmsg, 1602		' Exit as user cancel");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	InitializeLogfile = Chk	");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	WriteEnvToLogfile");
        //                loStringBuilder.AppendLine(@"' Function:	Writes Environment settings to logfile");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub WriteEnvToLogfile");
        //                loStringBuilder.AppendLine(@"	' Write Environment settings to Logfile");
        //                loStringBuilder.AppendLine(@"	On Error Resume next");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	write2log(""====================================================================================================="")");
        //                loStringBuilder.AppendLine(@"	write2log("" Start of script			:""& WScript.ScriptFullName)");
        //                loStringBuilder.AppendLine(@"	write2log("" Starter Script Version			:""& Version)");
        //                loStringBuilder.AppendLine(@"	write2log("" Starter Script build Version		:""& SCRIPTBUILD)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Application 		:""& WScript.Application)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Name        		:""& WScript.Name)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Version     		:""& WScript.Version)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Fullname    		:""& WScript.Fullname)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Path        		:""& WScript.Path)");
        //                loStringBuilder.AppendLine(@"	write2log("" Network Computername      		:""& Computername)");
        //                loStringBuilder.AppendLine(@"	write2log("" Network User Domain       		:""& WshNetwork.UserDomain)");
        //                loStringBuilder.AppendLine(@"	write2log("" Network User Name         		:""& Username)");
        //                loStringBuilder.AppendLine(@"	write2log("" ProgramFiles 32-bit directory		:""& ProgramFiles)");
        //                loStringBuilder.AppendLine(@"	write2log("" ProgramFiles 64-bit directory		:""& ProgramFiles64)");
        //                loStringBuilder.AppendLine(@"	write2log("" System32 32-bit directory		:""& SystemFolder)");
        //                loStringBuilder.AppendLine(@"	write2log("" System32 64-bit directory		:""& SystemFolder64)");
        //                loStringBuilder.AppendLine(@"	write2log("" Free space on Systemdrive		:""& FreeDiskSpace & "" GB"")");
        //                loStringBuilder.AppendLine(@"	write2log("" Software Repository			:""& SWRep)");
        //                loStringBuilder.AppendLine(@"	write2log("" Sourcepath				:""& SourcePath)");
        //                loStringBuilder.AppendLine(@"	write2log("" Current Directory			:""& wso.CurrentDirectory)");
        //                loStringBuilder.AppendLine(@"	write2log("" Logfile				:""& LogFileName)");
        //                loStringBuilder.AppendLine(@"	write2Log("" MSIEXEC Version			:""& InstallerVersion)");
        //                loStringBuilder.AppendLine(@"	write2log("" Client platform			:""& ClientPlatform & "" ("" & OSVer & "")"")");
        //                loStringBuilder.AppendLine(@"	write2log("" Current login User Profile		:""& CurrUserProfile)");
        //                loStringBuilder.AppendLine(@"	write2log("" Current login User AppData		:""& CurrUserAppdata)");
        //                loStringBuilder.AppendLine(@"	write2log("" Current login User LocalAppData		:""& CurrUserLocalAppdata)");
        //                loStringBuilder.AppendLine(@"	write2log(""====================================================================================================="")");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2log ""Warning on WriteEnvToLogfile = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Key_Exists_Str");
        //                loStringBuilder.AppendLine(@"' Function:	Checks Existence of a REG_SZ registry key via the WMI registry provider");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to check");
        //                loStringBuilder.AppendLine(@"' Return:       True if Key exists, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Key_Exists_Str(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Key_Exists_Str = (ReadRegStr(sRegValue, 64) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit, also check under the 32bit context if key is present");
        //                loStringBuilder.AppendLine(@"	If (Key_Exists_Str = False) And (bitWise = ""64bit"") Then Key_Exists_Str = (ReadRegStr(sRegValue, 32) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Function Key_Exists_DWORD(sRegValue)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Key_Exists_DWORD = (ReadRegDWORD(sRegValue, 64) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"	'if platform is 64bit, also check under the 32bit context if key is present");
        //                loStringBuilder.AppendLine(@"	If ( Key_Exists_DWORD = False) And (bitWise = ""64bit"") Then  Key_Exists_DWORD = (ReadRegDWORD(sRegValue, 32) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: FindRegStr");
        //                loStringBuilder.AppendLine(@"' Function:	Find a REG_SZ value from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    KeyPath to read, RegValue to read, full string Application for compare, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       Return True or False , ERR if error on query or syntax");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function FindRegStr (sKeyPath,sRegValue,sApplication, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams, EnumKey,arrSubKeys,subKey, retvalue, catkey");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	FindRegStr = ""ERR""");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sKeyPath, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			FindRegStr = ""ERR""");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	oReg.EnumKey hKeyRoot, tmpKey, arrSubKeys ");
        //                loStringBuilder.AppendLine(@"	For Each subKey In arrSubKeys ");
        //                loStringBuilder.AppendLine(@"		catkey = tmpKey & subKey");
        //                loStringBuilder.AppendLine(@"		Set oInParams = oReg.Methods_(""GetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"		oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"		oInParams.sSubKeyName = catkey");
        //                loStringBuilder.AppendLine(@"		oInParams.sValueName = sRegValue");
        //                loStringBuilder.AppendLine(@"		Set oOutParams = oReg.ExecMethod_(""GetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then FindRegStr = ""ERR""");
        //                loStringBuilder.AppendLine(@"		If isNull(oOutParams.sValue) Then ");
        //                loStringBuilder.AppendLine(@"			FindRegstring = False");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			retvalue = oOutParams.sValue");
        //                loStringBuilder.AppendLine(@"			If sApplication = oOutParams.sValue Then");
        //                loStringBuilder.AppendLine(@"				FindRegStr = True");
        //                loStringBuilder.AppendLine(@"				'oOutParams.sValue");
        //                loStringBuilder.AppendLine(@"				Exit Function");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Read_Str");
        //                loStringBuilder.AppendLine(@"' Function:	reads value of a REG_SZ reg value");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read");
        //                loStringBuilder.AppendLine(@"' Return:       value of the REG_SZ reg value, ##ERR if key is not present");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Read_Str(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Reg_Read_Str = (ReadRegStr(sRegValue, 64))");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (Reg_Read_Str = ""##ERR"") And (bitWise = ""64bit"") Then Reg_Read_Str = ReadRegStr(sRegValue, 32)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Read_Dword");
        //                loStringBuilder.AppendLine(@"' Function:	reads value of a REG_Dword reg value");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read");
        //                loStringBuilder.AppendLine(@"' Return:       value of the REG_Dword reg value, ##ERR if key is not present");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Read_Dword(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Reg_Read_Dword = (ReadRegDWORD(sRegValue, 64))");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (Reg_Read_Dword = ""##ERR"") And (bitWise = ""64bit"") Then Reg_Read_Dword = ReadRegDWORD(sRegValue, 32)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Hive_Exists");
        //                loStringBuilder.AppendLine(@"' Function:	Check if the RegHive Exists");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegHive to check");
        //                loStringBuilder.AppendLine(@"' Return:       Return True if the target RegHive exists");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Hive_Exists(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Reg_Hive_Exists = (RegHiveExists(sRegValue, 64))");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (Reg_Hive_Exists = False) And (bitWise = ""64bit"") Then Reg_Hive_Exists = RegHiveExists(sRegValue, 32)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ReadRegStr");
        //                loStringBuilder.AppendLine(@"' Function:	Reads a REG_SZ value from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       The value of the value if it exists, ##ERR if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadRegStr (sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegValue, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			ReadRegStr = ""##ERR""");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""GetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"	oInParams.sValueName = tmpValue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""GetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	If IsNull(oOutParams.sValue) Then ReadRegStr = ""##ERR"" Else ReadRegStr = oOutParams.sValue	");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ReadRegDWORD");
        //                loStringBuilder.AppendLine(@"' Function:	Reads a REG_DWORD value from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       The value of the value if it exists, ##ERR if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadRegDWORD (sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegValue, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			ReadRegDWORD = ""##ERR""");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""GetDWORDValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"	oInParams.sValueName = tmpValue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""GetDWORDValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	If IsNull(oOutParams.uValue) Then ReadRegDWORD = ""##ERR"" Else ReadRegDWORD = oOutParams.uValue");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: RegHiveExists");
        //                loStringBuilder.AppendLine(@"' Function:	Check if Reghive exists from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegHive to read, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       True if the hive exists");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function RegHiveExists(sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	RegHiveExists = False");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegValue, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection)");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""GetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""GetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	If ((oOutParams.ReturnValue = 1) or (oOutParams.ReturnValue = 0)) Then RegHiveExists = True");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteDSPID");
        //                loStringBuilder.AppendLine(@"' Function:	Delete the parse in DSPID keys");
        //                loStringBuilder.AppendLine(@"' Parameter:    Target DSPIDs");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteDSPID(strDSPID)");
        //                loStringBuilder.AppendLine(@"	Dim i_loop, sDSPID");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	sDSPID = Split(strDSPID,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i_loop = 0 to UBound(sDSPID)");
        //                loStringBuilder.AppendLine(@"		If Len(Trim(sDSPID(i_loop))) <> 0 Then");
        //                loStringBuilder.AppendLine(@"			If Reg_Hive_Delete(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & Trim(sDSPID(i_loop))) Then");
        //                loStringBuilder.AppendLine(@"				write2log ("" Deleted PID hive: "" & ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & Trim(sDSPID(i_loop)))");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	DeleteAS");
        //                loStringBuilder.AppendLine(@"' Function:	Deletes Active Setup Keys from Registry");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteAS");
        //                loStringBuilder.AppendLine(@"	Dim ActiveSetupKey, i_loop, key_string");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ActiveSetupKey = Split(ASDeleteKey,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i_loop = 0 to UBound(ActiveSetupKey)");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		If Len(Trim(ActiveSetupKey(i_loop))) <> 0 Then");
        //                loStringBuilder.AppendLine(@"			key_string = ""HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\"" & ActiveSetupKey(i_loop)");
        //                loStringBuilder.AppendLine(@"			'write2log(key_string)		");
        //                loStringBuilder.AppendLine(@"			If fKillRegKey(key_string,AscContext) = 0 Then write2log("" Deleted ActiveSetup key: "" & key_string)");
        //                loStringBuilder.AppendLine(@"			If AscContext=""32"" And bitWise=""64bit"" Then");
        //                loStringBuilder.AppendLine(@"				If fKillRegKey(key_string,64) = 0 Then write2log("" Deleted ActiveSetup key on 64bit context: "" & key_string)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteFile");
        //                loStringBuilder.AppendLine(@"' Function:	Delete file, if file is found and permissions are sufficient");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path and name of file to be deleted (e.g. C:\temp\logfile.txt)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteFile(FilePath)");
        //                loStringBuilder.AppendLine(@"	Dim tmp, strPath");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FilePath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not fso.FileExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		write2log (""File "" & strPath & "" was not found. Delete failed!"")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		fso.DeleteFile strPath, True");
        //                loStringBuilder.AppendLine(@"		If Err.Number = 0 Then ");
        //                loStringBuilder.AppendLine(@"			write2log(""Deleted file : "" & strPath)");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Could not delete file : "" & strPath & "". Make sure you have the necessary permissions."")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteFolder");
        //                loStringBuilder.AppendLine(@"' Function:	Delete folder, if folder is found and permissions are sufficient");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteFolder(FolderPath)");
        //                loStringBuilder.AppendLine(@"	Dim tmp, strPath");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FolderPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		write2log (""Folder "" & strPath & "" was not found. Delete failed!"")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		fso.DeleteFolder strPath, True");
        //                loStringBuilder.AppendLine(@"		If Err.Number = 0 Then ");
        //                loStringBuilder.AppendLine(@"			write2log(""Deleted folder : "" & strPath)");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Could not delete folder : "" & strPath & "". Make sure you have the necessary permissions."")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteEmptyFolder");
        //                loStringBuilder.AppendLine(@"' Function:	Check delete a folder if it is empty");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteEmptyFolder(FolderPath)");
        //                loStringBuilder.AppendLine(@"	Dim strPath, objFolder, delRes");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FolderPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		Set objFolder = fso.GetFolder(strPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If objFolder.Files.Count = 0 And objFolder.SubFolders.Count = 0 Then");
        //                loStringBuilder.AppendLine(@"			delRes = objFolder.Delete");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If Not delRes = 0 Then");
        //                loStringBuilder.AppendLine(@"		        	write2log(""Delete Empty folder failed: "" & strPath)");
        //                loStringBuilder.AppendLine(@"		        Else");
        //                loStringBuilder.AppendLine(@"		        	write2log(""Delete Empty folder successfully: "" & strPath)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Delete Empty folder aborted: "" & strPath & "" is not empty."")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Set objFolder = Nothing");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Target empty folder not found: "" & strPath)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	RecursiveDeleteFolder");
        //                loStringBuilder.AppendLine(@"' Function:	Delete folder including subfolder and files");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub RecursiveDeleteFolder(FolderPath)");
        //                loStringBuilder.AppendLine(@"	Dim strPath, i, objWMIService, objFolder, strDeleteFolder, strFolder, colFolders, errResults");
        //                loStringBuilder.AppendLine(@"	intSize = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FolderPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		strDeleteFolder = strPath");
        //                loStringBuilder.AppendLine(@"		ReDim Preserve arrFolders(intSize)");
        //                loStringBuilder.AppendLine(@"		arrFolders(intSize) = strDeleteFolder");
        //                loStringBuilder.AppendLine(@"		intSize = intSize + 1");
        //                loStringBuilder.AppendLine(@"		GetSubFolders strDeleteFolder");
        //                loStringBuilder.AppendLine(@"		write2log(""Deleting: "" & strDeleteFolder)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i = Ubound(arrFolders) to 0 Step -1");
        //                loStringBuilder.AppendLine(@"		    strFolder = arrFolders(i)");
        //                loStringBuilder.AppendLine(@"		    strFolder = Replace(strFolder, ""\"", ""\\"")");
        //                loStringBuilder.AppendLine(@"		    On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		    Set colFolders = objWMIService.ExecQuery _");
        //                loStringBuilder.AppendLine(@"		        (""Select * from Win32_Directory where Name = '"" & strFolder & ""'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		    For Each objFolder in colFolders");
        //                loStringBuilder.AppendLine(@"		        errResults = objFolder.Delete");
        //                loStringBuilder.AppendLine(@"		        If Not errResults = 0 Then");
        //                loStringBuilder.AppendLine(@"		        	write2log(""Delete failed: "" & objFolder.Name)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		    Next");
        //                loStringBuilder.AppendLine(@"		    On Error Goto 0");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		write2log(""Successfully deleted: "" & strPath)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Failed to delete: "" & strPath)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	GetSubFolders");
        //                loStringBuilder.AppendLine(@"' Function:	Retrieve the subfolders and add to the array arrFolders");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub GetSubFolders(strFolderName)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colSubfolders2, objFolder2");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strFolderName = ParseConst(strFolderName)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colSubfolders2 = objWMIService.ExecQuery _");
        //                loStringBuilder.AppendLine(@"		(""Associators of {Win32_Directory.Name='"" & strFolderName & ""'} "" _");
        //                loStringBuilder.AppendLine(@"		    & ""Where AssocClass = Win32_Subdirectory "" _");
        //                loStringBuilder.AppendLine(@"		        & ""ResultRole = PartComponent"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objFolder2 in colSubfolders2");
        //                loStringBuilder.AppendLine(@"		If Not IsEmpty(objFolder2) Then");
        //                loStringBuilder.AppendLine(@"			strFolderName = objFolder2.Name");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			ReDim Preserve arrFolders(intSize)");
        //                loStringBuilder.AppendLine(@"			arrFolders(intSize) = strFolderName");
        //                loStringBuilder.AppendLine(@"			intSize = intSize + 1");
        //                loStringBuilder.AppendLine(@"			GetSubFolders strFolderName");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	On Error Goto 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objFolder2 = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colSubfolders2 = Nothing");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: State");
        //                loStringBuilder.AppendLine(@"' Function:	Subfunction to return readable statuscode");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function State(statecode)");
        //                loStringBuilder.AppendLine(@"	Select Case statecode");
        //                loStringBuilder.AppendLine(@"		Case -6: State = ""Bad configuration""");
        //                loStringBuilder.AppendLine(@"		Case -2: State = ""Invalid argument""");
        //                loStringBuilder.AppendLine(@"		Case -1: State = ""Unknown package""		'	neither advertised nor installed :-)");
        //                loStringBuilder.AppendLine(@"		Case 1: State = ""Advertised""			'	advertised but not installed");
        //                loStringBuilder.AppendLine(@"		Case 2: State = ""Absent""			'	installed for a different user");
        //                loStringBuilder.AppendLine(@"		Case 5: State = ""Installed""			'	installed for the current user");
        //                loStringBuilder.AppendLine(@"		Case Else: State = CStr(statecode)");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	KillProcess");
        //                loStringBuilder.AppendLine(@"' Function:	Kills given Process");
        //                loStringBuilder.AppendLine(@"' Parameter:    Process to kill");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub KillProcess(Process)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colProcessList, objProcess");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	objWMIService.Security_.Privileges.AddAsString ""SeDebugPrivilege"", True");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = objWMIService.ExecQuery (""Select * from Win32_Process Where Name = '""& Process & ""'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2log(""Check for open process "" & Process & ""..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objProcess in colProcessList");
        //                loStringBuilder.AppendLine(@"		objProcess.Terminate()");
        //                loStringBuilder.AppendLine(@"		write2log(""Process "" & Process & "" killed..."")");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: KillPID");
        //                loStringBuilder.AppendLine(@"' Function:	Kills Process with a given PID");
        //                loStringBuilder.AppendLine(@"' Parameter:    PID of Process to kill");
        //                loStringBuilder.AppendLine(@"' Return:       True on success, False on error");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function KillPID(PID)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colProcessList, objProcess");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	KillPID = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	objWMIService.Security_.Privileges.AddAsString ""SeDebugPrivilege"", True");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = objWMIService.ExecQuery (""Select * from Win32_Process Where ProcessID = '""& PID & ""'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objProcess in colProcessList");
        //                loStringBuilder.AppendLine(@"		objProcess.Terminate()");
        //                loStringBuilder.AppendLine(@"		KillPID = True");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckProcess");
        //                loStringBuilder.AppendLine(@"' Function:	Checks if given Process is running");
        //                loStringBuilder.AppendLine(@"' Parameter:    Process to check for");
        //                loStringBuilder.AppendLine(@"' Return:       True if Process was found, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckProcess(strProcess)");
        //                loStringBuilder.AppendLine(@"	Dim Found, objWMIService, colItems, objItem");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Found = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colItems = objWMIService.ExecQuery(""Select * from Win32_Process"",,48)");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckProcess WMI GetObject = "" & Err.number & "" "" & Err.Description : Err.clear");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"		If UCase(objItem.Name) = UCase(strProcess) Then");
        //                loStringBuilder.AppendLine(@"			Found = True");
        //                loStringBuilder.AppendLine(@"			Exit For");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckProcess WMI ExecQuery = "" & Err.number & "" "" & Err.Description ");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	If Found Then Write2Log ""- Process "" & strProcess & "" found.""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CheckProcess = Found");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ProductInstalled");
        //                loStringBuilder.AppendLine(@"' Function:	Checks if given MSI Product is installed");
        //                loStringBuilder.AppendLine(@"' Parameter:    Productcode");
        //                loStringBuilder.AppendLine(@"' Return:       True if Product is installed, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ProductInstalled(ProductCode)");
        //                loStringBuilder.AppendLine(@"	Dim Found, objWMIService, colItems, objItem");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Found = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set colItems = objWMIService.ExecQuery(""Select * from Win32_Product"")");
        //                loStringBuilder.AppendLine(@"	For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"		If objItem.IdentifyingNumber = ProductCode Then");
        //                loStringBuilder.AppendLine(@"			Write2Log (""Found product GUID: "" & ProductCode)");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" FullName: "" & objItem.name)");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" InstallDate: "" & Left(objItem.InstallDate2,8))");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" InstallLocation: "" & objItem.InstallLocation)");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" InstallState: "" & State(objItem.InstallState))");
        //                loStringBuilder.AppendLine(@"			Write2Log ("""")");
        //                loStringBuilder.AppendLine(@"			Found = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: ProductInstalled WMI ExecQuery = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	ProductInstalled = Found");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: MSIMutex");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for running MSI Installation");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True if found, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function MSIMutex()");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colListOfServices, objService, Chk");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:"" _");
        //                loStringBuilder.AppendLine(@"		& ""{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colListOfServices = objWMIService.ExecQuery _");
        //                loStringBuilder.AppendLine(@"			(""Select * from Win32_Service Where Name = 'MSIServer'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Chk = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Write2Log(""MSI Mutex entered..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objService in colListOfServices");
        //                loStringBuilder.AppendLine(@"		If UCase(objService.State) = ""RUNNING"" and objService.AcceptStop = False Then");
        //                loStringBuilder.AppendLine(@"			Write2Log(""-> MSIServer acceptstop = False"")");
        //                loStringBuilder.AppendLine(@"			' MSI Process running");
        //                loStringBuilder.AppendLine(@"			Chk = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	MSIMutex = Chk");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colListOfServices = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: MSIErrorHandler");
        //                loStringBuilder.AppendLine(@"' Function:	handles MSI error codes");
        //                loStringBuilder.AppendLine(@"' Parameter:    Return value from MSI Commandline");
        //                loStringBuilder.AppendLine(@"' Return:       ");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function MSIErrorHandler(ErrorCode)");
        //                loStringBuilder.AppendLine(@"	' Handle all possible MSI Errors...");
        //                loStringBuilder.AppendLine(@"	If ErrorCode = 0 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation finished successfully!"")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 3010 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation finished successfully, but reboot required now!"")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 13 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The data is invalid."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 87 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": One of the parameters is invalid."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1601 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows Installer Service could not be accessed."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1602 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation was cancelled by user."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1603 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Fatal error during installation."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1604 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation was suspended."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1605 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Process is only valid for pruducts which are installed."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1606 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unknown Feature found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1607 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unknown Component found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1608 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unknown Property found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1609 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Invalid handle state."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1610 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The config files for this product are invalid."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1611 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The index for the component is absent."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1612 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation source for this product is absent."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = -10 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation source for this product is absent."")	' Custom Return Code from installation");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1613 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows Installer Version is not sufficient to install this product."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1614 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Uninstallation of this product is pending."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1615 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Bad SQL query syntax."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1616 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Invalid field found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1618 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Another installation is in progress. Please use the mutex tool to avoid this error."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1619 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation package could not be accessed. Unable to open MSI database."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1620 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation package could not be accessed. Unable to open MSI database."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1621 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error starting MSI GUI."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1622 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error opening MSI logging."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1623 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The language form this package is not supported on your system."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1624 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The TRANSFORM file cound not be found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1625 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation of this package is blocked by policy."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1626 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Function could not be executed."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1627 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error calling function."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1628 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Reference to an unknown table found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1629 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Datatype mismatch."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1630 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unsupported datatype found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1631 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows installer service could not be started. Please check state of MSIServer."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1632 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": TEMP folder could not be accessed or is full."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1633 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": This platform is not supported by this installation package."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1634 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The component is not used on this computer."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1635 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The patch package could not be found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1636 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The patch package could not be opened."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1637 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows Installer version not sufficient to install this patch package."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1638 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Another version of this product is present. Please uninstall this version first and try again."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1639 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error in Commandline."")");
        //                loStringBuilder.AppendLine(@"	'ElseIf ErrorCode = 1640 Then");
        //                loStringBuilder.AppendLine(@"	'	write2log("" "" & ErrorCode & "": Unsupported platform."")");
        //                loStringBuilder.AppendLine(@"	'ElseIf ErrorCode = 1641 Then");
        //                loStringBuilder.AppendLine(@"	'	write2log("" "" & ErrorCode & "": script launched manually."")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": unknown error during installation."")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Return original code and 0 in case of success");
        //                loStringBuilder.AppendLine(@"	If (ErrorCode = 0) or (ErrorCode = 3010) Then");
        //                loStringBuilder.AppendLine(@"		MSIErrorHandler = 0");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		MSIErrorHandler = ErrorCode");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckFileVersion");
        //                loStringBuilder.AppendLine(@"' Function:	Compare fileversion with given version.");
        //                loStringBuilder.AppendLine(@"' Parameter:    path and file, version to check");
        //                loStringBuilder.AppendLine(@"' Return:       True if version equals or greater, False if version lower or file not existing");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckFileVersion(FileToCheck,VersionToCompare)");
        //                loStringBuilder.AppendLine(@"	Dim Fversion 				' used to store the fileversion as String");
        //                loStringBuilder.AppendLine(@"	Dim arrFversion, arrVersionToCompare	' array for fileversion and givenversion, splitted by . as decimal");
        //                loStringBuilder.AppendLine(@"	Dim upperbound, i, i_loop		' Bounds and Loops as decimal");
        //                loStringBuilder.AppendLine(@"	Dim FileVersionHigher, FileVersionEqual	' Boolean");
        //                loStringBuilder.AppendLine(@"	Dim strPath");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FileToCheck)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.fileexists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		Fversion = fso.GetFileVersion(strPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Split both up in an Array");
        //                loStringBuilder.AppendLine(@"		arrFversion = Split(Fversion,""."")");
        //                loStringBuilder.AppendLine(@"		arrVersionToCompare = Split(VersionToCompare,""."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Find the array with the lowest amount of dots in it and assign the upper bound to upperbound variable");
        //                loStringBuilder.AppendLine(@"		If UBound(arrFversion) > UBound(arrVersionToCompare) Then");
        //                loStringBuilder.AppendLine(@"			upperbound = UBound(arrVersionToCompare)");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			upperbound = UBound(arrFversion)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Define start values for compare");
        //                loStringBuilder.AppendLine(@"		i = 0");
        //                loStringBuilder.AppendLine(@"		FileVersionEqual = True");
        //                loStringBuilder.AppendLine(@"		FileVersionHigher = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Do While (i <= upperbound) and FileVersionEqual and (FileVersionHigher = False)");
        //                loStringBuilder.AppendLine(@"			If arrFversion(i) > arrVersionToCompare(i) Then");
        //                loStringBuilder.AppendLine(@"				FileVersionHigher = True");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			If arrFversion(i) < arrVersionToCompare(i) Then FileVersionEqual = False");
        //                loStringBuilder.AppendLine(@"			i = i + 1");
        //                loStringBuilder.AppendLine(@"		Loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' At this point both versions are equal in their common digits.");
        //                loStringBuilder.AppendLine(@"		' So we have to check if the givenversion has more dots in it and the rest of the decimals are <> 0");
        //                loStringBuilder.AppendLine(@"		If FileVersionEqual and (UBound(arrVersionToCompare) >= i) Then");
        //                loStringBuilder.AppendLine(@"			For i_loop = i To UBound(arrVersionToCompare)");
        //                loStringBuilder.AppendLine(@"				If arrVersionToCompare(i_loop) > 0 Then FileVersionEqual = False");
        //                loStringBuilder.AppendLine(@"			Next");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Define an equal value as a True for the return");
        //                loStringBuilder.AppendLine(@"		If FileVersionEqual Then ");
        //                loStringBuilder.AppendLine(@"			FileVersionHigher = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else	' File not existing");
        //                loStringBuilder.AppendLine(@"		write2log ""File for versioncheck not found!""");
        //                loStringBuilder.AppendLine(@"		CheckFileVersion = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CheckFileVersion = FileVersionHigher");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: fKillRegKey");
        //                loStringBuilder.AppendLine(@"' Function:	Deletes given Registry Key and all its Subkeys");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to delete starting with name of hive, eg. HKLM\Software\...");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function fKillRegKey(sKeyToDelete, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim sSubKey, sKeyToKill, oInParams, oOutParams, iElement");
        //                loStringBuilder.AppendLine(@"	Dim aKeyPathSubSection, sKeyRoot, hkeyRoot, strKeyRoot, oLocator, oReg, oCtx");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sKeyToDelete, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_CLASSES_ROOT""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_CURRENT_USER""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_LOCAL_MACHINE""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_USERS""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			fKillRegKey = 1");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	skeyToKill = """"");
        //                loStringBuilder.AppendLine(@"	For iElement = 1 To UBound(aKeyPathSubSection)");
        //                loStringBuilder.AppendLine(@"		sKeyToKill = sKeyToKill & ""\"" & aKeyPathSubSection(iElement)   ");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Left(sKeyToKill,1) = ""\"" Then sKeyToKill = Right(sKeyToKill, Len(sKeyToKill)-1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""EnumKey"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = sKeyToKill");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""EnumKey"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not IsNull(oOutParams.sNames) Then");
        //                loStringBuilder.AppendLine(@"		For Each sSubKey In oOutParams.sNames");
        //                loStringBuilder.AppendLine(@"			'Recursively call this Function, to delete each subkey - and their subkeys, and so on...");
        //                loStringBuilder.AppendLine(@"			fKillRegKey strKeyRoot & ""\"" & sKeyToKill & ""\"" & sSubKey, RegType");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'if the key has no subkeys, delete it.");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""DeleteKey"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = sKeyToKill");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""DeleteKey"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	fKillRegKey = oOutParams.ReturnValue");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Hive_Delete");
        //                loStringBuilder.AppendLine(@"' Function:	deletes a registry hive");
        //                loStringBuilder.AppendLine(@"' Parameter:    reg hive to delete");
        //                loStringBuilder.AppendLine(@"' Return:       value of the REG_SZ reg value, ##ERR if key is not present");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Hive_Delete(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Dim oRet ");
        //                loStringBuilder.AppendLine(@"	oRet = fKillRegKey(sRegValue,64)");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (oRet <> 0) And (bitWise = ""64bit"") Then oRet = fKillRegKey(sRegValue,32)");
        //                loStringBuilder.AppendLine(@"	Reg_Hive_Delete = (oRet = 0)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	GetCurrUserSID");
        //                loStringBuilder.AppendLine(@"' Function:	Get SID of currently logged-in user");
        //                loStringBuilder.AppendLine(@"' Return:	SID of current user if successful, """" if not");
        //                loStringBuilder.AppendLine(@"' Author:	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	Dim oReg, arrSubKeys, subkey, arrSubKeys2, subkey2");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetCurrUserSID = """"");
        //                loStringBuilder.AppendLine(@"	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")");
        //                loStringBuilder.AppendLine(@"	oReg.EnumKey HKEY_USERS,"""",arrSubKeys");
        //                loStringBuilder.AppendLine(@"	For Each subkey In arrSubKeys");
        //                loStringBuilder.AppendLine(@"		If Not subkey = "".DEFAULT"" Then");
        //                loStringBuilder.AppendLine(@"			oReg.EnumKey HKEY_USERS, subkey, arrSubKeys2");
        //                loStringBuilder.AppendLine(@"			If isArray(arrSubKeys2) Then");
        //                loStringBuilder.AppendLine(@"				For Each subkey2 In arrSubKeys2");
        //                loStringBuilder.AppendLine(@"					If subkey2 = ""Volatile Environment"" Then");
        //                loStringBuilder.AppendLine(@"						GetCurrUserSID = subkey");
        //                loStringBuilder.AppendLine(@"						Exit For");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Next");
        //                loStringBuilder.AppendLine(@"				If GetCurrUserSID <> """" Then Exit For    ");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"	Set oReg = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	GetCurrUserName");
        //                loStringBuilder.AppendLine(@"' Function:	Get username of currently logged-in user");
        //                loStringBuilder.AppendLine(@"' Return:	Username  of current user if successful, """" if not");
        //                loStringBuilder.AppendLine(@"' Author:	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetCurrUserName()");
        //                loStringBuilder.AppendLine(@"	Dim objWMISvc, colItems, objItem");
        //                loStringBuilder.AppendLine(@"	Dim strComputer, sUser");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetCurrUserName = """"");
        //                loStringBuilder.AppendLine(@"	strComputer = "".""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	set objWMISvc = GetObject(""winmgmts:\\"" & strComputer & ""\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	set colItems = objWMISvc.ExecQuery(""Select * From Win32_Process Where Name='explorer.exe'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"		objItem.GetOwner sUser");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetCurrUserName = sUser");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	set objWMISvc = Nothing");
        //                loStringBuilder.AppendLine(@"	set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	ReadHKCUValue");
        //                loStringBuilder.AppendLine(@"' Function:	Read value from the HKCU hive of the logged-in user");
        //                loStringBuilder.AppendLine(@"' Parameter:	Path to the HKCU registry value that should be read");
        //                loStringBuilder.AppendLine(@"' Return:       Value of the registry key if successful, ""##ERR"" if not");
        //                loStringBuilder.AppendLine(@"' Author: 	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadHKCUValue(RegPath)");
        //                loStringBuilder.AppendLine(@"	Dim userSID");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	userSID = GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	If userSID <> """" Then");
        //                loStringBuilder.AppendLine(@"		ReadHKCUValue = Reg_Read_Str(""HKEY_USERS\"" & userSID & RegPath)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		ReadHKCUValue = ""ERROR - couldn't get SID of logged on user.""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	DeleteHKCUValue");
        //                loStringBuilder.AppendLine(@"' Function:	Delete value from the HKCU hive of the logged-in user");
        //                loStringBuilder.AppendLine(@"' Parameter:	Path to the HKCU registry value that should be deleted");
        //                loStringBuilder.AppendLine(@"' Return:       True if succesful, False if not ");
        //                loStringBuilder.AppendLine(@"' Author: 	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DeleteHKCUValue(RegPath)");
        //                loStringBuilder.AppendLine(@"	Dim userSID, sregvalue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	userSID = GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	If userSID <> """" Then");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		sregvalue = wso.RegDelete(""HKEY_USERS\"" & userSID & RegPath)");
        //                loStringBuilder.AppendLine(@"		DeleteHKCUValue = (Err.Number = 0)");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""ERROR - couldn't get SID of logged on user."")");
        //                loStringBuilder.AppendLine(@"		DeleteHKCUValue = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: WriteHKCUValue");
        //                loStringBuilder.AppendLine(@"' Function: 	Write value to the HKCU hive of the logged-in user");
        //                loStringBuilder.AppendLine(@"' Parameter:    KeyPath   = Path to the HKCU key the value will be created in ");
        //                loStringBuilder.AppendLine(@"'        	ValueName = Name of the value that will be created");
        //                loStringBuilder.AppendLine(@"'        	Value     = Type of the value (REG_SZ, REG_EXPAND_SZ, REG_DWORD, REG_BINARY)");
        //                loStringBuilder.AppendLine(@"' Return:       True if successful, False if not");
        //                loStringBuilder.AppendLine(@"' Author: 	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function WriteHKCUValue(KeyPath, ValueName, ValueType)");
        //                loStringBuilder.AppendLine(@"	Dim userSID");
        //                loStringBuilder.AppendLine(@"	userSID = GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	If userSID <> """" Then");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		wso.RegWrite ""HKEY_USERS\"" & userSID & KeyPath, ValueName, ValueType");
        //                loStringBuilder.AppendLine(@"		If Err.Number = 0 Then");
        //                loStringBuilder.AppendLine(@"			WriteHKCUValue = True");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			WriteHKCUValue = False");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		WriteHKCUValue = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	CheckDiskSpace");
        //                loStringBuilder.AppendLine(@"' Function:	Check for free disk space for give drive");
        //                loStringBuilder.AppendLine(@"' Parameter:	Drive to check free disk space for (driveletter)");
        //                loStringBuilder.AppendLine(@"' Return:       Value of free disk space in GB");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckDiskSpace(HardDisk)");
        //                loStringBuilder.AppendLine(@"	Dim objWMISvc, colDisks, objDisk, Tmp");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	tmp = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMISvc = GetObject(""winmgmts:"" _");
        //                loStringBuilder.AppendLine(@"		& ""{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colDisks = objWMISvc.ExecQuery _");
        //                loStringBuilder.AppendLine(@"		(""Select * from Win32_LogicalDisk Where DriveType = 3"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckDiskSpace WMI GetObject = "" & Err.number & "" "" & Err.Description : Err.Clear ");
        //                loStringBuilder.AppendLine(@"	For Each objDisk in colDisks");
        //                loStringBuilder.AppendLine(@"		If UCase(objDisk.DeviceID) = HardDisk Then");
        //                loStringBuilder.AppendLine(@"			If IsNumeric(objDisk.FreeSpace) Then");
        //                loStringBuilder.AppendLine(@"				Tmp = Round((objDisk.FreeSpace / 1024 / 1024 / 1024),0)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckDiskSpace WMI ExecQuery = "" & Err.number & "" "" & Err.Description  ");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	CheckDiskSpace = Tmp");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMISvc = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colDisks = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	Reboot");
        //                loStringBuilder.AppendLine(@"' Function:	Reboots the System");
        //                loStringBuilder.AppendLine(@"' Parameter:   Return code for uninstall process");
        //                loStringBuilder.AppendLine(@"' Return:       no return");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub Reboot(BootReturnCode)");
        //                loStringBuilder.AppendLine(@"	Dim tmp");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	If Not ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		write2log(""Installation on Master PC, skipping reboot..."")");
        //                loStringBuilder.AppendLine(@"	Else  ");
        //                loStringBuilder.AppendLine(@"		' Show Reboot window");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			If fso.FileExists(IniFileName) Then ");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2Log(VbTab & ""=>> Return code from script = "" & BootReturnCode)");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2log(""Showing reboot window..."")");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				tmp = wso.Run(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34) & "" --file="" & IniFileName & "" --mode=5"",,True)");
        //                loStringBuilder.AppendLine(@"				write2log(""Reboot window closed, reboot initiated."")");
        //                loStringBuilder.AppendLine(@"				write2Log(""************************************************ END ******************************************************"")");
        //                loStringBuilder.AppendLine(@"				Set fso = Nothing");
        //                loStringBuilder.AppendLine(@"				Set wso = Nothing");
        //                loStringBuilder.AppendLine(@"				Set WshNetwork = Nothing");
        //                loStringBuilder.AppendLine(@"				Wscript.Quit(BootReturnCode)");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Cannot show reboot window! "" & IniFileName & "" was not found!"" & VbCrLf & ""Exiting..."", 1602");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ExitScript ""Cannot show reboot window! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "" & VbCrLf & ""Exiting..."", 1602");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StopServices");
        //                loStringBuilder.AppendLine(@"' Function:	Stop service.");
        //                loStringBuilder.AppendLine(@"' Parameter:    List of services for stop as a hash separated list [String]");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StopServices(T_Services)");
        //                loStringBuilder.AppendLine(@"	Dim Services,ServiceName");
        //                loStringBuilder.AppendLine(@"	'On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	Services = Split(T_Services,""#"")");
        //                loStringBuilder.AppendLine(@"	For Each ServiceName In Services");
        //                loStringBuilder.AppendLine(@"		StopService ServiceName, True");
        //                loStringBuilder.AppendLine(@"	Next ");
        //                loStringBuilder.AppendLine(@"	'On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StopService");
        //                loStringBuilder.AppendLine(@"' Function:	Stop service.");
        //                loStringBuilder.AppendLine(@"' Parameter:    Name of service to stop ");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub StopService(ServiceName, Waitforstopservice)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, objService, oService, Result");
        //                loStringBuilder.AppendLine(@"	On error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set objService = objWMIService.Get(""Win32_Service.Name='"" & ServiceName & ""'"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""Warning:  StopService .Get Win32_Service.Name  = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If Not objService.Started Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""The service "" & ServiceName & "" is Not started""");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If Not objService.AcceptStop Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""The service "" & ServiceName & "" does Not accept stop command""");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	Result  = objService.StopService");
        //                loStringBuilder.AppendLine(@"	If 0 <> Result Then");
        //                loStringBuilder.AppendLine(@"		write2Log  ""Stop "" & ServiceName & "" error: "" & Result");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		Exit Sub");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Do While objService.Started And Waitforstopservice");
        //                loStringBuilder.AppendLine(@"		Set objService = objWMIService.Get(""Win32_Service.Name='"" & ServiceName & ""'"")");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"			write2Log ""Warning:  StopService .Started .Get Win32_Service.Name  = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"			on error goto 0  ");
        //                loStringBuilder.AppendLine(@"			exit Sub");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2Log ""Service "" & ServiceName & "" "" & objService.State & "" "" & objService.Status");
        //                loStringBuilder.AppendLine(@"		Wscript.Sleep 300");
        //                loStringBuilder.AppendLine(@"	Loop  ");
        //                loStringBuilder.AppendLine(@"	on error goto 0  ");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	WaitForOpenApps");
        //                loStringBuilder.AppendLine(@"' Function:	wait until all given processes are closed by user.");
        //                loStringBuilder.AppendLine(@"' Parameter:    List of processes to wait for close as a hash separated list [String]");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function WaitForOpenApps(processnames, killproc, ToBeStopServices)");
        //                loStringBuilder.AppendLine(@"	Dim iButton, strMessage, strMessage2, processes, kprocesses, i, found, Chk, repeats");
        //                loStringBuilder.AppendLine(@"	Dim Appnames, processName");
        //                loStringBuilder.AppendLine(@"	Dim OpenApps, OpenAppsName, Apps, AppsName, j");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	OpenApps = ""NLNOTES.EXE#OUTLOOK.EXE#WINWORD.EXE#POWERPNT.EXE#IEXPLORE.EXE#ACRORD32.EXE#ACROBAT.EXE#VISIO.EXE#MSACCESS.EXE#EXCEL.EXE#INFOPATH.EXE""");
        //                loStringBuilder.AppendLine(@"	OpenAppsName = ""Lotus Notes#Microsoft Outlook#Microsoft Word#Microsoft Powerpoint#Internet Explorer#Adobe Acrobat Reader#Adobe Acrobat Writer#Microsoft Visio#Microsoft Access#Microsoft Excel#Microsoft Office 2003 Infopath""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Apps = Split(OpenApps, ""#"")");
        //                loStringBuilder.AppendLine(@"	AppsName = Split(OpenAppsName, ""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	processes = Split(processnames,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If WaitToKillProcess = True Then");
        //                loStringBuilder.AppendLine(@"		kprocesses = Split(processnames,""#"")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		kprocesses = Split(killproc,""#"")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	found = False");
        //                loStringBuilder.AppendLine(@"	Chk = True");
        //                loStringBuilder.AppendLine(@"	appnames = """"");
        //                loStringBuilder.AppendLine(@"	strmessage = ""Please close all the following applications. Press OK when done."" & vbCrLf & vbCrLf");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Run precheck to find out if message box has to be displayed");
        //                loStringBuilder.AppendLine(@"	For i = 0 to UBound(processes)");
        //                loStringBuilder.AppendLine(@"		If CheckProcess(processes(i)) Then");
        //                loStringBuilder.AppendLine(@"			found = True");
        //                loStringBuilder.AppendLine(@"			processName = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"				If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"					processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"					Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			Next");
        //                loStringBuilder.AppendLine(@"			If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If found Then");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"		If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"			repeats = 1");
        //                loStringBuilder.AppendLine(@"		Else ");
        //                loStringBuilder.AppendLine(@"			repeats = 3");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		While Chk");
        //                loStringBuilder.AppendLine(@"			WScript.Sleep 2000");
        //                loStringBuilder.AppendLine(@"			Chk = False");
        //                loStringBuilder.AppendLine(@"			If repeats = 3 Then ");
        //                loStringBuilder.AppendLine(@"				appnames = """"");
        //                loStringBuilder.AppendLine(@"				For i = 0 to UBound(kprocesses)");
        //                loStringBuilder.AppendLine(@"					If CheckProcess(kprocesses(i)) Then");
        //                loStringBuilder.AppendLine(@"						processName = """"");
        //                loStringBuilder.AppendLine(@"						For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"							If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"								processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"								Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"							End If");
        //                loStringBuilder.AppendLine(@"						Next");
        //                loStringBuilder.AppendLine(@"						If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"						Chk = True");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Next");
        //                loStringBuilder.AppendLine(@"				If Appnames <> """" Then");
        //                loStringBuilder.AppendLine(@"					strMessage2 = ""The following applications are still open and will be closed automatically after pressing OK"" & vbCrLf & vbCrLf & _");
        //                loStringBuilder.AppendLine(@"											""IMPORTANT: Please make sure all your work is saved. "" & VbCrLf & VbCrLf");
        //                loStringBuilder.AppendLine(@"					If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"						iButton = MessageBox(strMessage2 & Appnames)");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"					For i = 0 to UBound(kprocesses)");
        //                loStringBuilder.AppendLine(@"						If CheckProcess(kprocesses(i)) Then KillProcess(kprocesses(i))");
        //                loStringBuilder.AppendLine(@"					Next");
        //                loStringBuilder.AppendLine(@"				End If	");
        //                loStringBuilder.AppendLine(@"				Appnames = """"");
        //                loStringBuilder.AppendLine(@"				For i = 0 to UBound(processes)");
        //                loStringBuilder.AppendLine(@"					If CheckProcess(processes(i)) Then");
        //                loStringBuilder.AppendLine(@"						processName = """"");
        //                loStringBuilder.AppendLine(@"						For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"							If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"								processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"								Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"							End If");
        //                loStringBuilder.AppendLine(@"						Next");
        //                loStringBuilder.AppendLine(@"						If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"						Chk = True");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Next");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If Appnames <> """" Then ");
        //                loStringBuilder.AppendLine(@"					If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"						iButton = MessageBox(strMessage & Appnames)");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"					appnames = """"");
        //                loStringBuilder.AppendLine(@"					For i = 0 to UBound(processes)");
        //                loStringBuilder.AppendLine(@"						If CheckProcess(processes(i)) Then");
        //                loStringBuilder.AppendLine(@"							processName = """"");
        //                loStringBuilder.AppendLine(@"							For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"								If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"									processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"									Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"								End If");
        //                loStringBuilder.AppendLine(@"							Next");
        //                loStringBuilder.AppendLine(@"							If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"							Chk = True");
        //                loStringBuilder.AppendLine(@"						End If");
        //                loStringBuilder.AppendLine(@"					Next");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If	");
        //                loStringBuilder.AppendLine(@"			If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"				repeats = repeats + 1");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"		Wend");
        //                loStringBuilder.AppendLine(@"		If ToBeStopServices <> """" Then StopServices(ToBeStopServices)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		If ToBeStopServices <> """" Then StopServices(ToBeStopServices)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	WaitForOpenApps = True");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	BuildInstalledProductMatrix");
        //                loStringBuilder.AppendLine(@"' Function:	Checks If given MSI Products are installed and writes info back to global array");
        //                loStringBuilder.AppendLine(@"' Parameter:    Comma separated list of productcodes");
        //                loStringBuilder.AppendLine(@"' Return:       None");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub BuildInstalledProductMatrix(ListOfProducts)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim Products, liste, iExists");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (ListOfProducts <> """") Then");
        //                loStringBuilder.AppendLine(@"		Write2Log(""Installed product matrix"")");
        //                loStringBuilder.AppendLine(@"		Write2Log(""-----------------------------------"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Products = Split(ListOfProducts,""#"")");
        //                loStringBuilder.AppendLine(@"		ProductMatrix = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		For liste = 0 to UBound(Products)");
        //                loStringBuilder.AppendLine(@"			iExists = (InStr(Products(liste), ""I::"") > 0)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If iExists Then Products(liste) = Replace(Products(liste), ""I::"", """")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			Write2Log(liste + 1 & "")===> "" & Products(liste))");
        //                loStringBuilder.AppendLine(@"			If (ProductExists(Products(liste))) Then");
        //                loStringBuilder.AppendLine(@"				If iExists Then Products(liste) = Replace(Products(liste), ""{"", ""I::{"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				If ProductMatrix = """" Then");
        //                loStringBuilder.AppendLine(@"					ProductMatrix = ProductMatrix & Products(liste)");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					If Not Instr(ProductMatrix, Products(liste)) > 0 Then ProductMatrix = ProductMatrix & ""#"" & Products(liste)				");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			Write2Log("""")");
        //                loStringBuilder.AppendLine(@"			Write2Log(""-----------------------------------"")");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	ProductExists");
        //                loStringBuilder.AppendLine(@"' Function:		Check if product is installed");
        //                loStringBuilder.AppendLine(@"' Parameter:	ProductCode (GUID)");
        //                loStringBuilder.AppendLine(@"' Return:       True return if found else False return");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ProductExists(ProductGUID)");
        //                loStringBuilder.AppendLine(@"	ProductExists = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Key_Exists_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(ProductGUID) & ""\SourceList\PackageName"") Or _");
        //                loStringBuilder.AppendLine(@"	Key_Exists_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & ProductGUID & ""\DisplayName"") Then");
        //                loStringBuilder.AppendLine(@"		ProductExists = True");
        //                loStringBuilder.AppendLine(@"		Write2Log (""Product GUID found: "" & ProductGUID)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If (Reg_Read_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(ProductGUID) & ""\ProductName"") <> ""##ERR"") Then");
        //                loStringBuilder.AppendLine(@"			Write2Log (""ProductName: "" & Reg_Read_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(ProductGUID) & ""\ProductName""))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Write2Log (""Product GUID not found: "" & ProductGUID)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StartUninstallations");
        //                loStringBuilder.AppendLine(@"' Function:	This Function handles all uninstallations");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       Returncode of uninstallation command; In case or error the first error is returned");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StartUninstallations");
        //                loStringBuilder.AppendLine(@"	Dim Uninstalls, Chk, tmp, i_loop, ReturnCode, ErrorCode, pctPoz, restoreDCOM,USParameters, tmplog");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReturnCode = 0");
        //                loStringBuilder.AppendLine(@"	ErrorCode = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Write2Log("""")");
        //                loStringBuilder.AppendLine(@"	Write2Log(""---------------------Start Uninstallations---------------------"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ProductMatrix <> """" Then");
        //                loStringBuilder.AppendLine(@"		' split it up");
        //                loStringBuilder.AppendLine(@"		Uninstalls = Split(ProductMatrix,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i_loop = 0 to UBound(Uninstalls)");
        //                loStringBuilder.AppendLine(@"			' msi uninstallation log file");
        //                loStringBuilder.AppendLine(@"			tmplog = MSILogDir & PackageID & ""_Uninst("" & i_loop & "").log""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			restoreDCOM = False");
        //                loStringBuilder.AppendLine(@"			pctPoz = InStr(Uninstalls(i_loop), ""::"")");
        //                loStringBuilder.AppendLine(@"			If pctPoz > 0 Then");
        //                loStringBuilder.AppendLine(@"				If InStr(Left(Uninstalls(i_loop),(pctPoz + 1)),""I"") > 0 Then");
        //                loStringBuilder.AppendLine(@"					restoreDCOM = True");
        //                loStringBuilder.AppendLine(@"				End If  ");
        //                loStringBuilder.AppendLine(@"				Uninstalls(i_loop) = Right(Uninstalls(i_loop),Len(Uninstalls(i_loop))- (pctPoz + 1))");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If ProductExists(Uninstalls(i_loop)) Then");
        //                loStringBuilder.AppendLine(@"				' Check and pause instalaltion if vulscan or msi is running");
        //                loStringBuilder.AppendLine(@"				PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				If restoreDCOM Then");
        //                loStringBuilder.AppendLine(@"					SetDCOMInstallShieldAppIDs(""DELETE"")");
        //                loStringBuilder.AppendLine(@"				End If ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				tmp = ""msiexec /x "" & Uninstalls(i_loop) & "" /l*v "" & Chr(34) & tmplog & Chr(34) & "" REBOOT=ReallySuppress"" & InstallSwitch");
        //                loStringBuilder.AppendLine(@"				write2Log(""Running commandline for uninstallation: "" & tmp)");
        //                loStringBuilder.AppendLine(@"				Chk = wso.run (tmp,,True)");
        //                loStringBuilder.AppendLine(@"				write2log("""")");
        //                loStringBuilder.AppendLine(@"				ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"				If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"					write2Log(VbTab & ""=> Uninstallation sequence returned: success"")");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					If ErrorCode = 0 Then ErrorCode = ReturnCode");
        //                loStringBuilder.AppendLine(@"					write2Log(VbTab & ""=> Error: Uninstallation sequence returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"					write2Log(VbTab & ""Note: This error will be ignored and not be returned. Continue with sequence..."")");
        //                loStringBuilder.AppendLine(@"				End If		");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				If restoreDCOM Then");
        //                loStringBuilder.AppendLine(@"					SetDCOMInstallShieldAppIDs(""WRITE"")");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If LegacyUninstall <> """" Then");
        //                loStringBuilder.AppendLine(@"		' Check and pause instalaltion if vulscan or msi is running");
        //                loStringBuilder.AppendLine(@"		PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' split it up");
        //                loStringBuilder.AppendLine(@"		Uninstalls = Split(LegacyUninstall,""#"")");
        //                loStringBuilder.AppendLine(@"		If AdditionalLegacyUninstallParameters <> """" Then USParameters = Split(AdditionalLegacyUninstallParameters,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i_loop = 0 to UBound(Uninstalls)");
        //                loStringBuilder.AppendLine(@"			write2Log(""Uninstall Job found: "" & Uninstalls(i_loop))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If AdditionalLegacyUninstallParameters <> """" Then");
        //                loStringBuilder.AppendLine(@"				tmp = Chr(34) & ParseConst(Uninstalls(i_loop)) & Chr(34) & "" "" & ParseConst(USParameters(i_loop))");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				tmp = Chr(34) & ParseConst(Uninstalls(i_loop)) & Chr(34)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			write2Log(""Running commandline for uninstallation: "" & tmp)");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			Chk = wso.run(tmp,,True)");
        //                loStringBuilder.AppendLine(@"			write2log("""")");
        //                loStringBuilder.AppendLine(@"			ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"			If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"				write2Log(VbTab & ""=> Uninstallation sequence returned: success"")");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If ErrorCode = 0 Then ErrorCode = ReturnCode");
        //                loStringBuilder.AppendLine(@"				write2Log(vbTab & ""=> Error: Uninstallation sequence returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"				write2Log(vbTab & ""Note: This error will be ignored and not be returned. Continue with sequence..."")");
        //                loStringBuilder.AppendLine(@"			End If		");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If Not (ReturnCode = 0 or ReturnCode = 3010) Then Exit For");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Write2Log(""---------------------End Uninstallations-----------------------"")");
        //                loStringBuilder.AppendLine(@"	Write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	StartUninstallations = ErrorCode");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DisplayProgressBar");
        //                loStringBuilder.AppendLine(@"' Function:	Displays a progress bar window, to be used during pre-/post-installation");
        //                loStringBuilder.AppendLine(@"'           	if there are time-consuming tasks done silently");
        //                loStringBuilder.AppendLine(@"' Parameter:    1 for pre-installation progress bar, 2 for post-installation progress bar");
        //                loStringBuilder.AppendLine(@"' Return:       PID of ProgressBar process");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DisplayProgressBar(Mode)");
        //                loStringBuilder.AppendLine(@"	Dim oBar");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			Set oBar = wso.Exec(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34)& "" --mode="" & Mode)");
        //                loStringBuilder.AppendLine(@"			wso.AppActivate oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"			DisplayProgressBar = oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Cannot show progress bar! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "")");
        //                loStringBuilder.AppendLine(@"		End If   ");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0 ");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DisplayCustomProgressBar");
        //                loStringBuilder.AppendLine(@"' Function:	Displays a progress bar window with a custom message");
        //                loStringBuilder.AppendLine(@"' Parameter:    the message that has to be displayed");
        //                loStringBuilder.AppendLine(@"' Return:       PID of ProgressBar process");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DisplayCustomProgressBar(Caption)");
        //                loStringBuilder.AppendLine(@"	Dim oBar");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			Set oBar = wso.Exec(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34)& "" --caption="" & Caption)");
        //                loStringBuilder.AppendLine(@"			wso.AppActivate oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"			DisplayCustomProgressBar = oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Cannot show progress bar! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "")");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	KillProgressBar");
        //                loStringBuilder.AppendLine(@"' Function:	Kills a progress bar window, ");
        //                loStringBuilder.AppendLine(@"' Parameter:    PID of ProgressBar process");
        //                loStringBuilder.AppendLine(@"' Return:       True on success, False on error");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub KillProgressBar(PID)");
        //                loStringBuilder.AppendLine(@"	Call KillPID(PID)");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	CheckPendingFileRename");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for Pending File Rename");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckPendingFileRename()");
        //                loStringBuilder.AppendLine(@"	CheckPendingFileRename = Key_Exists_Str(""HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	CheckRebootPending");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for Reboot Pending");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckRebootPending()");
        //                loStringBuilder.AppendLine(@"	CheckRebootPending = Reg_Hive_Exists(""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	PendingReboot");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for a pending reboot ");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function PendingReboot");
        //                loStringBuilder.AppendLine(@"	write2log(""Pre-installation check : checking if there is a pending reboot scheduled..."")");
        //                loStringBuilder.AppendLine(@"	If CheckPendingFileRename or  CheckRebootPending Then");
        //                loStringBuilder.AppendLine(@"		write2log(""WARNING: A pending reboot was reported from the operating system, previous installation might not completed succesfully!"")");
        //                loStringBuilder.AppendLine(@"		write2log(""This warning is only for your information, no additional steps are being done."")");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"		PendingReboot =  True");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		PendingReboot  = False");
        //                loStringBuilder.AppendLine(@"		write2log(""No pending reboot is found."")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	StartLANDeskInventory");
        //                loStringBuilder.AppendLine(@"' Function:	Handles starting LanDesk Inventory");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub StartLANDeskInventory");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun, tmpCoreServer, LDCmd");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	LDCmd = """"""%ProgramFiles%\LANDesk\LDClient\LDIScn32.exe"""" /NTT=%CoreServer%:5007 /S=%CoreServer%  /I=HTTP://%CoreServer%/ldlogon/ldappl3.ldz""");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	tmpCmd = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\LANDeskInventoryClient"")");
        //                loStringBuilder.AppendLine(@"	If (tmpCmd = ""##ERR"") Then");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		tmpCoreServer = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Intel\LANDesk\LDWM\CoreServer"")");
        //                loStringBuilder.AppendLine(@"		If (tmpCoreServer = ""##ERR"") Then");
        //                loStringBuilder.AppendLine(@"			write2log ""Could not start LANDesk Inventory!""");
        //                loStringBuilder.AppendLine(@"			write2log ""Make sure you have the LANDesk Agent installed on this machine...""");
        //                loStringBuilder.AppendLine(@"			Exit Sub");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			tmpCmd = Replace(LDCmd, ""%CoreServer%"",tmpCoreServer)");
        //                loStringBuilder.AppendLine(@"			If fso.FolderExists(ProgramFiles & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"				tmpCmd = Replace(tmpCmd, ""%ProgramFiles%"",Left(ProgramFiles, Len(ProgramFiles)-1))");
        //                loStringBuilder.AppendLine(@"			Else ");
        //                loStringBuilder.AppendLine(@"				Dim ProgramFilesx86");
        //                loStringBuilder.AppendLine(@"				ProgramFilesx86 = Wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"				If Right(ProgramFilesx86,1) <> ""\"" Then ProgramFilesx86 = ProgramFilesx86 & ""\""");
        //                loStringBuilder.AppendLine(@"				If ProgramFilesx86 <> ""%ProgramFiles(x86)%\"" And fso.FolderExists(ProgramFilesx86 & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"					tmpCmd = Replace(tmpCmd, ""%ProgramFiles%"",Left(ProgramFilesx86, Len(ProgramFilesx86)-1))");
        //                loStringBuilder.AppendLine(@"				End If  ");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If ");
        //                loStringBuilder.AppendLine(@"	Else  ");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /v"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /f-"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /f"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /noui"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /w=300"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case LANDeskInventory");
        //                loStringBuilder.AppendLine(@"	Case ""Hardware""");
        //                loStringBuilder.AppendLine(@"		tmpCmd = tmpCmd & "" /F- /RSS""");
        //                loStringBuilder.AppendLine(@"	Case ""Software""");
        //                loStringBuilder.AppendLine(@"		tmpCmd = tmpCmd & "" /F /NH""");
        //                loStringBuilder.AppendLine(@"	Case ""Both""");
        //                loStringBuilder.AppendLine(@"		tmpCmd = tmpCmd & "" /F""");
        //                loStringBuilder.AppendLine(@"	Case Else");
        //                loStringBuilder.AppendLine(@"		Exit Sub   ");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpCmd = tmpCmd & "" /noui""");
        //                loStringBuilder.AppendLine(@"	If InStr(1, tmpCmd, ""%ProgramFiles%"", 1) = 0 Then");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,False)");
        //                loStringBuilder.AppendLine(@"		write2log ""Running LANDesk Inventory Command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		write2log ""Started LANDesk Inventory, Inventory Type: "" & LANDeskInventory & "", return code: "" & tmpRun");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log ""Could not start LANDesk Inventory!""");
        //                loStringBuilder.AppendLine(@"		write2log ""Make sure you have the LANDesk Agent installed on this machine...""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	LANDeskStartAsUser");
        //                loStringBuilder.AppendLine(@"' Function:	Handles starting LanDesk StartAsUser");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False or ERR -> don't find %ProgramFiles%\LANDesk\LDClient\StartAsUser.exe");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function LANDeskStartAsUser()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun");
        //                loStringBuilder.AppendLine(@"	Dim LDCmd :: LDCmd = """"""%ProgramFiles%\LANDesk\LDClient\startasuser.exe""""  ///Silent """"%ProgramFiles%\LANDesk\LDClient\ldapwhoami.exe"""""" & "" -structured""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"  	If fso.FolderExists(ProgramFiles & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFiles, Len(ProgramFiles)-1))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else ");
        //                loStringBuilder.AppendLine(@"		Dim ProgramFilesx86");
        //                loStringBuilder.AppendLine(@"		ProgramFilesx86 = Wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"		If Right(ProgramFilesx86,1) <> ""\"" Then ProgramFilesx86 = ProgramFilesx86 & ""\""");
        //                loStringBuilder.AppendLine(@"		If ProgramFilesx86 <> ""%ProgramFiles(x86)%\"" And fso.FolderExists(ProgramFilesx86 & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"			tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFilesx86, Len(ProgramFilesx86)-1))");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(1, tmpCmd, ""%ProgramFiles%"", 1) = 0 Then");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,True)");
        //                loStringBuilder.AppendLine(@"		write2log ""Running LANDesk StartAsUser Command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		write2log ""Started LANDesk StartAsUser - return code: "" & tmpRun");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"		if tmpRun = ""-2147023651"" then LANDeskStartAsUser =  False");
        //                loStringBuilder.AppendLine(@"		if tmpRun = ""1"" then LANDeskStartAsUser =  True");
        //                loStringBuilder.AppendLine(@"		if tmpRun = ""0"" then LANDeskStartAsUser =  True");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log ""Could not start LANDesk StartAsUser!""");
        //                loStringBuilder.AppendLine(@"		write2log ""Make sure you have the LANDesk StartAsUser.exe installed on folder %ProgramFiles%\LANDesk\LDClient\""");
        //                loStringBuilder.AppendLine(@"		LANDeskStartAsUser = ""ERR""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	LANDeskSdclient");
        //                loStringBuilder.AppendLine(@"' Function:	Send message to core server");
        //                loStringBuilder.AppendLine(@"' Parameter:    text to send");
        //                loStringBuilder.AppendLine(@"' Return:       True or (False -> don't find %ProgramFiles%\LANDesk\LDClient\Sdclient.exe)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function LANDeskSDCLIENT(msg)");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun");
        //                loStringBuilder.AppendLine(@"	Dim LDCmd :: LDCmd = """"""%ProgramFiles%\LANDesk\LDClient\Sdclient.exe""""  /msg="" & Chr(34) & msg & Chr(34)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"  	If fso.FolderExists(ProgramFiles & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFiles, Len(ProgramFiles)-1))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else ");
        //                loStringBuilder.AppendLine(@"		Dim ProgramFilesx86");
        //                loStringBuilder.AppendLine(@"		ProgramFilesx86 = Wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"		If Right(ProgramFilesx86,1) <> ""\"" Then ProgramFilesx86 = ProgramFilesx86 & ""\""");
        //                loStringBuilder.AppendLine(@"		If ProgramFilesx86 <> ""%ProgramFiles(x86)%\"" And fso.FolderExists(ProgramFilesx86 & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"			tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFilesx86, Len(ProgramFilesx86)-1))");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(1, tmpCmd, ""%ProgramFiles%"", 1) = 0 Then");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		write2log ""Running LANDesk Sdclient Command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,True)");
        //                loStringBuilder.AppendLine(@"		WScript.Sleep 3000");
        //                loStringBuilder.AppendLine(@"		If tmpRun = ""-1918091240"" Then write2log ""Message not send to Landesk core server.""");
        //                loStringBuilder.AppendLine(@"		If tmpRun =  ""1168"" Then write2log ""Message not send to Landesk core server.""	");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"		LANDeskSDCLIENT = True");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log ""Could not start LANDesk Sdclient!""");
        //                loStringBuilder.AppendLine(@"		write2log ""Make sure you have the LANDesk Sdclient.exe installed on folder %ProgramFiles%\LANDesk\LDClient\""");
        //                loStringBuilder.AppendLine(@"		'LANDeskSDCLIENT = ""ERR""");
        //                loStringBuilder.AppendLine(@"		LANDeskSDCLIENT = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: 	GetPatchPackCode");
        //                loStringBuilder.AppendLine(@"' Function: 		Returns the PackageCode of a patch");
        //                loStringBuilder.AppendLine(@"' Paramater:		Path to MSP");
        //                loStringBuilder.AppendLine(@"' Return: 		PackageCode of MSP (from the SIS)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetPatchPackCode(fMSP)");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	Dim sInfo, msiFile, msiDB ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetPatchPackCode = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = objInstaller.OpenDatabase(fMSP, 32)");
        //                loStringBuilder.AppendLine(@"	Set sInfo = msiDB.SummaryInformation");
        //                loStringBuilder.AppendLine(@"	GetPatchPackCode = Left(sInfo.Property(9), 38)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set sInfo = Nothing ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: 	GetMSIProdCode");
        //                loStringBuilder.AppendLine(@"' Function: 		Returns the ProductCode of an MSI");
        //                loStringBuilder.AppendLine(@"' Paramater:		Path to MSI");
        //                loStringBuilder.AppendLine(@"' Return: 		ProductCode of MSI (from Property table)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetMSIProdCode(fMSI)");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetMSIProdCode = """"");
        //                loStringBuilder.AppendLine(@"	Dim msiDB, record, view");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = objInstaller.OpenDatabase(fMSI, 0)");
        //                loStringBuilder.AppendLine(@"	Set view = msiDB.OpenView(""SELECT * FROM Property"")");
        //                loStringBuilder.AppendLine(@"	view.Execute");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Do ");
        //                loStringBuilder.AppendLine(@"		Set record = view.Fetch");
        //                loStringBuilder.AppendLine(@"		If record Is Nothing Then Exit Do");
        //                loStringBuilder.AppendLine(@"		If record.StringData(1) = ""ProductCode"" Then ");
        //                loStringBuilder.AppendLine(@"			GetMSIProdCode = record.StringData(2)");
        //                loStringBuilder.AppendLine(@"			Exit Do");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	Loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = Nothing");
        //                loStringBuilder.AppendLine(@"	Set record = Nothing");
        //                loStringBuilder.AppendLine(@"	Set view = Nothing");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: 	ReverseGUID");
        //                loStringBuilder.AppendLine(@"' Function: 		Returns the ""reversed GUID"" from a GUID");
        //                loStringBuilder.AppendLine(@"' Paramater:		GUID to be reversed");
        //                loStringBuilder.AppendLine(@"' Return: 		reversed GUID");
        //                loStringBuilder.AppendLine(@"' Author: 		Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReverseGUID(GUID)");
        //                loStringBuilder.AppendLine(@"	Dim testExp ");
        //                loStringBuilder.AppendLine(@"	Set testExp = New RegExp");
        //                loStringBuilder.AppendLine(@"	testExp.Pattern = ""\{[A-Za-z0-9]{8}\-[A-Za-z0-9]{4}\-[A-Za-z0-9]{4}\-[A-Za-z0-9]{4}\-[A-Za-z0-9]{12}\}""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If testExp.Test(GUID) = True Then ");
        //                loStringBuilder.AppendLine(@"		ReverseGUID = StrReverse(Mid(GUID,2,8)) & StrReverse(Mid(GUID,11,4)) & StrReverse(Mid(GUID,16,4)) & StrReverse(Mid(GUID,21,2)) & StrReverse(Mid(GUID,23,2)) & StrReverse(Mid(GUID,26,2)) & StrReverse(Mid(GUID,28,2)) & StrReverse(Mid(GUID,30,2)) & StrReverse(Mid(GUID,32,2)) & StrReverse(Mid(GUID,34,2)) & StrReverse(Mid(GUID,36,2))");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		ReverseGUID = """" ");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set testExp = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	ExitScript");
        //                loStringBuilder.AppendLine(@"' Function:	Exits the script with a given return code");
        //                loStringBuilder.AppendLine(@"' Parameters:    Message to be written to logfile");
        //                loStringBuilder.AppendLine(@"' Return code of script");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub ExitScript(ExitMessage, UninstallReturnCode)");
        //                loStringBuilder.AppendLine(@"	If Not (UninstallReturnCode = 0 Or UninstallReturnCode = 3010) Or (InStr(ExitMessage,""No product found to uninstall, exiting..."") > 0) Then");
        //                loStringBuilder.AppendLine(@"		If InStr(ExitMessage,""No product found to uninstall, exiting..."") > 0 Then");
        //                loStringBuilder.AppendLine(@"			CustomMessageBox ExitMessage & vbCrLf & vbCrLf & ""For more details, please check the package log file."" & _");
        //                loStringBuilder.AppendLine(@"					vbCrLf & Logfilename, Null, Null, vbOKOnly + vbInformation");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			CustomMessageBox ExitMessage & vbCrLf & vbCrLf & ""For more details, please check the package log file."" & _");
        //                loStringBuilder.AppendLine(@"					vbCrLf & Logfilename, Null, Null, Null");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Kill installation progress bar");
        //                loStringBuilder.AppendLine(@"	If ShowProgressBar = True Then");
        //                loStringBuilder.AppendLine(@"		KillProgressBar(pbPID)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(ExitMessage, VbCrLf) > 0 Then ExitMessage = Mid(ExitMessage, 1, InStr(ExitMessage, VbCrLf))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Re-enable IE zone checks");
        //                loStringBuilder.AppendLine(@"	ZoneCheckDisabled = DisableIEZoneChecks(False)");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	LANDeskSDCLIENT(ExitMessage)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	write2Log(VbTab & ""=>> Return code from script = "" & UninstallReturnCode)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	write2log(ExitMessage)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	Write2Log(""************************************************ END ******************************************************"")");
        //                loStringBuilder.AppendLine(@"	Write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set fso = Nothing");
        //                loStringBuilder.AppendLine(@"	Set wso = Nothing");
        //                loStringBuilder.AppendLine(@"	Set WshNetwork = Nothing");
        //                loStringBuilder.AppendLine(@"	Wscript.Quit(UninstallReturnCode)");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	SetDCOMInstallShieldAppIDs");
        //                loStringBuilder.AppendLine(@"' Return:");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub SetDCOMInstallShieldAppIDs(Action)");
        //                loStringBuilder.AppendLine(@" 	On Error Resume Next ");
        //                loStringBuilder.AppendLine(@"	Dim AppIDs, WMIService, DComApp, DComApps, i_loop");
        //                loStringBuilder.AppendLine(@" 	'Create WMI object");
        //                loStringBuilder.AppendLine(@"	Set WMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"") ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If UCase(Action) = ""DELETE"" Then ");
        //                loStringBuilder.AppendLine(@"		DCOMInstallShieldAppIDs = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Query all DCOM object on the machine that are Installshield related and set to run as interactive user");
        //                loStringBuilder.AppendLine(@"		Set DComApps = WMIService.ExecQuery(""Select * from Win32_DComApplicationSetting where Caption Like '%InstallShield%' and RunAsUser='Interactive User'"") ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Delete the registry key that set the run as for the DCOM application (DCOM guid is used from the above query to locate the registry)");
        //                loStringBuilder.AppendLine(@"		For Each DComApp In DComApps ");
        //                loStringBuilder.AppendLine(@"			'Generate Undo Array");
        //                loStringBuilder.AppendLine(@"			DCOMInstallShieldAppIDs = DCOMInstallShieldAppIDs & DComApp.AppID & ""#""");
        //                loStringBuilder.AppendLine(@"			write2Log(""InstallShield DCOM Server was found and Interactive User flag was deleted: "" & DComApp.AppID)");
        //                loStringBuilder.AppendLine(@"			wso.RegDelete ""HKEY_CLASSES_ROOT\AppID\"" & DComApp.AppID & ""\RunAs"" ");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Query all DCOM object on the machine that are Installshield related and set to run as interactive user");
        //                loStringBuilder.AppendLine(@"		Set DComApps = WMIService.ExecQuery(""Select * from Win32_DComApplicationSetting where Caption Like '%IDriverT%' and RunAsUser='Interactive User'"") ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Delete the registry key that set the run as for the DCOM application (DCOM guid is used from the above query to locate the registry)");
        //                loStringBuilder.AppendLine(@"		For Each DComApp In DComApps ");
        //                loStringBuilder.AppendLine(@"			'Generate Undo Array");
        //                loStringBuilder.AppendLine(@"			DCOMInstallShieldAppIDs = DCOMInstallShieldAppIDs & DComApp.AppID & ""#""");
        //                loStringBuilder.AppendLine(@"			write2Log(""InstallShield DCOM Server was found and Interactive User flag was deleted: "" & DComApp.AppID)");
        //                loStringBuilder.AppendLine(@"			wso.RegDelete ""HKEY_CLASSES_ROOT\AppID\"" & DComApp.AppID & ""\RunAs"" ");
        //                loStringBuilder.AppendLine(@"		Next ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If (Len(DCOMInstallShieldAppIDs) > 1) Then DCOMInstallShieldAppIDs = Left(DCOMInstallShieldAppIDs,Len(DCOMInstallShieldAppIDs)-1)");
        //                loStringBuilder.AppendLine(@"		write2Log(""InstallShield DCOM Servers: "" & DCOMInstallShieldAppIDs)");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"	If UCase(Action) = ""WRITE"" Then");
        //                loStringBuilder.AppendLine(@"		AppIDs = Split(DCOMInstallShieldAppIDs,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i_loop = 0 To UBound(AppIDs)");
        //                loStringBuilder.AppendLine(@"			write2log(""InstallShield DCOM Server reset to Interactive User: "" & AppIDs(i_loop))");
        //                loStringBuilder.AppendLine(@"			wso.RegWrite ""HKEY_CLASSES_ROOT\AppID\"" & AppIDs(i_loop) & ""\RunAs"", ""Interactive User""");
        //                loStringBuilder.AppendLine(@"		Next ");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0   ");
        //                loStringBuilder.AppendLine(@"End Sub ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DisableIEZoneChecks");
        //                loStringBuilder.AppendLine(@"' Function:	Prevents ""Open File - Security Warning"" dialog box from displaying on Windows XP SP2 and above");
        //                loStringBuilder.AppendLine(@"' Parameters: 	True for disabling checks, False for enabling it again  ");
        //                loStringBuilder.AppendLine(@"' Return: 	DisableCheck = True - True if zone check was disabled, False if Not");
        //                loStringBuilder.AppendLine(@"'         	DisableCheck = False - False if zone check was reenabled, True if Not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DisableIEZoneChecks(DisableCheck)");
        //                loStringBuilder.AppendLine(@"	Dim env : Set env = wso.Environment(""PROCESS"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If DisableCheck = False Then");
        //                loStringBuilder.AppendLine(@"		If ZoneCheckDisabled = True Then ");
        //                loStringBuilder.AppendLine(@"			DisableIEZoneChecks = True");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			env(""SEE_MASK_NOZONECHECKS"") = 0");
        //                loStringBuilder.AppendLine(@"			env.Remove(""SEE_MASK_NOZONECHECKS"")");
        //                loStringBuilder.AppendLine(@"			If Err.Number = 0 Then");
        //                loStringBuilder.AppendLine(@"				DisableIEZoneChecks = False");
        //                loStringBuilder.AppendLine(@"				write2log(""IE Zone checks re-enabled."")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0 ");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		DisableIEZoneChecks = False");
        //                loStringBuilder.AppendLine(@"		If (CStr(env(""SEE_MASK_NOZONECHECKS"")) = ""1"") Then");
        //                loStringBuilder.AppendLine(@"			write2log(""IE Zone checks already disabled."") ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			env(""SEE_MASK_NOZONECHECKS"") = 1");
        //                loStringBuilder.AppendLine(@"			If Err.Number = 0 Then ");
        //                loStringBuilder.AppendLine(@"				DisableIEZoneChecks = True");
        //                loStringBuilder.AppendLine(@"				write2log(""IE Zone checks temporarily disabled."")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0 ");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ReformatDouble");
        //                loStringBuilder.AppendLine(@"' Function:	To convert different formats of double value to standard string (e.g. 6.1, 78.86)");
        //                loStringBuilder.AppendLine(@"' Parameters: 	string to be converted");
        //                loStringBuilder.AppendLine(@"' Return: 	Double");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReformatDouble(str)");
        //                loStringBuilder.AppendLine(@"	Dim res,chrReo,splitChr,scLoop");
        //                loStringBuilder.AppendLine(@"	res = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(str, ""."") > 0 Then ");
        //                loStringBuilder.AppendLine(@"		chrReo = "".""");
        //                loStringBuilder.AppendLine(@"		str = Replace(str, "","", """",1,-1,1)");
        //                loStringBuilder.AppendLine(@"		If Not CheckDouble(str) Then chrReo = "",""");
        //                loStringBuilder.AppendLine(@"	ElseIf InStr(str, "","") > 0 Then");
        //                loStringBuilder.AppendLine(@"		chrReo = "",""");
        //                loStringBuilder.AppendLine(@"		str = Replace(str, "" "", """",1,-1,1)");
        //                loStringBuilder.AppendLine(@"		If Not CheckDouble(str) Then chrReo = "".""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	splitChr = Split(str, chrReo)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For scLoop = 0 to UBound(splitChr)");
        //                loStringBuilder.AppendLine(@"		If scLoop < 2 Then");
        //                loStringBuilder.AppendLine(@"			If scLoop = 0 Then");
        //                loStringBuilder.AppendLine(@"				res = splitChr(scLoop)");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If (splitChr(scLoop) <> ""0"") Then res = res & chrReo & splitChr(scLoop)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	ReformatDouble = CDbl(res)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Function CheckDouble(str)");
        //                loStringBuilder.AppendLine(@"	Dim ret");
        //                loStringBuilder.AppendLine(@"	CheckDouble = true");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	ret = CDbl(str)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ret = """" Then CheckDouble = false");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CompareVersions");
        //                loStringBuilder.AppendLine(@"' Function:	Compares two versions ""a.b.c.d"". If Version1 < Version2,");
        //                loStringBuilder.AppendLine(@"' Parameters: 	version string");
        //                loStringBuilder.AppendLine(@"' Return: 	returns -1; if Version1 = Version2, returns 0;");
        //                loStringBuilder.AppendLine(@"' If Version1 > Version2, Returns 1.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CompareVersions(ByVal Version1, ByVal Version2)");
        //                loStringBuilder.AppendLine(@"	Dim Ver1, Ver2, Result");
        //                loStringBuilder.AppendLine(@"	Ver1 = GetVersionStringAsArray(Version1)");
        //                loStringBuilder.AppendLine(@"	Ver2 = GetVersionStringAsArray(Version2)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Ver1(0) < Ver2(0) Then");
        //                loStringBuilder.AppendLine(@"		Result = -1");
        //                loStringBuilder.AppendLine(@"	ElseIf Ver1(0) = Ver2(0) Then");
        //                loStringBuilder.AppendLine(@"		If Ver1(1) < Ver2(1) Then");
        //                loStringBuilder.AppendLine(@"			Result = -1");
        //                loStringBuilder.AppendLine(@"		ElseIf Ver1(1) = Ver2(1) Then");
        //                loStringBuilder.AppendLine(@"			Result = 0");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			Result = 1");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Result = 1");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CompareVersions = Result");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Bitwise left shift.");
        //                loStringBuilder.AppendLine(@"Function Lsh(ByVal N, ByVal Bits)");
        //                loStringBuilder.AppendLine(@"	Lsh = N * (2 ^ Bits)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Returns a version string ""a.b.c.d"" as a two-element numeric");
        //                loStringBuilder.AppendLine(@"' array. The first array element is the most-significant 32 bits,");
        //                loStringBuilder.AppendLine(@"' and the second element is the least-significant 32 bits.");
        //                loStringBuilder.AppendLine(@"Function GetVersionStringAsArray(ByVal Version)");
        //                loStringBuilder.AppendLine(@"	Dim VersionAll, VersionParts, N, chr");
        //                loStringBuilder.AppendLine(@"	VersionAll = Array(0, 0, 0, 0)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(Version, ""."") > 0 Then ");
        //                loStringBuilder.AppendLine(@"		chr = "".""");
        //                loStringBuilder.AppendLine(@"	ElseIf InStr(Version, "","") > 0 Then");
        //                loStringBuilder.AppendLine(@"		chr = "",""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	VersionParts = Split(Version, chr)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For N = 0 To UBound(VersionParts)");
        //                loStringBuilder.AppendLine(@"		VersionAll(N) = CLng(VersionParts(N))");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim Hi, Lo");
        //                loStringBuilder.AppendLine(@"	Hi = Lsh(VersionAll(0), 16) + VersionAll(1)");
        //                loStringBuilder.AppendLine(@"	Lo = Lsh(VersionAll(2), 16) + VersionAll(3)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetVersionStringAsArray = Array(Hi, Lo)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DetectClientPlatform");
        //                loStringBuilder.AppendLine(@"' Function:	Detects OS Version and bitwise");
        //                loStringBuilder.AppendLine(@"' Parameters:	none");
        //                loStringBuilder.AppendLine(@"' Return: 	OS Version, bitWise");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Public Function DetectClientPlatform()");
        //                loStringBuilder.AppendLine(@"	Dim cCheck, objWMIService, colOperatingSystems, objOperatingSystem, oVersion");
        //                loStringBuilder.AppendLine(@"	Dim splitChr, chrReo, scLoop, dotPos, sdotPos");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colOperatingSystems = objWMIService.ExecQuery(""Select * from Win32_OperatingSystem"")");
        //                loStringBuilder.AppendLine(@"	For Each objOperatingSystem In colOperatingSystems");
        //                loStringBuilder.AppendLine(@"		oVersion = objOperatingSystem.Version");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	OSVer = oVersion");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Check platform DSContainer or OS ProductName");
        //                loStringBuilder.AppendLine(@"	cCheck = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\DSClient\Installation\Version\DSContainer"")");
        //                loStringBuilder.AppendLine(@"	If cCheck = ""##ERR"" Then cCheck = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ( (PROC_ARCH1 = ""X86"") AND (PROC_ARCH2 = ""%PROCESSOR_ARCHITEW6432%"") ) Then");
        //                loStringBuilder.AppendLine(@"		bitWise = ""32bit""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If ( (PROC_ARCH1 = ""X86"") AND (PROC_ARCH2 = ""AMD64"") ) Then");
        //                loStringBuilder.AppendLine(@"		bitWise = ""64bit""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If  PROC_ARCH1 = ""AMD64"" or PROC_ARCH1 = ""IA64"" Then");
        //                loStringBuilder.AppendLine(@"		bitWise = ""64bit""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	DetectClientPlatform = cCheck  & "" "" & bitWise");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	RunSecedit");
        //                loStringBuilder.AppendLine(@"' Function:	Runs secedit.exe");
        //                loStringBuilder.AppendLine(@"' Parameters:   Path to database used");
        //                loStringBuilder.AppendLine(@"'		Path to security template");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub RunSecedit(DBPath, InfPath)");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun, logfile, InfFile");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	DBPath = ParseConst(DBPath)");
        //                loStringBuilder.AppendLine(@"	InfPath = ParseConst(InfPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	logfile = Replace(Right(InfPath, Len(InfPath) - InstrRev(InfPath, ""\"")), "".inf"", ""_secedit.log"", 1, -1, 1)");
        //                loStringBuilder.AppendLine(@"	InfFile = SysRoot & ""security\templates\"" & Right(InfPath, Len(InfPath) - InstrRev(InfPath, ""\""))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	fso.CopyFile InfPath, InfFile, 1");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FileExists(InfFile) Then ");
        //                loStringBuilder.AppendLine(@"		tmpCmd = SystemFolder & ""secedit.exe /configure /db "" & DBPath & "" /cfg "" & chr(34) & InfFile & chr(34) & "" /log "" & MSILogDir & logfile");
        //                loStringBuilder.AppendLine(@"		write2log ""Running secedit command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,True)");
        //                loStringBuilder.AppendLine(@"		write2log ""Finished running secedit, return code: "" & tmpRun");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log InfFile & "" file not found. Secedit canceled.""");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' Function:	ReadIni ");
        //                loStringBuilder.AppendLine(@"' Parameters:");
        //                loStringBuilder.AppendLine(@"' myFilePath  [string]  the (path and) file name of the INI file");
        //                loStringBuilder.AppendLine(@"' mySection   [string]  the section in the INI file to be searched");
        //                loStringBuilder.AppendLine(@"' myKey       [string]  the key whose value is to be returned");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' Returns:    [string] value for the specified key in the specified section");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' CAVEAT:     Will return ##ERR if key exists but value is blank");
        //                loStringBuilder.AppendLine(@"' robvanderwoude/vbstech_files_ini");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadIni( myFilePath, mySection, myKey )");
        //                loStringBuilder.AppendLine(@"	Dim intEqualPos");
        //                loStringBuilder.AppendLine(@"	Dim objIniFile");
        //                loStringBuilder.AppendLine(@"	Dim strFilePath, strKey, strLeftString, strLine, strSection");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReadIni     = """"");
        //                loStringBuilder.AppendLine(@"	strFilePath = Trim( ParseConst(myFilePath) )");
        //                loStringBuilder.AppendLine(@"	strSection  = Trim( mySection )");
        //                loStringBuilder.AppendLine(@"	strKey      = Trim( myKey )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FileExists( strFilePath ) Then");
        //                loStringBuilder.AppendLine(@"		Set objIniFile = fso.OpenTextFile( strFilePath, 1, False )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Do While objIniFile.AtEndOfStream = False");
        //                loStringBuilder.AppendLine(@"			strLine = Trim( objIniFile.ReadLine )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			' Check if section is found in the current line");
        //                loStringBuilder.AppendLine(@"			If LCase( strLine ) = ""["" & LCase( strSection ) & ""]"" Then");
        //                loStringBuilder.AppendLine(@"				strLine = Trim( objIniFile.ReadLine )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				' Parse lines until the next section is reached");
        //                loStringBuilder.AppendLine(@"				Do While Left( strLine, 1 ) <> ""[""");
        //                loStringBuilder.AppendLine(@"					' Find position of equal sign in the line");
        //                loStringBuilder.AppendLine(@"					intEqualPos = InStr( 1, strLine, ""="", 1 )");
        //                loStringBuilder.AppendLine(@"					If intEqualPos > 0 Then");
        //                loStringBuilder.AppendLine(@"						strLeftString = Trim( Left( strLine, intEqualPos - 1 ) )");
        //                loStringBuilder.AppendLine(@"						' Check If item is found in the current line");
        //                loStringBuilder.AppendLine(@"						If LCase( strLeftString ) = LCase( strKey ) Then");
        //                loStringBuilder.AppendLine(@"							ReadIni = Trim( Mid( strLine, intEqualPos + 1 ) )");
        //                loStringBuilder.AppendLine(@"							' In case the item exists but value is blank");
        //                loStringBuilder.AppendLine(@"							If ReadIni = """" Then");
        //                loStringBuilder.AppendLine(@"								ReadIni = ""##ERR""");
        //                loStringBuilder.AppendLine(@"							End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"							' Abort loop when item is found");
        //                loStringBuilder.AppendLine(@"							Exit Do");
        //                loStringBuilder.AppendLine(@"						End If");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"					' Abort If the end of the INI file is reached");
        //                loStringBuilder.AppendLine(@"					If objIniFile.AtEndOfStream Then Exit Do");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"					' Continue with next line");
        //                loStringBuilder.AppendLine(@"					strLine = Trim( objIniFile.ReadLine )");
        //                loStringBuilder.AppendLine(@"				Loop");
        //                loStringBuilder.AppendLine(@"				Exit Do");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		objIniFile.Close");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log strFilePath & "" doesn't exists. Exiting...""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");

        //            }
        //            break;
        //        default:
        //            {
        //                loStringBuilder.AppendLine(@"' **************************** !!!!! DO NOT DELETE !!!!!*******************************");
        //                loStringBuilder.AppendLine(@"' Company: Continental AG");
        //                loStringBuilder.AppendLine(@"' Script GUID: {EDB1128A-8302-4CB7-B24E-A26B79BB8954}");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' *******************************END    OF     SECTION*********************************");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' ******************************* DS multi-platform starter script (exact frame vers see below under 'Version') ********************************");
        //                loStringBuilder.AppendLine(@"' Filename: " + lsPackageId + @"_W10_starter.vbs");
        //                loStringBuilder.AppendLine(@"' ");
        //                loStringBuilder.AppendLine(@"' ALL YOU HAVE TO DO IS TO FILL IN THE PACKAGE INFO BELOW !!!");
        //                loStringBuilder.AppendLine(@"' DS branding keys: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\<DSPID>");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Build version 5.0.0.3");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Option Explicit");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Const ReadyForUse = True				' SET THIS CONSTANT TO TRUE ONLY AFTER THE PACKAGE IS READY FOR USAGE");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' define global constants");
        //                loStringBuilder.AppendLine(@"' *******************************************************************************");
        //                loStringBuilder.AppendLine(@"Const Version = ""5.0""					' Version of Starter Script");
        //                loStringBuilder.AppendLine(@"Const SCRIPTBUILD = ""5.0.0.3""				' Build Version of Starter Script");
        //                loStringBuilder.AppendLine(@"Const ForAppending = 8					' Needed for Logfile mode");
        //                loStringBuilder.AppendLine(@"Const HKEY_LOCAL_MACHINE = &H80000002			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_CLASSES_ROOT = &H80000000			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_CURRENT_USER = &H80000001			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_USERS = &H80000003				' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"Const HKEY_CURRENT_CONFIG = &H80000005			' Needed for Registry hive access");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");

        //                switch (lsPackageTypeId)
        //                {
        //                    case "551c4c56-805a-47df-9d8f-50f7dfbcd513":
        //                        //legacy


        //                        loStringBuilder.AppendLine(@"' Fill in package Infos below");
        //                        loStringBuilder.AppendLine(@"Const PackageID = """ + lsPackageId + @"""					' Specify DSPID of main package here; normally this is the folder name");
        //                        loStringBuilder.AppendLine(@"Const PackageName = """ + lsPackageName + @"""					' Specify package name and version of main package here, e.g. Mindmanager Pro 7.0.429.0");
        //                        loStringBuilder.AppendLine(@"Const Installers = ""%SourcePath%\" + lsInstallers.Replace(@"#", @"#%SourcePath%\") + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify installer with full path name including file extension. Support installer file types .msi, .msp, .exe and .bat");
        //                        loStringBuilder.AppendLine(@"							' Support path names %Systemdrive%,%SysRoot%,%SWRep%,%Sourcepath%,%ProgramFiles%,%ProgramFiles64%,%CurrUserProfile%,%CurrUserAppdata%,%MSILogDir%");
        //                        loStringBuilder.AppendLine(@"							' e.g. %Sourcepath%CA0000809.msi#%Sourcepath%$DSClient\Setup.exe");
        //                        loStringBuilder.AppendLine(@"							' 	Use prefix I:: if the package requires an InstallShield installation and the DCOM Server must be set to the Launching User instead of the Interactive User.");
        //                        loStringBuilder.AppendLine(@"							' 	Use prefix N:: if the script should exit if a native installation of the MSI is found.");
        //                        loStringBuilder.AppendLine(@"							' 	Use IN:: if both apply. Can also be a hash (#) separated list of MSI packages, e.g. %Sourcepath%isscript.msi#IN::%Sourcepath%CA0000809.msi");
        //                        loStringBuilder.AppendLine(@"Const Parameters = """ + lsInstallerParameters.Trim().Replace(@"""", @"""""") + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify installer parameters.Make sure full path name with file extension is specified");
        //                        loStringBuilder.AppendLine(@"							' e.g. %Sourcepath%$DSClient\CA0000809_MP_0000-T0001.mst#/S /Q");
        //                        loStringBuilder.AppendLine(@"Const LegacyCheck = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify file or registry to check if it exists. Append at the back :f for file or :r for registry");
        //                        loStringBuilder.AppendLine(@"							' Default checking is the Package DSPID registry entry.");
        //                        loStringBuilder.AppendLine(@"Const IgnoreNative = True");
        //                        loStringBuilder.AppendLine(@"Const SilentMSIMSP = " + lsSilentMSIMSP + @"				' Set to True if you want all MSI and patch installations/uninstall to run silent. If set to False, they are run with /qb!");
        //                        loStringBuilder.AppendLine(@"Const MultipleTargetPatch = False  			' Set this to True if the patch is a multiple target patch.");
        //                        loStringBuilder.AppendLine(@"							' Set this to False if the installation is done by the script and the wrapper only extracts the file.");
        //                        loStringBuilder.AppendLine(@"Const UninstallProduct = """ + lsUninstallKey + lsUninstallProduct + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify a MSI package - using productcode - to be uninstalled here, eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}");
        //                        loStringBuilder.AppendLine(@"							' Use prefix I:: if the uninstall requires an InstallShield installation and the DCOM Server must be set to the Launching User instead of the Interactive User.");
        //                        loStringBuilder.AppendLine(@"                                                        ' eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}#I::{DAA212AA-2F2B-4225-9223-222ABBBAAAAA}");
        //                        loStringBuilder.AppendLine(@"Const LegacyUninstall = ""%ProgramData%\Citrix\Citrix Receiver 4.4 LTSR\ReceiverCleanupUtility.exe#%ProgramData%\Citrix\Citrix Receiver\ReceiverCleanupUtility.exe""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the path and name of the uninstall setup file");
        //                        loStringBuilder.AppendLine(@"							' Use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' e.g :%SourcePath%$DSClient\Ipastall\setup.exe#%windir%\notepad.exe");
        //                        loStringBuilder.AppendLine(@"							' you can use %windir%\, %ProgramFiles% and %ProgramFiles(x86)% defined for 64 bit process, etc...");
        //                        loStringBuilder.AppendLine(@"Const AdditionalLegacyUninstallParameters = ""/silent#/silent""		' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify additional parameters for legacy Uninstall installation here.");
        //                        loStringBuilder.AppendLine(@"							' You can use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' !!Handle full path name with space using double quotes!!  eg. "" -s -f1""""%SourcePath%$DSClient\uninstall"""""" or");
        //                        loStringBuilder.AppendLine(@"							' "" -s -f1""""%SourcePath%$DSClient\uninstall.file""""#-s -f1""""%SourcePath%$DSClient\uninstall.file"""""" ");
        //                        loStringBuilder.AppendLine(@"Const RequiredProduct = """ + lsRequiredProduct + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the products required for this installation to run (e.g. DSPID of main package if a patch is installed)");
        //                        loStringBuilder.AppendLine(@"							' Can be either DSPID or ProductCode");
        //                        loStringBuilder.AppendLine(@"							' Support operators OR and AND by adding :o and :a before hash (#). The default operator is AND. e.g. ""OF0001234:a#CA0001234:o#SE0000123""");
        //                        loStringBuilder.AppendLine(@"Const RequiredProductName = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Required Product Name for the custom message.");
        //                        loStringBuilder.AppendLine(@"Const RequiredProductCustomMessageBox = """"		' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Custom message box which will be prompted to user if required product is not found.");
        //                        loStringBuilder.AppendLine(@"Const SetDefaultPath = ""%Sourcepath%""			' Set default path to custom directory. Default value is Sourcepath / Sometime landesk policy.invoker don't provide current directory and set this to c:\windows\system32 and not for the package source");
        //                        loStringBuilder.AppendLine(@"Const winlogonInst = False				' Check Winlogon prompt - start package in master mode(silent install) if nobody is logged ");
        //                        loStringBuilder.AppendLine(@"Const AllowLANDeskParameter = True			' Allow Landesk Parameter(s) - 1: Landesk Parameter: /Silent start package in master mode(silent install) if nobody is logged and !!quit with error code 1602 if user is logged!!");
        //                        loStringBuilder.AppendLine(@"							' this can be a problem for exe that build current directory path from parent process");
        //                        loStringBuilder.AppendLine(@"Const RequiredDiskSpace	= """ + lsRequiredDiskSpace + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"							' Measure in MB unit and support non-decimal value only.				");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the minimum required disk space on specified drives for installation. ");
        //                        loStringBuilder.AppendLine(@"                                                        ' 0 = no check. If requirement is not fullfilled message box is shown and installation will quit with errorcode 1602.");
        //                        loStringBuilder.AppendLine(@"Const DiskName = """ + lsDiskName + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify drive name for disk space checking.");
        //                        loStringBuilder.AppendLine(@"Const CheckForCAXHelpDesk = False			' If this is set to True a check will be done if the PC is member of the ""CDA_CATCAxHelpdesk"" group. If not a message is displayed and installation is cancelled.");
        //                        loStringBuilder.AppendLine(@"Const WaitForOpenProcesses = """ + lsProcessKill + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Script displays a message box to user and waits until all processes are closed.");
        //                        loStringBuilder.AppendLine(@"Const KillOpenProcesses = """ + lsProcessKill + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' These processes will be killed after warning the user 3 times with a message box that they are still open.");
        //                        loStringBuilder.AppendLine(@"Const StopServiceProcess = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' These processes will be stoped using the same 3 message box that KillOpenProcesses.");
        //                        loStringBuilder.AppendLine(@"Const NetworkSourcePath = """"				' Use this constant if you want to manually set the network sourcepath for the package in case of using ""download from source"" delivery methods for this package");
        //                        loStringBuilder.AppendLine(@"							' e.g. \\swrep.local.contiwan.com\SWRep\__DS\OF0200630");
        //                        loStringBuilder.AppendLine(@"							' If left empty, %DS_SWRep%\<PackageID> is used.");
        //                        loStringBuilder.AppendLine(@"Const MSIRollback = False				' Set this constant to True if you need to initialize a rollback in case of error during MSI installations. ");
        //                        loStringBuilder.AppendLine(@"							' The Rollback starts the uninstallation of the first MSI package which was installed with this script.");
        //                        loStringBuilder.AppendLine(@"Const StartMutex = True					' Specify if Mutex Tool should be used. True|False");
        //                        loStringBuilder.AppendLine(@"Const VulscanCheck = False				' Specify if start vulscan check. True|False");
        //                        loStringBuilder.AppendLine(@"Const LANDeskInventory = ""Both""				' Specify if and what type of LANDesk Inventory should be started after successful Package installation. (Default: Hardware)");
        //                        loStringBuilder.AppendLine(@"							' Values can be: Hardware   - start LANDesk Hardware Inventory");
        //                        loStringBuilder.AppendLine(@"							' 	Software   - start LANDesk Software Inventory");
        //                        loStringBuilder.AppendLine(@"							' 	Both       - start Hardware AND Software Inventory");
        //                        loStringBuilder.AppendLine(@"							' 	Empty ("""") - don't start any Inventory");
        //                        loStringBuilder.AppendLine(@"Const DSPIDKey = """ + lsPackageId + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Name of DSPID key to write, should be the same as PackageID. Only needed if MSI or MSP does not write DSPID. [String]");
        //                        loStringBuilder.AppendLine(@"Const DSPIDPublisher = """ + lsPackageName + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Publisher subkey ([ProductName]) of DSPID key in Registry. [String]");
        //                        loStringBuilder.AppendLine(@"Const DSPIDDisplayVersion = """ + lsReleaseName + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' DisplayVersion subkey [ProductVersion]) of DSPID key in Registry. [String] - optional");
        //                        loStringBuilder.AppendLine(@"Const DSPIDProductID = """ + lsUninstallKey + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' ProductID subkey [ProductCode]) of DSPID key in Registry. [String] - optional");
        //                        if (lsMainInstallFolderx86 != "")
        //                        {
        //                            loStringBuilder.AppendLine(@"Const DSPIDAppPath = """ + lsMainInstallFolderx86 + @"\""					' Can be a hash (#) separated list.");
        //                        }
        //                        else
        //                        {
        //                            loStringBuilder.AppendLine(@"Const DSPIDAppPath = """"					' Can be a hash (#) separated list.");
        //                        }
        //                        loStringBuilder.AppendLine(@"                                                        ' ApplicationPath subkey of DSPID key in Registry. [String] - optional");
        //                        loStringBuilder.AppendLine(@"Const DeleteDSPIDKey = """ + lsDeleteDSPIDKey + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Name of DSPID Key(s) to delete.  [String]");
        //                        loStringBuilder.AppendLine(@"Const ASKey = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Active Setup Key. [String]");
        //                        loStringBuilder.AppendLine(@"Const ASCommand = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Commandline for Active Setup Key. [String].");
        //                        loStringBuilder.AppendLine(@"							' !!! PLEASE ALWAYS USE /QB-! IF YOU SPECIFY A MSI COMMAND HERE !!!");
        //                        loStringBuilder.AppendLine(@"Const ASDeleteKey = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify here the list of ActiveSetup keys that will be deleted if the installation is successful.");
        //                        loStringBuilder.AppendLine(@"Const AscContext = 32 					' Define where is writed (ASKey) activesetup key and where is deleted activesetup(ASDeleteKey) !!!, default value for 32 bit system and 64 bit system is 32, ");
        //                        loStringBuilder.AppendLine(@"							' if you need to switch to 64 bit context for Active setup key change this value for 64");
        //                        loStringBuilder.AppendLine(@"Const AskVersion =  True 				' Using automatic versioning for active setup ,on each new install if the command ever needs to be re-executed.");
        //                        loStringBuilder.AppendLine(@"Const RebootComputer = " + lsRebootComputer + @"				' Set to True if you want the computer to reboot after a successful installation.");
        //                        loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_starter.ini files in the $DSClient directory.");
        //                        loStringBuilder.AppendLine(@"							' The <DSPID>_starter.ini file must be filled out accordingly!");
        //                        loStringBuilder.AppendLine(@"Const SupportedPlatformsMin = """ + lsSupportedPlatformsMin + @"""			' Set the minimum OS version support for package, XP=5.1,5.2 Vista=6.0 Win7=6.1 Win8=6.2,6.3 Win10=10");
        //                        loStringBuilder.AppendLine(@"Const SupportedPlatformsMax = """ + lsSupportedPlatformsMax + @"""			' Set the maximum OS version support for package, XP=5.1,5.2 Vista=6.0 Win7=6.1 Win8=6.2,6.3 Win10=10");
        //                        loStringBuilder.AppendLine(@"							' Set 0 to disable the maximum OS version checking.						");
        //                        loStringBuilder.AppendLine(@"Const PlatformsBitwise = ""both""				' Set Platform bitwise to either 32bit, 64bit or both.");
        //                        loStringBuilder.AppendLine(@"Const DisablePlatformCheck = False			' Set to False if you want to enable platform check.");
        //                        loStringBuilder.AppendLine(@"Const ShowMessageBoxPre = " + lsShowMessageBoxPre + @"				' Shows message box prior to running the installation. ");
        //                        loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_starter.ini in the $DSClient directory.");
        //                        loStringBuilder.AppendLine(@"							' The <DSPID>_starter.ini file must be filled out accordingly!");
        //                        loStringBuilder.AppendLine(@"Const ShowMessageBoxPost = " + lsShowMessageBoxPost + @"			' Shows message box after running the installation (only if no reboot is scheduled; if reboot is schedule, reboot message box is shown!)");
        //                        loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_starter.ini in the $DSClient directory.");
        //                        loStringBuilder.AppendLine(@"							' The <DSPID>_starter.ini file must be filled out accordingly!");
        //                        loStringBuilder.AppendLine(@"Const ShowProgressBar = " + lsShowProgressBar + @"				' Set to True if you want to show a progress bar during installation. Requires DS_SIE.exe on the client.");
        //                        loStringBuilder.AppendLine(@"Const EnableCustomMessageBox = True			' Set to False if you want to hide the message box prompted for RequiredProduct and RequiredDiskSpace.");



        //                        break;
        //                    default:
        //                        loStringBuilder.AppendLine(@"' Fill in package Infos below");
        //                        loStringBuilder.AppendLine(@"Const PackageID = """ + lsPackageId + @"""					' Specify DSPID of main package here; normally this is the folder name");
        //                        loStringBuilder.AppendLine(@"Const PackageName = """ + lsPackageName + @"""					' Specify package name and version of main package here, e.g. Mindmanager Pro 7.0.429.0");
        //                        loStringBuilder.AppendLine(@"Const Installers = ""%SourcePath%\" + lsInstallers.Replace(@"#", @"#%SourcePath%\") + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify installer with full path name including file extension. Support installer file types .msi, .msp, .exe and .bat");
        //                        loStringBuilder.AppendLine(@"							' Support path names %Systemdrive%,%SysRoot%,%SWRep%,%Sourcepath%,%ProgramFiles%,%ProgramFiles64%,%CurrUserProfile%,%CurrUserAppdata%,%MSILogDir%");
        //                        loStringBuilder.AppendLine(@"							' e.g. %Sourcepath%CA0000809.msi#%Sourcepath%$DSClient\Setup.exe");
        //                        loStringBuilder.AppendLine(@"							' 	Use prefix I:: if the package requires an InstallShield installation and the DCOM Server must be set to the Launching User instead of the Interactive User.");
        //                        loStringBuilder.AppendLine(@"							' 	Use prefix N:: if the script should exit if a native installation of the MSI is found.");
        //                        loStringBuilder.AppendLine(@"							' 	Use IN:: if both apply. Can also be a hash (#) separated list of MSI packages, e.g. %Sourcepath%isscript.msi#IN::%Sourcepath%CA0000809.msi");
        //                        loStringBuilder.AppendLine(@"Const Parameters = """ + lsInstallerParameters.Trim().Replace(@"""", @"""""") + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify installer parameters.Make sure full path name with file extension is specified");
        //                        loStringBuilder.AppendLine(@"							' e.g. %Sourcepath%$DSClient\CA0000809_MP_0000-T0001.mst#/S /Q");
        //                        loStringBuilder.AppendLine(@"Const LegacyCheck = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify file or registry to check if it exists. Append at the back :f for file or :r for registry");
        //                        loStringBuilder.AppendLine(@"							' Default checking is the Package DSPID registry entry.");
        //                        loStringBuilder.AppendLine(@"Const IgnoreNative = True");
        //                        loStringBuilder.AppendLine(@"Const SilentMSIMSP = " + lsSilentMSIMSP + @"				' Set to True if you want all MSI and patch installations/uninstall to run silent. If set to False, they are run with /qb!");
        //                        loStringBuilder.AppendLine(@"Const MultipleTargetPatch = False  			' Set this to True if the patch is a multiple target patch.");
        //                        loStringBuilder.AppendLine(@"							' Set this to False if the installation is done by the script and the wrapper only extracts the file.");
        //                        loStringBuilder.AppendLine(@"Const UninstallProduct = """ + lsUninstallKey + lsUninstallProduct + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify a MSI package - using productcode - to be uninstalled here, eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}");
        //                        loStringBuilder.AppendLine(@"							' Use prefix I:: if the uninstall requires an InstallShield installation and the DCOM Server must be set to the Launching User instead of the Interactive User.");
        //                        loStringBuilder.AppendLine(@"                                                        ' eg. {DE2AB21A-7F3B-4485-9223-84F219DA4C4A}#I::{DAA212AA-2F2B-4225-9223-222ABBBAAAAA}");
        //                        loStringBuilder.AppendLine(@"Const LegacyUninstall = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the path and name of the uninstall setup file");
        //                        loStringBuilder.AppendLine(@"							' Use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' e.g :%SourcePath%$DSClient\Ipastall\setup.exe#%windir%\notepad.exe");
        //                        loStringBuilder.AppendLine(@"							' you can use %windir%\, %ProgramFiles% and %ProgramFiles(x86)% defined for 64 bit process, etc...");
        //                        loStringBuilder.AppendLine(@"Const AdditionalLegacyUninstallParameters = """"		' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify additional parameters for legacy Uninstall installation here.");
        //                        loStringBuilder.AppendLine(@"							' You can use %SourcePath% to specify the path to the source path of the package");
        //                        loStringBuilder.AppendLine(@"							' !!Handle full path name with space using double quotes!!  eg. "" -s -f1""""%SourcePath%$DSClient\uninstall"""""" or");
        //                        loStringBuilder.AppendLine(@"							' "" -s -f1""""%SourcePath%$DSClient\uninstall.file""""#-s -f1""""%SourcePath%$DSClient\uninstall.file"""""" ");
        //                        loStringBuilder.AppendLine(@"Const RequiredProduct = """ + lsRequiredProduct + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the products required for this installation to run (e.g. DSPID of main package if a patch is installed)");
        //                        loStringBuilder.AppendLine(@"							' Can be either DSPID or ProductCode");
        //                        loStringBuilder.AppendLine(@"							' Support operators OR and AND by adding :o and :a before hash (#). The default operator is AND. e.g. ""OF0001234:a#CA0001234:o#SE0000123""");
        //                        loStringBuilder.AppendLine(@"Const RequiredProductName = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Required Product Name for the custom message.");
        //                        loStringBuilder.AppendLine(@"Const RequiredProductCustomMessageBox = """"		' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Custom message box which will be prompted to user if required product is not found.");
        //                        loStringBuilder.AppendLine(@"Const SetDefaultPath = ""%Sourcepath%""			' Set default path to custom directory. Default value is Sourcepath / Sometime landesk policy.invoker don't provide current directory and set this to c:\windows\system32 and not for the package source");
        //                        loStringBuilder.AppendLine(@"Const winlogonInst = False				' Check Winlogon prompt - start package in master mode(silent install) if nobody is logged ");
        //                        loStringBuilder.AppendLine(@"Const AllowLANDeskParameter = True			' Allow Landesk Parameter(s) - 1: Landesk Parameter: /Silent start package in master mode(silent install) if nobody is logged and !!quit with error code 1602 if user is logged!!");
        //                        loStringBuilder.AppendLine(@"							' this can be a problem for exe that build current directory path from parent process");
        //                        loStringBuilder.AppendLine(@"Const RequiredDiskSpace	= """ + lsRequiredDiskSpace + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"							' Measure in MB unit and support non-decimal value only.				");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify the minimum required disk space on specified drives for installation. ");
        //                        loStringBuilder.AppendLine(@"                                                        ' 0 = no check. If requirement is not fullfilled message box is shown and installation will quit with errorcode 1602.");
        //                        loStringBuilder.AppendLine(@"Const DiskName = """ + lsDiskName + @"""					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Specify drive name for disk space checking.");
        //                        loStringBuilder.AppendLine(@"Const CheckForCAXHelpDesk = False			' If this is set to True a check will be done if the PC is member of the ""CDA_CATCAxHelpdesk"" group. If not a message is displayed and installation is cancelled.");
        //                        loStringBuilder.AppendLine(@"Const WaitForOpenProcesses = """ + lsProcessKill + lsWaitForOpenProcesses + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Script displays a message box to user and waits until all processes are closed.");
        //                        loStringBuilder.AppendLine(@"Const KillOpenProcesses = """ + lsProcessKill + @"""				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' These processes will be killed after warning the user 3 times with a message box that they are still open.");
        //                        loStringBuilder.AppendLine(@"Const StopServiceProcess = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' These processes will be stoped using the same 3 message box that KillOpenProcesses.");
        //                        loStringBuilder.AppendLine(@"Const NetworkSourcePath = """"				' Use this constant if you want to manually set the network sourcepath for the package in case of using ""download from source"" delivery methods for this package");
        //                        loStringBuilder.AppendLine(@"							' e.g. \\swrep.local.contiwan.com\SWRep\__DS\OF0200630");
        //                        loStringBuilder.AppendLine(@"							' If left empty, %DS_SWRep%\<PackageID> is used.");
        //                        loStringBuilder.AppendLine(@"Const MSIRollback = False				' Set this constant to True if you need to initialize a rollback in case of error during MSI installations. ");
        //                        loStringBuilder.AppendLine(@"							' The Rollback starts the uninstallation of the first MSI package which was installed with this script.");
        //                        loStringBuilder.AppendLine(@"Const StartMutex = True					' Specify if Mutex Tool should be used. True|False");
        //                        loStringBuilder.AppendLine(@"Const VulscanCheck = False				' Specify if start vulscan check. True|False");
        //                        loStringBuilder.AppendLine(@"Const LANDeskInventory = ""Both""				' Specify if and what type of LANDesk Inventory should be started after successful Package installation. (Default: Hardware)");
        //                        loStringBuilder.AppendLine(@"							' Values can be: Hardware   - start LANDesk Hardware Inventory");
        //                        loStringBuilder.AppendLine(@"							' 	Software   - start LANDesk Software Inventory");
        //                        loStringBuilder.AppendLine(@"							' 	Both       - start Hardware AND Software Inventory");
        //                        loStringBuilder.AppendLine(@"							' 	Empty ("""") - don't start any Inventory");
        //                        loStringBuilder.AppendLine(@"Const DSPIDKey = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Name of DSPID key to write, should be the same as PackageID. Only needed if MSI or MSP does not write DSPID. [String]");
        //                        loStringBuilder.AppendLine(@"Const DSPIDPublisher = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Publisher subkey ([ProductName]) of DSPID key in Registry. [String]");
        //                        loStringBuilder.AppendLine(@"Const DSPIDDisplayVersion = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' DisplayVersion subkey [ProductVersion]) of DSPID key in Registry. [String] - optional");
        //                        loStringBuilder.AppendLine(@"Const DSPIDProductID = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' ProductID subkey [ProductCode]) of DSPID key in Registry. [String] - optional");
        //                        loStringBuilder.AppendLine(@"Const DSPIDAppPath = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' ApplicationPath subkey of DSPID key in Registry. [String] - optional");
        //                        loStringBuilder.AppendLine(@"Const DeleteDSPIDKey = """"				' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Name of DSPID Key(s) to delete.  [String]");
        //                        loStringBuilder.AppendLine(@"Const ASKey = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Active Setup Key. [String]");
        //                        loStringBuilder.AppendLine(@"Const ASCommand = """"					' Can be a hash (#) separated list.");
        //                        loStringBuilder.AppendLine(@"                                                        ' Commandline for Active Setup Key. [String].");
        //                        loStringBuilder.AppendLine(@"							' !!! PLEASE ALWAYS USE /QB-! IF YOU SPECIFY A MSI COMMAND HERE !!!");

        //                        if (lsDeleteDSPIDKey == "")
        //                        {
        //                            loStringBuilder.AppendLine(@"Const ASDeleteKey = """"					' Can be a hash (#) separated list.");
        //                        }
        //                        else
        //                        {
        //                            loStringBuilder.AppendLine(@"Const ASDeleteKey = """ + lsDeleteDSPIDKey + @"""					' Can be a hash (#) separated list.");
        //                        }

        //                        loStringBuilder.AppendLine(@"                                                        ' Specify here the list of ActiveSetup keys that will be deleted if the installation is successful.");
        //                        loStringBuilder.AppendLine(@"Const AscContext = 32 					' Define where is writed (ASKey) activesetup key and where is deleted activesetup(ASDeleteKey) !!!, default value for 32 bit system and 64 bit system is 32, ");
        //                        loStringBuilder.AppendLine(@"							' if you need to switch to 64 bit context for Active setup key change this value for 64");
        //                        loStringBuilder.AppendLine(@"Const AskVersion =  True 				' Using automatic versioning for active setup ,on each new install if the command ever needs to be re-executed.");
        //                        loStringBuilder.AppendLine(@"Const RebootComputer = " + lsRebootComputer + @"				' Set to True if you want the computer to reboot after a successful installation.");
        //                        loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_starter.ini files in the $DSClient directory.");
        //                        loStringBuilder.AppendLine(@"							' The <DSPID>_starter.ini file must be filled out accordingly!");
        //                        loStringBuilder.AppendLine(@"Const SupportedPlatformsMin = """ + lsSupportedPlatformsMin + @"""			' Set the minimum OS version support for package, XP=5.1,5.2 Vista=6.0 Win7=6.1 Win8=6.2,6.3 Win10=10");
        //                        loStringBuilder.AppendLine(@"Const SupportedPlatformsMax = """ + lsSupportedPlatformsMax + @"""			' Set the maximum OS version support for package, XP=5.1,5.2 Vista=6.0 Win7=6.1 Win8=6.2,6.3 Win10=10");
        //                        loStringBuilder.AppendLine(@"							' Set 0 to disable the maximum OS version checking.						");
        //                        loStringBuilder.AppendLine(@"Const PlatformsBitwise = ""both""				' Set Platform bitwise to either 32bit, 64bit or both.");
        //                        loStringBuilder.AppendLine(@"Const DisablePlatformCheck = False			' Set to False if you want to enable platform check.");
        //                        loStringBuilder.AppendLine(@"Const ShowMessageBoxPre = " + lsShowMessageBoxPre + "				' Shows message box prior to running the installation. ");
        //                        loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_starter.ini in the $DSClient directory.");
        //                        loStringBuilder.AppendLine(@"							' The <DSPID>_starter.ini file must be filled out accordingly!");
        //                        loStringBuilder.AppendLine(@"Const ShowMessageBoxPost = " + lsShowMessageBoxPost + @"			' Shows message box after running the installation (only if no reboot is scheduled; if reboot is schedule, reboot message box is shown!)");
        //                        loStringBuilder.AppendLine(@"							' Requires DS_SIE.exe on the client and <DSPID>_starter.ini in the $DSClient directory.");
        //                        loStringBuilder.AppendLine(@"							' The <DSPID>_starter.ini file must be filled out accordingly!");
        //                        loStringBuilder.AppendLine(@"Const ShowProgressBar = " + lsShowProgressBar + @"				' Set to True if you want to show a progress bar during installation. Requires DS_SIE.exe on the client.");
        //                        loStringBuilder.AppendLine(@"Const EnableCustomMessageBox = True			' Set to False if you want to hide the message box prompted for RequiredProduct and RequiredDiskSpace.");
        //                        loStringBuilder.AppendLine(@"");
        //                        break;
        //                }
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' global variables for objects");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim fso, wso, WshNetwork, objInstaller");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' global variables for directories and user infos");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim Computername		' Computername as String");
        //                loStringBuilder.AppendLine(@"Dim Username			' Name of user (without domain name) who started this script as String");
        //                loStringBuilder.AppendLine(@"Dim Systemdrive			' Drive where Windows is installed, e.g. C: without ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SysRoot			' Path to Systemroot ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SWRep			' Path to Software Repository ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim Sourcepath			' Sourcepath of Script ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim Logfilename			' Name of the Logfile including full path as String (used only internally)");
        //                loStringBuilder.AppendLine(@"Dim IniFileName			' Name of the IniFile including full path as String (used only internally)");
        //                loStringBuilder.AppendLine(@"Dim ProgramFiles		' Path to 32-bit Programfiles folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim ProgramFiles64		' Path to 64-bit Programfiles folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SystemFolder		' Path to 32-bit System32 folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim SystemFolder64		' Path to 64-bit System32 folder ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim FreeDiskSpace		' Amount of free space on System drive in MB");
        //                loStringBuilder.AppendLine(@"Dim MSILogDir			' Directory for the MSI logfile ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim InstallerVersion		' Version of windows installer (msiexec.exe) as String");
        //                loStringBuilder.AppendLine(@"Dim CurrUserProfile		' Current login user profile ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim CurrUserAppdata		' Current login user AppData ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim CurrUserLocalAppdata	' Current login user LocalAppData ending with ""\"" as String");
        //                loStringBuilder.AppendLine(@"Dim ALLUSERSPROFILE		' Allusers profile ending with ""\"" as String	");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' global temporary variables");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim check, pbPID, pbMsg, CustPID, InstallSwitch, arrLogFiles, aLogFile, bitWise, OSVer");
        //                loStringBuilder.AppendLine(@"Dim MSIReturnCode, UninstallReturnCode, PatchReturnCode, LegacyReturnCode, ZoneCheckDisabled");
        //                loStringBuilder.AppendLine(@"Dim ProductMatrix, ClientPlatform, ShowMessageBoxes, WaitToKillProcess, StopLANDeskInventory");
        //                loStringBuilder.AppendLine(@"Dim DCOMInstallShieldAppIDs");
        //                loStringBuilder.AppendLine(@"Dim Insts, InstParameters, strPara, iloop, chk, ReturnCode, DotPoz");
        //                loStringBuilder.AppendLine(@"Dim arrFolders(), intSize");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' get basic objects");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Set fso = CreateObject( ""Scripting.FileSystemObject"" )");
        //                loStringBuilder.AppendLine(@"Set wso = WScript.CreateObject( ""WScript.Shell"" )");
        //                loStringBuilder.AppendLine(@"Set WshNetwork = WScript.CreateObject(""WScript.Network"")");
        //                loStringBuilder.AppendLine(@"Set objInstaller = CreateObject(""WindowsInstaller.Installer"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Get OS Architecture vs Processor ARCHITECTURE");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"Dim PROC_ARCH1 : PROC_ARCH1 = UCASE( wso.ExpandEnvironmentStrings(""%PROCESSOR_ARCHITECTURE%"") )	'detect OS PROCESSOR ARCHITECTURE");
        //                loStringBuilder.AppendLine(@"Dim PROC_ARCH2 : PROC_ARCH2 = UCASE( wso.ExpandEnvironmentStrings(""%PROCESSOR_ARCHITEW6432%"") ) 'detect OS PROCESSOR ARCHITECTURE");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' start execution");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' run prerequisites -- Do not add anything in front of this block !!!");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"'Set ReturnCode default value");
        //                loStringBuilder.AppendLine(@"ReturnCode = -1");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Mandatory function to initialize variables, must be first, do not touch!");
        //                loStringBuilder.AppendLine(@"If InitializeLogfile = False Then");
        //                loStringBuilder.AppendLine(@"	write2Log(""WARNING: Some of your environment variables could not be read!"")");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Disable IE zone checks");
        //                loStringBuilder.AppendLine(@"ZoneCheckDisabled = DisableIEZoneChecks(True)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Set default path");
        //                loStringBuilder.AppendLine(@"SetdefaultpathSrc()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Check for silent install mode and LANdesk paramater(s)");
        //                loStringBuilder.AppendLine(@"CheckSilentInstallation()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Query for installed products (ProductMatrix)");
        //                loStringBuilder.AppendLine(@"BuildInstalledProductMatrix(UninstallProduct)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' End of Mandatory Function to initialize variables, must be first, do not touch!");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Show message box");
        //                loStringBuilder.AppendLine(@"If ShowMessageBoxPre = True Then");
        //                loStringBuilder.AppendLine(@"	ShowMessagePre");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Wait for user to close open applications if necessary");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------");
        //                loStringBuilder.AppendLine(@"HandlingUserforkillApp()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Display progress bar if pre-installation actions are taking too long ");
        //                loStringBuilder.AppendLine(@"If ShowProgressBar = True Then");
        //                loStringBuilder.AppendLine(@"	' If you want to display a custom message, call DisplayCustomProgressBar instead of DisplayProgressBar(1):");
        //                loStringBuilder.AppendLine(@"	' pbPID = DisplayProgressBar(1)");
        //                loStringBuilder.AppendLine(@"	' pbMsg: Display progress bar custom message");
        //                loStringBuilder.AppendLine(@"	pbMsg = PackageName & "" installation is in the progress ...""");
        //                loStringBuilder.AppendLine(@"	pbPID = DisplayCustomProgressBar(pbMsg)	");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' ***********************************************************************************************");
        //                loStringBuilder.AppendLine(@"' Run additional checks before installatons - optional block, can be modified by package creator (Using Function provided by the MP framework)");
        //                loStringBuilder.AppendLine(@"' ***********************************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Run uninstallations");
        //                loStringBuilder.AppendLine(@"UninstallReturnCode = StartUninstallations()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Check for pending reboot before installation - Return True or False");
        //                loStringBuilder.AppendLine(@"check = PendingReboot ' if PendingReboot then ....");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' End of additional checks before installation");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' Run installations");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Start installation with sequence");
        //                loStringBuilder.AppendLine(@"Insts = Split(Installers,""#"")");
        //                loStringBuilder.AppendLine(@"If Parameters <> """" Then InstParameters = Split(Parameters,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Write2Log("""")");
        //                loStringBuilder.AppendLine(@"Write2Log(""---------------------Start Installation----------------------"")");
        //                loStringBuilder.AppendLine(@"For iloop = 0 To UBound(Insts)");
        //                loStringBuilder.AppendLine(@"	'Check if vulscan is running");
        //                loStringBuilder.AppendLine(@"	If CheckProcess(""VULSCAN.EXE"") Then Write2Log(""Vulscan found running ..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Check and pause instalaltion if vulscan or msi is running");
        //                loStringBuilder.AppendLine(@"	PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Check for installer type");
        //                loStringBuilder.AppendLine(@"	DotPoz = InstrRev(Insts(iloop), ""."")");
        //                loStringBuilder.AppendLine(@"	chk = Right(Insts(iloop), Len(Insts(iloop)) - DotPoz)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPara = """"");
        //                loStringBuilder.AppendLine(@"	If Parameters <> """" Then ");
        //                loStringBuilder.AppendLine(@"		strPara = InstParameters(iloop)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case LCase(chk)");
        //                loStringBuilder.AppendLine(@"		Case ""msi""");
        //                loStringBuilder.AppendLine(@"			ReturnCode = StartMSIInstallations(Insts(iloop), strPara)");
        //                loStringBuilder.AppendLine(@"		Case ""msp""");
        //                loStringBuilder.AppendLine(@"			ReturnCode = StartPatchInstallations(Insts(iloop), strPara)");
        //                loStringBuilder.AppendLine(@"		Case ""exe"", ""bat""");
        //                loStringBuilder.AppendLine(@"			ReturnCode = StartLegacySetup(Insts(iloop), strPara)");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2Log(""Return code for installation "" & ParseConst(Insts(iloop)) & "" : "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"	write2Log(""-------------------------------------------------------------------------------------"")");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	If Not (ReturnCode = 0 or ReturnCode = 3010) Then Exit For");
        //                loStringBuilder.AppendLine(@"Next");
        //                loStringBuilder.AppendLine(@"Write2Log(""---------------------End Installation------------------------"")");
        //                loStringBuilder.AppendLine(@"Write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Post installation tasks - optional block, can be modified by package creator");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Final installation checks");
        //                loStringBuilder.AppendLine(@"' *****************************************************************************");
        //                loStringBuilder.AppendLine(@"' Write all DSPID keys in case of install success");
        //                loStringBuilder.AppendLine(@"	DeleteDSPID(DeleteDSPIDKey)");
        //                loStringBuilder.AppendLine(@"	WriteDSPID()");
        //                loStringBuilder.AppendLine(@"	DeleteAS()");
        //                loStringBuilder.AppendLine(@"	WriteAS()");
        //                loStringBuilder.AppendLine(@"	If (LANDeskInventory <> """") And (StopLANDeskInventory = False) Then StartLANDeskInventory()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If RebootComputer Then ");
        //                loStringBuilder.AppendLine(@"		LANDeskSDCLIENT(""Reboot initiated by DS_SIE."")");
        //                loStringBuilder.AppendLine(@"		Reboot(ReturnCode)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		' Show message box after installation");
        //                loStringBuilder.AppendLine(@"		If ShowMessageBoxPost = True Then");
        //                loStringBuilder.AppendLine(@"			ShowMessagePost");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objInstaller = Nothing");
        //                loStringBuilder.AppendLine(@"	ExitScript ""End of MP starter script for "" & PackageID & "". Installation was successful without reboot. "", ReturnCode");
        //                loStringBuilder.AppendLine(@"Else");
        //                loStringBuilder.AppendLine(@"	Set objInstaller = Nothing");
        //                loStringBuilder.AppendLine(@"	ExitScript ""End of MP starter script for "" & PackageID & "". Installation was not successful! "", ReturnCode");
        //                loStringBuilder.AppendLine(@"End If");
        //                loStringBuilder.AppendLine(@"' *********************************End of main Function********************************************");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' ********************************* Functions & Sub ************************************************");
        //                loStringBuilder.AppendLine(@"' **************************************************************************************************");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ParseConst");
        //                loStringBuilder.AppendLine(@"' Function:	To replace the variables in const with actual value");
        //                loStringBuilder.AppendLine(@"' Parameter:   	Strconst");
        //                loStringBuilder.AppendLine(@"' Return:       String");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ParseConst(Strconst)");
        //                loStringBuilder.AppendLine(@"	Dim tmpVar, tmpVal");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%Systemdrive%"",Systemdrive,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SysRoot%"",SysRoot,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SWRep%"",SWRep,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%Sourcepath%"",Sourcepath,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ProgramFiles%"",ProgramFiles,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ProgramFiles64%"",ProgramFiles64,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%CurrUserProfile%"",CurrUserProfile,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%CurrUserAppdata%"",CurrUserAppdata,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%CurrUserLocalAppdata%"",CurrUserLocalAppdata,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ALLUSERSPROFILE%"",ALLUSERSPROFILE,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%MSILogDir%"",MSILogDir,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SystemFolder%"",SystemFolder,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%SystemFolder64%"",SystemFolder64,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%ProgramData%"",ALLUSERSPROFILE,1,-1,1)");
        //                loStringBuilder.AppendLine(@"	Strconst = Replace(Strconst,""%MSILogDir%"",MSILogDir,1,-1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(Strconst, ""%"") > 0 Then");
        //                loStringBuilder.AppendLine(@"		tmpVar = Mid(Strconst, InStr(Strconst, ""%""), InStrRev(Strconst, ""%""))");
        //                loStringBuilder.AppendLine(@"		tmpVal = wso.ExpandEnvironmentStrings(tmpVar)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If tmpVal = tmpVar Then ");
        //                loStringBuilder.AppendLine(@"			tmpVal = """"");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			If Right(tmpVal,1) <> ""\"" Then tmpVal = tmpVal & ""\""");
        //                loStringBuilder.AppendLine(@"			Strconst = tmpVal & Right(Strconst, Len(Strconst) - InStrRev(Strconst, ""%""))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ParseConst = Strconst");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: PreInstallCheck");
        //                loStringBuilder.AppendLine(@"' Function:	Check for running vulscan and mutex");
        //                loStringBuilder.AppendLine(@"' Parameter:   	");
        //                loStringBuilder.AppendLine(@"' Return:       ");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"	' Check if Vulscan is running at the background. Installation will continue once the vulscan is completed.");
        //                loStringBuilder.AppendLine(@"	If VulscanCheck Then");
        //                loStringBuilder.AppendLine(@"		Dim cp, timeOut");
        //                loStringBuilder.AppendLine(@"		cp = CheckProcess(""VULSCAN.EXE"")");
        //                loStringBuilder.AppendLine(@"		If cp = True Then CustPID = DisplayCustomProgressBar(""Vulscan is found running.Installation will continue once it is completed."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		timeOut = 0");
        //                loStringBuilder.AppendLine(@"		While cp");
        //                loStringBuilder.AppendLine(@"			write2Log(""Vulscan is found running... Waiting for vulscan to complete."")");
        //                loStringBuilder.AppendLine(@"			Wscript.Sleep 10000");
        //                loStringBuilder.AppendLine(@"			cp = CheckProcess(""VULSCAN.EXE"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			timeOut = timeOut + 10000");
        //                loStringBuilder.AppendLine(@"			' Exit loop after 15 minutes");
        //                loStringBuilder.AppendLine(@"			If (timeOut > 900000) Then");
        //                loStringBuilder.AppendLine(@"				KillProgressBar(CustPID)");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Timeout received from vulscan check. Exiting..."", 1602 : Err.Clear");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Wend");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		KillProgressBar(CustPID)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Check if there is other MSI installation in the progress.");
        //                loStringBuilder.AppendLine(@"	If StartMutex Then");
        //                loStringBuilder.AppendLine(@"		Dim mm");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		mm = MSIMutex()");
        //                loStringBuilder.AppendLine(@"		If mm = True Then CustPID = DisplayCustomProgressBar(""Another MSI installation is in progress.Installation will continue once it is completed."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		While mm");
        //                loStringBuilder.AppendLine(@"			Write2Log(""Another MSI installation is in progress. Waiting 10 seconds."")");
        //                loStringBuilder.AppendLine(@"			Wscript.Sleep 10000");
        //                loStringBuilder.AppendLine(@"			mm = MSIMutex()");
        //                loStringBuilder.AppendLine(@"		Wend");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		KillProgressBar(CustPID)");
        //                loStringBuilder.AppendLine(@"		write2Log(VbTab & ""=> No other running MSI installations found now..."")");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CustomMessageBox");
        //                loStringBuilder.AppendLine(@"' Function:	To prompt custom message with the Timeout support");
        //                loStringBuilder.AppendLine(@"' Parameter:   	strText,[nSecondsToWait],[strTitle],[nType]");
        //                loStringBuilder.AppendLine(@"' Return:       intButton, number of the button that the user clicked, -1 if timed out");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CustomMessageBox(strText, timeouts, strTitle, iconType)");
        //                loStringBuilder.AppendLine(@"	Dim msg, btnrtn, buttonClicked");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	btnrtn = -1");
        //                loStringBuilder.AppendLine(@"	If IsNull(strText) Then strText = ""For support call your local servicedesk.""");
        //                loStringBuilder.AppendLine(@"	If IsNull(timeouts) Then timeouts = 10800");
        //                loStringBuilder.AppendLine(@"	If IsNull(strTitle) Then strTitle = ""Software Installation - "" & PackageID");
        //                loStringBuilder.AppendLine(@"	If IsNull(iconType) Then iconType = vbOKOnly + vbCritical");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	msg = ""The installation of "" & PackageName & "" has been interrupted."" & vbCrLf & vbCrLf & strText");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (ShowMessageBoxes = True) And (EnableCustomMessageBox = True) Then");
        //                loStringBuilder.AppendLine(@"		'For detail on message customization, refer to http://msdn.microsoft.com/en-us/library/x83z1d9f(v=vs.84).aspx");
        //                loStringBuilder.AppendLine(@"		'Default nType set to OK button, Stop Mark icon. 0 + 16 = 16");
        //                loStringBuilder.AppendLine(@"		btnrtn = wso.Popup(msg, timeouts, strTitle, iconType)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case btnrtn");
        //                loStringBuilder.AppendLine(@"		Case -1 buttonClicked = ""Timed Out, no""");
        //                loStringBuilder.AppendLine(@"		Case 1 buttonClicked = ""OK""");
        //                loStringBuilder.AppendLine(@"		Case 2 buttonClicked = ""Cancel""");
        //                loStringBuilder.AppendLine(@"		Case 3 buttonClicked = ""Abort""");
        //                loStringBuilder.AppendLine(@"		Case 4 buttonClicked = ""Retry""");
        //                loStringBuilder.AppendLine(@"		Case 5 buttonClicked = ""Ignore""");
        //                loStringBuilder.AppendLine(@"		Case 6 buttonClicked = ""Yes""");
        //                loStringBuilder.AppendLine(@"		Case 7 buttonClicked = ""No""");
        //                loStringBuilder.AppendLine(@"		Case 10 buttonClicked = ""Try Again""");
        //                loStringBuilder.AppendLine(@"		Case 11 buttonClicked = ""Continue""	");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2log(""Custom message box: "" & buttonClicked & "" button clicked, "" & btnrtn)");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	CustomMessageBox = btnrtn");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Messagebox");
        //                loStringBuilder.AppendLine(@"' Function:	To prompt message with the Timeout support");
        //                loStringBuilder.AppendLine(@"' Parameter:   	strText,[nSecondsToWait],[strTitle],[nType]");
        //                loStringBuilder.AppendLine(@"' Return:       intButton, number of the button that the user clicked, -1 if timed out");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function MessageBox (strText)");
        //                loStringBuilder.AppendLine(@"	Dim btnrtn, buttonClicked, timeouts, strTitle, iconType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	btnrtn = -1");
        //                loStringBuilder.AppendLine(@"	timeouts = 10800");
        //                loStringBuilder.AppendLine(@"	strTitle = PackageName");
        //                loStringBuilder.AppendLine(@"	'OK button only, information icon, alwaysOnTop");
        //                loStringBuilder.AppendLine(@"	'0 + 64 + 4096");
        //                loStringBuilder.AppendLine(@"	iconType = vbOKOnly + vbExclamation + vbSystemModal");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	btnrtn = wso.Popup(strText, timeouts, strTitle, iconType)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case btnrtn");
        //                loStringBuilder.AppendLine(@"		Case -1 buttonClicked = ""Timed Out, no""");
        //                loStringBuilder.AppendLine(@"		Case 1 buttonClicked = ""OK""");
        //                loStringBuilder.AppendLine(@"		Case 2 buttonClicked = ""Cancel""");
        //                loStringBuilder.AppendLine(@"		Case 3 buttonClicked = ""Abort""");
        //                loStringBuilder.AppendLine(@"		Case 4 buttonClicked = ""Retry""");
        //                loStringBuilder.AppendLine(@"		Case 5 buttonClicked = ""Ignore""");
        //                loStringBuilder.AppendLine(@"		Case 6 buttonClicked = ""Yes""");
        //                loStringBuilder.AppendLine(@"		Case 7 buttonClicked = ""No""");
        //                loStringBuilder.AppendLine(@"		Case 10 buttonClicked = ""Try Again""");
        //                loStringBuilder.AppendLine(@"		Case 11 buttonClicked = ""Continue""	");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2log(""Message box prompted: "" & buttonClicked & "" button clicked, "" & btnrtn)");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	MessageBox = btnrtn");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckSilentInstallation");
        //                loStringBuilder.AppendLine(@"' Function: 1 - If winlogonInst is True, Start as silent install if nobody is logged, or if user is logged start with standard setting configuration. like ds_sie messagebox. (see release note)");
        //                loStringBuilder.AppendLine(@"' Function: 2 - If AllowLANDeskParameter is True, check if the script is started with /Silent parameter -> Start silent install if nobody is logged or quit with error 1602 if user is logged. (see release note)");
        //                loStringBuilder.AppendLine(@"' Parameter:   	Using Global Const: winlogonInst, AllowLANDeskParameter");
        //                loStringBuilder.AppendLine(@"' Parameter:   	from command line of vbscript: /Silent");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub CheckSilentInstallation()");
        //                loStringBuilder.AppendLine(@"	' Start as silent install if nobody is logged, or if user is logged start with standard setting configuration. like ds_sie messagebox. (see release note)");
        //                loStringBuilder.AppendLine(@"	If winlogonInst Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info: switch this package to silent if nobody is logged""");
        //                loStringBuilder.AppendLine(@"		If AllowLANDeskParameter = True Then ");
        //                loStringBuilder.AppendLine(@"			If LandeskSilent = False Then");
        //                loStringBuilder.AppendLine(@"				SilentInst()");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			SilentInst()");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	'If AllowLANDeskParameter is True, check if the script is started with /Silent parameter -> Start silent install if nobody is logged or quit with error 1602 if user is logged. (see release note)");
        //                loStringBuilder.AppendLine(@"	'If winlogonInst = False and AllowLANDeskParameter = True Then ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If AllowLANDeskParameter = True Then ");
        //                loStringBuilder.AppendLine(@"		write2Log(""Landesk Parameter /Silent is allowed to switch this package to silent"")");
        //                loStringBuilder.AppendLine(@"		If LandeskSilent = True Then ");
        //                loStringBuilder.AppendLine(@"			write2Log(""Receive Landesk Parameter /Silent - switch this package to silent"")");
        //                loStringBuilder.AppendLine(@"			SilentInst()");
        //                loStringBuilder.AppendLine(@"			If ShowMessageBoxes = True Then   ");
        //                loStringBuilder.AppendLine(@"				'LANDeskSDCLIENT(""Landesk parameter /Silent UserLogged"")");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Landesk parameter /Silent - User Logged exit script"", 1602");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: HandlingUserforkillApp");
        //                loStringBuilder.AppendLine(@"' Function: 1 - displays a message box to user for handling process to close.");
        //                loStringBuilder.AppendLine(@"' Function: 2 - kill list of process after 3 messagebox to the user ");
        //                loStringBuilder.AppendLine(@"' Function: 3 - Stop service process");
        //                loStringBuilder.AppendLine(@"' Parameter:   Using Global Const WaitForOpenProcesses, KillOpenProcesses,StopServiceProcess");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function HandlingUserforkillApp()");
        //                loStringBuilder.AppendLine(@"	Dim tmp :: tmp = True");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If WaitForOpenProcesses <> """" Then");
        //                loStringBuilder.AppendLine(@"		write2Log(""Start checking open processes and Services"")");
        //                loStringBuilder.AppendLine(@"		tmp = WaitForOpenApps (WaitForOpenProcesses, KillOpenProcesses, StopServiceProcess)");
        //                loStringBuilder.AppendLine(@"		If tmp Then");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> End of checking open processes and Services no more dependent open applications found, continue installation..."")");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		HandlingUserforkillApp =  tmp");
        //                loStringBuilder.AppendLine(@"	Elseif WaitForOpenProcesses = """" and KillOpenProcesses  = """" and StopServiceProcess <> """" Then");
        //                loStringBuilder.AppendLine(@"		write2Log(""Start checking Services is started"")");
        //                loStringBuilder.AppendLine(@"		StopServices(StopServiceProcess)");
        //                loStringBuilder.AppendLine(@"		HandlingUserforkillApp =  True ' Not implemented");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: winlogonstate");
        //                loStringBuilder.AppendLine(@"' Function:	Check winlogon prompt");
        //                loStringBuilder.AppendLine(@"' Parameter:   	none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function  winlogonstate()");
        //                loStringBuilder.AppendLine(@"	Dim sessionID :: sessionID = False");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService,colProcesses,objProcess,ProcessId,colLogonSessions,LogonSession");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	write2Log ""Info: winlogonstate started checking """);
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Warning: winlogonstate GetObject = "" & Err.number & "" "" & Err.Description : Err.Clear");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Set colProcesses = objWMIService.ExecQuery(""Select * from Win32_Process Where Name = 'explorer.exe'"")");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then ");
        //                loStringBuilder.AppendLine(@"			write2Log ""Warning: Win32_Process query = "" & Err.number & "" "" & Err.Description : Err.Clear");
        //                loStringBuilder.AppendLine(@"		Else	");
        //                loStringBuilder.AppendLine(@"			For Each objProcess in colProcesses");
        //                loStringBuilder.AppendLine(@"				ProcessId = objProcess.ProcessId");
        //                loStringBuilder.AppendLine(@"				Set colLogonSessions = objWMIService.ExecQuery(""Associators of {Win32_Process='"" & ProcessId & ""'} Where Resultclass = Win32_LogonSession Assocclass = Win32_SessionProcess"", ""WQL"", 48)");
        //                loStringBuilder.AppendLine(@"				If Err <> 0 Then ");
        //                loStringBuilder.AppendLine(@"					write2Log ""Warning:  winlogonstate Win32_LogonSession query = "" & Err.number & "" "" & Err.Description : Err.Clear");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					For Each LogonSession in colLogonSessions    ");
        //                loStringBuilder.AppendLine(@"						sessionID = True");
        //                loStringBuilder.AppendLine(@"					Next");
        //                loStringBuilder.AppendLine(@"					If Err <> 0 Then write2Log ""Warning:  winlogonstate LogonSession Result = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			Next");
        //                loStringBuilder.AppendLine(@"		End If	");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If sessionID = False Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info:  winlogonstate LogonSession Result = False""");
        //                loStringBuilder.AppendLine(@"		Dim UserContext :: UserContext = LANDeskStartAsUser");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If UserContext = False Then ");
        //                loStringBuilder.AppendLine(@"			write2Log ""Info:  winlogonstate LANDeskStartAsUser Result = False..."" ");
        //                loStringBuilder.AppendLine(@"			winlogonstate = True ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2Log ""Warning:  winlogonstate LANDeskStartAsUser Result = True - the LogonSession return code is False but the LANDeskStartAsUser return code is True !!""");
        //                loStringBuilder.AppendLine(@"			winlogonstate = False");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Elseif sessionID = True Then ");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info:  winlogonstate LogonSession Result = True""");
        //                loStringBuilder.AppendLine(@"		winlogonstate = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: LandeskSilent");
        //                loStringBuilder.AppendLine(@"' Function:	Landesk parameter /Silent, switch to silent mode");
        //                loStringBuilder.AppendLine(@"' Parameter:   	none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function LandeskSilent()");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Dim landeskarg,ArrayLandeskarg,i");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Landesksilent = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set landeskarg = WScript.Arguments.Named ");
        //                loStringBuilder.AppendLine(@"	If Err.number <> 0 Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""ERROR: could not get arguments"" & Err.Description ");
        //                loStringBuilder.AppendLine(@"		ExitScript ""ERROR: could not get silent arguments! "" , 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 0 To landeskarg.Count - 1");
        //                loStringBuilder.AppendLine(@"		If landeskarg.Exists (""Silent"") = vbTrue Then");
        //                loStringBuilder.AppendLine(@"			LandeskSilent = True");
        //                loStringBuilder.AppendLine(@"			write2Log ""Silent: argument /Silent is found!""");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If landeskarg.Exists (""StopInventoryScan"") = vbTrue Then");
        //                loStringBuilder.AppendLine(@"			StopLANDeskInventory = True");
        //                loStringBuilder.AppendLine(@"			write2log ""LANDesk Inventory Scan: Argument /StopInventoryScan is found, LANDesk Inventory Scan is disabled!""");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		'If landeskarg.Exists (""Force"") = vbFalse Then");
        //                loStringBuilder.AppendLine(@"		'	write2Log ""ERROR: argument /S: is missing""");
        //                loStringBuilder.AppendLine(@"		'Else");
        //                loStringBuilder.AppendLine(@"		'	Landeskforce = True");
        //                loStringBuilder.AppendLine(@"		'End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error goto 0	");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: SilentInst");
        //                loStringBuilder.AppendLine(@"' Function:	disable messagebox and switch windows installer to silent");
        //                loStringBuilder.AppendLine(@"' Parameter:   	none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub SilentInst()");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes = False Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""Info: Silent install is already selected by Master mode""");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		If winlogonstate = True Then ");
        //                loStringBuilder.AppendLine(@"			ShowMessageBoxes = False ");
        //                loStringBuilder.AppendLine(@"			InstallSwitch = "" /q""");
        //                loStringBuilder.AppendLine(@"			WaitToKillProcess =  True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: write2log");
        //                loStringBuilder.AppendLine(@"' Function:	Writing Line to given filename in global variable ""Logfilename""");
        //                loStringBuilder.AppendLine(@"' Parameter:    Text to write");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub write2log(LogText)");
        //                loStringBuilder.AppendLine(@"	Dim LogFile");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set LogFile = fso.OpenTextFile(LogFileName, ForAppending, True)");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	LogFile.AppendLine Date & "" "" & Time & ""|"" & vbTab & LogText");
        //                loStringBuilder.AppendLine(@"	Logfile.Close");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set LogFile = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: SetdefaultpathSrc");
        //                loStringBuilder.AppendLine(@"' Function:	set default path to sourcepath");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub SetdefaultpathSrc()");
        //                loStringBuilder.AppendLine(@"	On error resume next	");
        //                loStringBuilder.AppendLine(@"	wso.currentdirectory = ParseConst(SetDefaultPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"		Write2Log ""Warning: SetdefaultpathSrc not set to sourcepath : "" & Err.number & "" "" & Err.Description : Err.clear");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Write2Log ""set default path to : "" & ParseConst(SetDefaultPath)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	Write2log("""")");
        //                loStringBuilder.AppendLine(@"	On error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	ShowMessagePre");
        //                loStringBuilder.AppendLine(@"' Function:	Shows DS_SIE message box before installation and handles the open processes section");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub ShowMessagePre");
        //                loStringBuilder.AppendLine(@"	Dim tmp");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Show message box");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			If fso.FileExists(IniFileName) Then ");
        //                loStringBuilder.AppendLine(@"				write2log(""Showing pre-installation message box..."")");
        //                loStringBuilder.AppendLine(@"				tmp = wso.Run(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34) & "" --file="" & IniFileName,,True)");
        //                loStringBuilder.AppendLine(@"				write2log(""Pre-installation message box closed."")");
        //                loStringBuilder.AppendLine(@"				If tmp <> 0 Then ExitScript ""Timeout received from pre-installation message box. Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Cannot show pre-installation message box! "" & IniFileName & "" was not found!"" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ExitScript ""Cannot show pre-installation message box! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Master PC installation detected. Skipping pre-installation message box..."")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	ShowMessagePost");
        //                loStringBuilder.AppendLine(@"' Function:	Shows DS_SIE message box after installation");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub ShowMessagePost");
        //                loStringBuilder.AppendLine(@"	Dim tmp");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Show message box");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			If fso.FileExists(IniFileName) Then ");
        //                loStringBuilder.AppendLine(@"				write2log(""Showing post-installation message box..."")");
        //                loStringBuilder.AppendLine(@"				tmp = wso.Run(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34) & "" --file="" & IniFileName & "" --mode=6"",,True)");
        //                loStringBuilder.AppendLine(@"				write2log(""Post-installation message box closed."")");
        //                loStringBuilder.AppendLine(@"				If tmp <> 0 Then ExitScript ""Timeout received from post-installation message box. Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Cannot show post-installation message box! "" & IniFileName & "" was not found!"" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ExitScript ""Cannot show post-installation message box! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "" & VbCrLf & ""Exiting..."", 1602 : Err.clear");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Master PC installation detected. Skipping post-installation message box..."")	");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	OsSysnative");
        //                loStringBuilder.AppendLine(@"' Function:	Detects if 32-bit environment on 64-bit OS");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True if is a 32 Bit Process,False if is a 64 bit process.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function OS6432mode()");
        //                loStringBuilder.AppendLine(@"	If ( (PROC_ARCH1 = ""X86"") AND (PROC_ARCH2 = ""AMD64"") )  Then OS6432mode = TRUE _");
        //                loStringBuilder.AppendLine(@"	ELSE OS6432mode = FALSE");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	InitializeLogfile");
        //                loStringBuilder.AppendLine(@"' Function:	Read Environment Settings to global Variables:");
        //                loStringBuilder.AppendLine(@"'               SysRoot, Computername, SourcePath, ProgramFiles, MSILogDir, Logfilename, InstallerVersion and Username.");
        //                loStringBuilder.AppendLine(@"'               Initialize global Logfile and delete existing logfile If exists. Run prechecks.");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True If no errors occoured - False in case of errors.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function InitializeLogfile");
        //                loStringBuilder.AppendLine(@"	Dim Chk, tmp, objFile");
        //                loStringBuilder.AppendLine(@"	Dim colGroups, objGroup, objUser, IsAlreadyInstalled, tmpPack, i_loop, tmpGUID, pctPoz, SilentKey, cMode, DiskCheck, SpaceCap, DLoop, IntSpace, reqmsg, diskbool");
        //                loStringBuilder.AppendLine(@"	Dim bSupported, strInst, dPoz, typ, numloop, strchk, chktyp, chkval, DSPIDExists");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Reset variables");
        //                loStringBuilder.AppendLine(@"	MSIReturnCode = 0");
        //                loStringBuilder.AppendLine(@"	PatchReturnCode = 0");
        //                loStringBuilder.AppendLine(@"	UninstallReturnCode = 0");
        //                loStringBuilder.AppendLine(@"	Chk = True");
        //                loStringBuilder.AppendLine(@"	Systemdrive = """"");
        //                loStringBuilder.AppendLine(@"	Sysroot = """"");
        //                loStringBuilder.AppendLine(@"	Computername = """"");
        //                loStringBuilder.AppendLine(@"	SourcePath = """"");
        //                loStringBuilder.AppendLine(@"	ProgramFiles = """"");
        //                loStringBuilder.AppendLine(@"	ProgramFiles64 = """"");
        //                loStringBuilder.AppendLine(@"	FreeDiskSpace = 0");
        //                loStringBuilder.AppendLine(@"	Username = """"");
        //                loStringBuilder.AppendLine(@"	LogFileName = """"");
        //                loStringBuilder.AppendLine(@"	MSILogDir = """"");
        //                loStringBuilder.AppendLine(@"	tmp = """"");
        //                loStringBuilder.AppendLine(@"	arrLogFiles = """"");
        //                loStringBuilder.AppendLine(@"	CurrUserProfile = """"");
        //                loStringBuilder.AppendLine(@"	CurrUserAppdata = """"");
        //                loStringBuilder.AppendLine(@"	ALLUSERSPROFILE = """"");
        //                loStringBuilder.AppendLine(@"	SystemFolder = """"");
        //                loStringBuilder.AppendLine(@"	SystemFolder64 = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Start Initialize Logfile");
        //                loStringBuilder.AppendLine(@"	Logfilename = Replace(WScript.ScriptName,"".vbs"","".log"",1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (PackageName <> """") Then Logfilename = Replace(Logfilename,PackageID,PackageID & ""_MULTIPLATFORM_"" & PackageName,1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SysRoot = wso.ExpandEnvironmentStrings(""%SystemRoot%"")");
        //                loStringBuilder.AppendLine(@"	If SysRoot = ""%SystemRoot%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(SysRoot,1) <> ""\"" Then SysRoot = SysRoot & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.folderexists(Sysroot & ""DSClient\log"") Then");
        //                loStringBuilder.AppendLine(@"		Logfilename = SysRoot & ""DSClient\Log\"" & Logfilename");
        //                loStringBuilder.AppendLine(@"		MSILogDir = SysRoot & ""DSClient\Log\""");
        //                loStringBuilder.AppendLine(@"	Else	' use standard windows directory");
        //                loStringBuilder.AppendLine(@"		LogFileName = SysRoot & ""Temp\"" & Logfilename");
        //                loStringBuilder.AppendLine(@"		MSILogDir = SysRoot & ""Temp\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' delete local logfile if size > 50.000 Bytes ");
        //                loStringBuilder.AppendLine(@"	' --------------------------------------------");
        //                loStringBuilder.AppendLine(@"	If fso.fileexists(Logfilename) Then ");
        //                loStringBuilder.AppendLine(@"		Set objFile = fso.GetFile(Logfilename)");
        //                loStringBuilder.AppendLine(@"		If objFile.size > 50000 Then");
        //                loStringBuilder.AppendLine(@"			fso.DeleteFile(Logfilename)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		Set objFile = Nothing");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Check for fatal Error");
        //                loStringBuilder.AppendLine(@"	If Logfilename = """" Then 		' Error in Logfile Directory; cannot continue");
        //                loStringBuilder.AppendLine(@"		InitializeLogfile = False");
        //                loStringBuilder.AppendLine(@"		ExitScript ""Logfile could not be opened. Check your environment variables and try again!"", 1602		' Exit as user cancel");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2Log(""********************************** Global multiplatform starter script initializing *********************************"")");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	'End Initialize Logfile");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Detect client platform");
        //                loStringBuilder.AppendLine(@"	ClientPlatform = DetectClientPlatform()");
        //                loStringBuilder.AppendLine(@"	SilentKey = """"");
        //                loStringBuilder.AppendLine(@"	ShowMessageBoxes = True");
        //                loStringBuilder.AppendLine(@"	WaitToKillProcess = False");
        //                loStringBuilder.AppendLine(@"	StopLANDeskInventory = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SilentKey = ""HKEY_LOCAL_MACHINE\SOFTWARE\DSClient\PostSetup\Mode""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If SilentKey <> """" Then");
        //                loStringBuilder.AppendLine(@"		cMode = ReadRegStr(SilentKey, 32)");
        //                loStringBuilder.AppendLine(@"		If (cMode <> ""##ERR"") Then ");
        //                loStringBuilder.AppendLine(@"			ShowMessageBoxes = Not (LCase(cMode) = LCase(""Master"")) ");
        //                loStringBuilder.AppendLine(@"			WaitToKillProcess = (LCase(cMode) = LCase(""Master""))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If SilentMSIMSP Then InstallSwitch = "" /q"" Else InstallSwitch = "" /qb!""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ALLUSERSPROFILE = wso.ExpandEnvironmentStrings(""%ALLUSERSPROFILE%"")");
        //                loStringBuilder.AppendLine(@"	If ALLUSERSPROFILE = ""%ALLUSERSPROFILE%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(ALLUSERSPROFILE,1) <> ""\"" Then ALLUSERSPROFILE = ALLUSERSPROFILE & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Systemdrive = wso.ExpandEnvironmentStrings(""%SystemDrive%"")");
        //                loStringBuilder.AppendLine(@"	If Systemdrive = ""%SystemDrive%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(Systemdrive,1) <> ""\"" Then Systemdrive = Systemdrive & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SWRep = wso.ExpandEnvironmentStrings(""%DS_SWRep%"")");
        //                loStringBuilder.AppendLine(@"	If SWRep = ""%DS_SWRep%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"	If Right(SWRep,1) <> ""\"" Then SWRep = SWRep & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Computername = WshNetwork.Computername");
        //                loStringBuilder.AppendLine(@"	If Computername = """" Then Chk = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Sourcepath = Replace(WScript.ScriptFullName, ""\"" & WScript.ScriptName, """")");
        //                loStringBuilder.AppendLine(@"	If Right(Sourcepath,1) <> ""\"" Then Sourcepath = Sourcepath & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	SystemFolder64 = SysRoot & ""Sysnative\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If bitWise = ""64bit"" Then");
        //                loStringBuilder.AppendLine(@"		SystemFolder = SysRoot & ""SysWOW64\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		ProgramFiles = wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"		If ProgramFiles = ""%ProgramFiles(x86)%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If OS6432mode Then");
        //                loStringBuilder.AppendLine(@"			ProgramFiles64 = wso.ExpandEnvironmentStrings(""%ProgramW6432%"")");
        //                loStringBuilder.AppendLine(@"			If ProgramFiles64 = ""%ProgramW6432%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ProgramFiles64 = wso.ExpandEnvironmentStrings(""%ProgramFiles%"")");
        //                loStringBuilder.AppendLine(@"			If ProgramFiles64 = ""%ProgramFiles%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"		End if");
        //                loStringBuilder.AppendLine(@"	ElseIf bitWise = ""32bit"" Then");
        //                loStringBuilder.AppendLine(@"		SystemFolder = SysRoot & ""System32\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		ProgramFiles = wso.ExpandEnvironmentStrings(""%ProgramFiles%"")");
        //                loStringBuilder.AppendLine(@"		If ProgramFiles = ""%ProgramFiles%"" Then Chk = False");
        //                loStringBuilder.AppendLine(@"		ProgramFiles64 = """"");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Right(ProgramFiles,1) <> ""\"" Then ProgramFiles = ProgramFiles & ""\""");
        //                loStringBuilder.AppendLine(@"	If ProgramFiles64 <> """" Then");
        //                loStringBuilder.AppendLine(@"		If Right(ProgramFiles64,1) <> ""\"" Then ProgramFiles64 = ProgramFiles64 & ""\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Username = Wshnetwork.Username");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	IniFileName = Sourcepath & ""$DSClient\"" & Replace(WScript.ScriptName,"".vbs"","".ini"",1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CurrUserAppdata = ReadHKCUValue(""\Volatile Environment\APPDATA"")");
        //                loStringBuilder.AppendLine(@"	If Left(CurrUserAppdata,5) = ""##ERR"" Then ");
        //                loStringBuilder.AppendLine(@"		CurrUserAppdata = """"");
        //                loStringBuilder.AppendLine(@"	else");
        //                loStringBuilder.AppendLine(@"		If Right(CurrUserAppdata,1) <> ""\"" Then CurrUserAppdata = CurrUserAppdata & ""\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CurrUserLocalAppdata = ReadHKCUValue(""\Volatile Environment\LOCALAPPDATA"")	");
        //                loStringBuilder.AppendLine(@"	If Left(CurrUserLocalAppdata,5) = ""##ERR"" Then ");
        //                loStringBuilder.AppendLine(@"		CurrUserLocalAppdata = """"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		If Right(CurrUserLocalAppdata,1) <> ""\"" Then CurrUserLocalAppdata = CurrUserLocalAppdata & ""\""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CurrUserProfile = ReadHKCUValue(""\Volatile Environment\USERPROFILE"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Right(CurrUserProfile,1) <> ""\"" and CurrUserProfile <> """" Then CurrUserProfile = CurrUserProfile & ""\""");
        //                loStringBuilder.AppendLine(@"	If Left(CurrUserProfile, 5) = ""##ERR"" or Right(CurrUserProfile, 5) = ""##ERR\"" Then CurrUserProfile = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Get Windows Installer Version");
        //                loStringBuilder.AppendLine(@"	If fso.fileexists(SysRoot & ""System32\msiexec.exe"") Then");
        //                loStringBuilder.AppendLine(@"		InstallerVersion = fso.GetFileVersion(SysRoot & ""System32\msiexec.exe"")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Query for required disk space");
        //                loStringBuilder.AppendLine(@"	DiskCheck = Split(DiskName, ""#"")");
        //                loStringBuilder.AppendLine(@"	SpaceCap = Split(RequiredDiskSpace, ""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	diskbool = False");
        //                loStringBuilder.AppendLine(@"	reqmsg = ""There is not enough free disk space to install this package!"" & VbCrLf & _");
        //                loStringBuilder.AppendLine(@"		""Please make sure that you have the minimum required disk space before running this installation again."" & vbCrLf & vbCrLf & _");
        //                loStringBuilder.AppendLine(@"		""Drive"" & vbTab & ""Required Disk Space"" & VbCrLf & _");
        //                loStringBuilder.AppendLine(@"		""------"" & vbTab & ""----------------------""	& VbCrLf");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For DLoop = 0 To UBound(DiskCheck)");
        //                loStringBuilder.AppendLine(@"		tmp = CheckDiskSpace (DiskCheck(DLoop))");
        //                loStringBuilder.AppendLine(@"		IntSpace = Round((SpaceCap(DLoop) / 1024),0)");
        //                loStringBuilder.AppendLine(@"		FreeDiskSpace = tmp");
        //                loStringBuilder.AppendLine(@"		write2log(""Drive "" & DiskCheck(DLoop) & "" has "" & tmp & "" GB free disk space available."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If tmp < IntSpace Then");
        //                loStringBuilder.AppendLine(@"			write2Log(""Not enough disk space on drive "" & DiskCheck(DLoop))");
        //                loStringBuilder.AppendLine(@"			write2Log(""At least "" & IntSpace & "" GB needed."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			reqmsg = reqmsg & DiskCheck(DLoop) & VbTab & IntSpace & ""GB"" & "" ("" & tmp & "" GB available"" & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			diskbool = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Write variables and information to logfile, do not touch!");
        //                loStringBuilder.AppendLine(@"	WriteEnvToLogfile()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Query to check if package is installed");
        //                loStringBuilder.AppendLine(@"	If Installers <> """" Then				");
        //                loStringBuilder.AppendLine(@"		strInst = Split(Installers,""#"")");
        //                loStringBuilder.AppendLine(@"		If LegacyCheck <> """" Then strchk = Split(LegacyCheck, ""#"")");
        //                loStringBuilder.AppendLine(@"		DSPIDExists = Key_Exists_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & PackageID & ""\DisplayName"")");
        //                loStringBuilder.AppendLine(@"		write2log ""DSPID entry search return: "" & DSPIDExists");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For numloop = 0 To UBound(strInst)");
        //                loStringBuilder.AppendLine(@"			IsAlreadyInstalled = True");
        //                loStringBuilder.AppendLine(@"			typ = strInst(numloop) ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			dPoz = Instr(typ, ""::"")");
        //                loStringBuilder.AppendLine(@"			If dPoz > 0 Then strInst(numloop) = Right(strInst(numloop),Len(strInst(numloop))- (dPoz + 1))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			dPoz = InstrRev(strInst(numloop), ""."")");
        //                loStringBuilder.AppendLine(@"			typ = Right(strInst(numloop), Len(strInst(numloop)) - dPoz)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			Select Case LCase(typ)");
        //                loStringBuilder.AppendLine(@"				Case ""msi""				");
        //                loStringBuilder.AppendLine(@"					tmpGUID = GetMSIProdCode(ParseConst(strInst(numloop)))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"					If (Not Key_Exists_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(tmpGUID) & ""\SourceList\PackageName"") And _");
        //                loStringBuilder.AppendLine(@"					Not Key_Exists_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & tmpGUID & ""\DisplayName"")) Then");
        //                loStringBuilder.AppendLine(@"						IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Case ""msp""");
        //                loStringBuilder.AppendLine(@"					If Not Key_Exists_Str(""HKLM\SOFTWARE\Classes\Installer\Patches\"" & ReverseGUID(GetPatchPackCode(strInst(numloop))) & ""\SourceList\PackageName"") Then");
        //                loStringBuilder.AppendLine(@"						IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Case ""exe"", ""bat""");
        //                loStringBuilder.AppendLine(@"					If LegacyCheck <> """" Then");
        //                loStringBuilder.AppendLine(@"						chkval = LCase(strchk(numloop))");
        //                loStringBuilder.AppendLine(@"						chktyp = ""default""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"						If Instr(chkval, "":r"") > 0 Then chktyp = ""checkregistry""");
        //                loStringBuilder.AppendLine(@"						If Instr(chkval, "":f"") > 0 Then chktyp = ""checkfile""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"						chkval = Replace(chkval, "":r"", """",1,1,1)");
        //                loStringBuilder.AppendLine(@"						chkval = Replace(chkval, "":f"", """",1,1,1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"						Select Case chktyp");
        //                loStringBuilder.AppendLine(@"							Case ""checkregistry""");
        //                loStringBuilder.AppendLine(@"								If Not Key_Exists_Str(chkval) Then IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"							Case ""checkfile""");
        //                loStringBuilder.AppendLine(@"								If Not fso.FileExists(ParseConst(chkval)) Then IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"						End Select");
        //                loStringBuilder.AppendLine(@"					Else");
        //                loStringBuilder.AppendLine(@"						IsAlreadyInstalled = DSPIDExists");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"			End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If DSPIDExists Then");
        //                loStringBuilder.AppendLine(@"				If IgnoreNative Then");
        //                loStringBuilder.AppendLine(@"					If IsAlreadyInstalled Then");
        //                loStringBuilder.AppendLine(@"						ExitScript PackageID & "" "" & PackageName & "" is already installed, exiting!"", 0");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					If IsAlreadyInstalled Then");
        //                loStringBuilder.AppendLine(@"						ExitScript PackageID & "" "" & PackageName & "" is already installed, exiting!"", 0");
        //                loStringBuilder.AppendLine(@"					Else");
        //                loStringBuilder.AppendLine(@"						IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If IgnoreNative Then");
        //                loStringBuilder.AppendLine(@"					If IsAlreadyInstalled Then");
        //                loStringBuilder.AppendLine(@"						IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					If IsAlreadyInstalled Then");
        //                loStringBuilder.AppendLine(@"						ExitScript ""Please uninstall any native installs of this product prior to running this script."", 1638");
        //                loStringBuilder.AppendLine(@"					Else");
        //                loStringBuilder.AppendLine(@"						IsAlreadyInstalled = False");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Exit installation if disk space is not enough");
        //                loStringBuilder.AppendLine(@"	If diskbool = True Then");
        //                loStringBuilder.AppendLine(@"		ExitScript reqmsg, 1602		' Exit as user cancel");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If NOT DisablePlatformCheck Then");
        //                loStringBuilder.AppendLine(@"		' Check for supported platform");
        //                loStringBuilder.AppendLine(@"		bSupported = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Dim cv		");
        //                loStringBuilder.AppendLine(@"		' Check Min OS Version");
        //                loStringBuilder.AppendLine(@"		If SupportedPlatformsMin <> ""0"" Then");
        //                loStringBuilder.AppendLine(@"			cv = CompareVersions(OSVer, SupportedPlatformsMin)");
        //                loStringBuilder.AppendLine(@"			bSupported = (cv >= 0)");
        //                loStringBuilder.AppendLine(@"			write2log(""Check Min OS Version: "" & bSupported & "" ("" & SupportedPlatformsMin & "") "" & cv)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Check Max OS Version");
        //                loStringBuilder.AppendLine(@"		If SupportedPlatformsMax <> ""0"" Then");
        //                loStringBuilder.AppendLine(@"			cv = CompareVersions(OSVer, SupportedPlatformsMax)");
        //                loStringBuilder.AppendLine(@"			bSupported = (cv < 1)");
        //                loStringBuilder.AppendLine(@"			write2log(""Check Max OS Version: "" & bSupported & "" ("" & SupportedPlatformsMax & "") "" & cv)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Check OS Bitwise");
        //                loStringBuilder.AppendLine(@"		If bSupported Then");
        //                loStringBuilder.AppendLine(@"			If LCase(PlatformsBitwise) <> ""both"" Then");
        //                loStringBuilder.AppendLine(@"				bSupported = (LCase(bitwise) = LCase(PlatformsBitwise))");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If bSupported = False Then");
        //                loStringBuilder.AppendLine(@"			If SupportedPlatformsMax <> ""0"" Then");
        //                loStringBuilder.AppendLine(@"				ExitScript ClientPlatform & "" version "" & OSVer & "" is found. This platform is not supported by this package."" & vbCrLf & _");
        //                loStringBuilder.AppendLine(@"					""This package supports minimum OS Version "" & SupportedPlatformsMin & "" and maximum OS Version "" & SupportedPlatformsMax & "" ("" & PlatformsBitwise & "" bitwise)."", 1640");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				ExitScript ClientPlatform & "" version "" & OSVer & "" is found. This platform is not supported by this package."" & vbCrLf & _");
        //                loStringBuilder.AppendLine(@"					""This package supports minimum OS Version "" & SupportedPlatformsMin & "" ("" & PlatformsBitwise & "" bitwise)."", 1640");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2log("""")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Query for required products");
        //                loStringBuilder.AppendLine(@"	If (RequiredProduct <> """") Then");
        //                loStringBuilder.AppendLine(@"		CheckRequiredProducts RequiredProduct, RequiredProductCustomMessageBox");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ReadyForUse = False Then");
        //                loStringBuilder.AppendLine(@"		ExitScript ""ReadyForUse is set to False. Please set ReadyForUse to True if you want to run this package!"", 1602		' Exit as user cancel");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	InitializeLogfile = Chk	");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	FindOnAdminLocalGroup");
        //                loStringBuilder.AppendLine(@"' Function:	for find user or group include in Adminstrators (S-1-5-32-544) local group ");
        //                loStringBuilder.AppendLine(@"' Parameter:    Group of user that you search");
        //                loStringBuilder.AppendLine(@"' Return:       True or False (False if wmi error)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function FindOnAdminLocalGroup (MyGroup)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colAccounts, objAccount, objGroup, objUser");
        //                loStringBuilder.AppendLine(@"	Dim chk :: chk = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"			write2Log ""Error: FindOnAdminLocalGroup WMI GetObject = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"			write2Log ""Error: FindOnAdminLocalGroup WMI database corrupted or service winmgmt os not started or fail to start"" : Err.clear");
        //                loStringBuilder.AppendLine(@"        End If");
        //                loStringBuilder.AppendLine(@"	Set colAccounts = objWMIService.ExecQuery(""Select * From Win32_Group Where LocalAccount = TRUE And SID ='S-1-5-32-544'"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: FindOnAdminLocalGroup WMI ExecQuery = "" & Err.number & "" "" & Err.Description : Err.clear");
        //                loStringBuilder.AppendLine(@"	For Each objAccount in colAccounts");
        //                loStringBuilder.AppendLine(@"		Set objGroup = GetObject(""WinNT://./""  & objAccount.Name)");
        //                loStringBuilder.AppendLine(@"		For Each objUser in objGroup.Members");
        //                loStringBuilder.AppendLine(@"			If UCase(objUser.name) = MyGroup Then");
        //                loStringBuilder.AppendLine(@"				chk =  True");
        //                loStringBuilder.AppendLine(@"       		End If");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error:  FindOnAdminLocalGroup WMI GetObject WinNTquery ="" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	FindOnAdminLocalGroup = chk");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colAccounts = Nothing");
        //                loStringBuilder.AppendLine(@"	Set objGroup = Nothing");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	WriteEnvToLogfile");
        //                loStringBuilder.AppendLine(@"' Function:	Writes Environment settings to logfile");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub WriteEnvToLogfile");
        //                loStringBuilder.AppendLine(@"	' Write Environment settings to Logfile");
        //                loStringBuilder.AppendLine(@"	On Error Resume next");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	write2log(""====================================================================================================="")");
        //                loStringBuilder.AppendLine(@"	write2log("" Start of script			:""& WScript.ScriptFullName)");
        //                loStringBuilder.AppendLine(@"	write2log("" Starter Script Version			:""& Version)");
        //                loStringBuilder.AppendLine(@"	write2log("" Starter Script build Version		:""& SCRIPTBUILD)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Application 		:""& WScript.Application)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Name        		:""& WScript.Name)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Version     		:""& WScript.Version)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Fullname    		:""& WScript.Fullname)");
        //                loStringBuilder.AppendLine(@"	write2log("" Script Engine Path        		:""& WScript.Path)");
        //                loStringBuilder.AppendLine(@"	write2log("" Network Computername      		:""& Computername)");
        //                loStringBuilder.AppendLine(@"	write2log("" Network User Domain       		:""& WshNetwork.UserDomain)");
        //                loStringBuilder.AppendLine(@"	write2log("" Network User Name         		:""& Username)");
        //                loStringBuilder.AppendLine(@"	write2log("" ProgramFiles 32-bit directory		:""& ProgramFiles)");
        //                loStringBuilder.AppendLine(@"	write2log("" ProgramFiles 64-bit directory		:""& ProgramFiles64)");
        //                loStringBuilder.AppendLine(@"	write2log("" System32 32-bit directory		:""& SystemFolder)");
        //                loStringBuilder.AppendLine(@"	write2log("" System32 64-bit directory		:""& SystemFolder64)");
        //                loStringBuilder.AppendLine(@"	write2log("" Free space on Systemdrive		:""& FreeDiskSpace & "" GB"")");
        //                loStringBuilder.AppendLine(@"	write2log("" Software Repository			:""& SWRep)");
        //                loStringBuilder.AppendLine(@"	write2log("" Sourcepath				:""& SourcePath)");
        //                loStringBuilder.AppendLine(@"	write2log("" Current Directory			:""& wso.CurrentDirectory)");
        //                loStringBuilder.AppendLine(@"	write2log("" Logfile				:""& LogFileName)");
        //                loStringBuilder.AppendLine(@"	write2Log("" MSIEXEC Version			:""& InstallerVersion)");
        //                loStringBuilder.AppendLine(@"	write2log("" Client platform			:""& ClientPlatform & "" ("" & OSVer & "")"")");
        //                loStringBuilder.AppendLine(@"	write2log("" Current login User Profile		:""& CurrUserProfile)");
        //                loStringBuilder.AppendLine(@"	write2log("" Current login User AppData		:""& CurrUserAppdata)");
        //                loStringBuilder.AppendLine(@"	write2log("" Current login User LocalAppData		:""& CurrUserLocalAppdata)");
        //                loStringBuilder.AppendLine(@"	write2log(""====================================================================================================="")");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2log ""Warning on WriteEnvToLogfile = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Key_Exists_Str");
        //                loStringBuilder.AppendLine(@"' Function:	Checks Existence of a REG_SZ registry key via the WMI registry provider");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to check");
        //                loStringBuilder.AppendLine(@"' Return:       True if Key exists, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Key_Exists_Str(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Key_Exists_Str = (ReadRegStr(sRegValue, 64) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit, also check under the 32bit context if key is present");
        //                loStringBuilder.AppendLine(@"	If (Key_Exists_Str = False) And (bitWise = ""64bit"") Then Key_Exists_Str = (ReadRegStr(sRegValue, 32) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Function Key_Exists_DWORD(sRegValue)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Key_Exists_DWORD = (ReadRegDWORD(sRegValue, 64) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"	'if platform is 64bit, also check under the 32bit context if key is present");
        //                loStringBuilder.AppendLine(@"	If ( Key_Exists_DWORD = False) And (bitWise = ""64bit"") Then  Key_Exists_DWORD = (ReadRegDWORD(sRegValue, 32) <> ""##ERR"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: FindRegStr");
        //                loStringBuilder.AppendLine(@"' Function:	Find a REG_SZ value from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    KeyPath to read, RegValue to read, full string Application for compare, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       Return True or False , ERR if error on query or syntax");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function FindRegStr (sKeyPath,sRegValue,sApplication, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams, EnumKey,arrSubKeys,subKey, retvalue, catkey");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	FindRegStr = ""ERR""");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sKeyPath, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			FindRegStr = ""ERR""");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	oReg.EnumKey hKeyRoot, tmpKey, arrSubKeys ");
        //                loStringBuilder.AppendLine(@"	For Each subKey In arrSubKeys ");
        //                loStringBuilder.AppendLine(@"		catkey = tmpKey & subKey");
        //                loStringBuilder.AppendLine(@"		Set oInParams = oReg.Methods_(""GetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"		oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"		oInParams.sSubKeyName = catkey");
        //                loStringBuilder.AppendLine(@"		oInParams.sValueName = sRegValue");
        //                loStringBuilder.AppendLine(@"		Set oOutParams = oReg.ExecMethod_(""GetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then FindRegStr = ""ERR""");
        //                loStringBuilder.AppendLine(@"		If isNull(oOutParams.sValue) Then ");
        //                loStringBuilder.AppendLine(@"			FindRegstring = False");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			retvalue = oOutParams.sValue");
        //                loStringBuilder.AppendLine(@"			If sApplication = oOutParams.sValue Then");
        //                loStringBuilder.AppendLine(@"				FindRegStr = True");
        //                loStringBuilder.AppendLine(@"				'oOutParams.sValue");
        //                loStringBuilder.AppendLine(@"				Exit Function");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Read_Str");
        //                loStringBuilder.AppendLine(@"' Function:	reads value of a REG_SZ reg value");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read");
        //                loStringBuilder.AppendLine(@"' Return:       value of the REG_SZ reg value, ##ERR if key is not present");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Read_Str(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Reg_Read_Str = (ReadRegStr(sRegValue, 64))");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (Reg_Read_Str = ""##ERR"") And (bitWise = ""64bit"") Then Reg_Read_Str = ReadRegStr(sRegValue, 32)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Read_Dword");
        //                loStringBuilder.AppendLine(@"' Function:	reads value of a REG_Dword reg value");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read");
        //                loStringBuilder.AppendLine(@"' Return:       value of the REG_Dword reg value, ##ERR if key is not present");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Read_Dword(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Reg_Read_Dword = (ReadRegDWORD(sRegValue, 64))");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (Reg_Read_Dword = ""##ERR"") And (bitWise = ""64bit"") Then Reg_Read_Dword = ReadRegDWORD(sRegValue, 32)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Hive_Exists");
        //                loStringBuilder.AppendLine(@"' Function:	Check if the RegHive Exists");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegHive to check");
        //                loStringBuilder.AppendLine(@"' Return:       Return True if the target RegHive exists");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Hive_Exists(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Reg_Hive_Exists = (RegHiveExists(sRegValue, 64))");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (Reg_Hive_Exists = False) And (bitWise = ""64bit"") Then Reg_Hive_Exists = RegHiveExists(sRegValue, 32)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ReadRegStr");
        //                loStringBuilder.AppendLine(@"' Function:	Reads a REG_SZ value from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       The value of the value if it exists, ##ERR if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadRegStr (sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegValue, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			ReadRegStr = ""##ERR""");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""GetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"	oInParams.sValueName = tmpValue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""GetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	If IsNull(oOutParams.sValue) Then ReadRegStr = ""##ERR"" Else ReadRegStr = oOutParams.sValue	");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ReadRegDWORD");
        //                loStringBuilder.AppendLine(@"' Function:	Reads a REG_DWORD value from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to read, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       The value of the value if it exists, ##ERR if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadRegDWORD (sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegValue, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			ReadRegDWORD = ""##ERR""");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""GetDWORDValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"	oInParams.sValueName = tmpValue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""GetDWORDValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	If IsNull(oOutParams.uValue) Then ReadRegDWORD = ""##ERR"" Else ReadRegDWORD = oOutParams.uValue");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: RegHiveExists");
        //                loStringBuilder.AppendLine(@"' Function:	Check if Reghive exists from the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegHive to read, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       True if the hive exists");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function RegHiveExists(sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	RegHiveExists = False");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegValue, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection)");
        //                loStringBuilder.AppendLine(@"		tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""GetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""GetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	RegHiveExists = (oOutParams.returnvalue = 1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: WriteRegStr");
        //                loStringBuilder.AppendLine(@"' Function:	Writes a REG_SZ value to the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    Registry key to write, Value of registry key, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       This is disabled ""True if successful, False if not"" return always True");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function WriteRegStr (RegPath, sRegValue, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim i, tmpKey, tmpValue, aKeyPathSubSection, hKeyRoot, oCtx, oLocator, oReg, oInParams, oOutParams");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	WriteRegStr = False");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(RegPath, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection) - 1");
        //                loStringBuilder.AppendLine(@"	   tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""SetStringValue"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"	oInParams.sValueName = tmpValue");
        //                loStringBuilder.AppendLine(@"	oInParams.sValue = sRegValue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""SetStringValue"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	WriteRegStr = (oOutParams.ReturnValue = 0)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CreateRegKey");
        //                loStringBuilder.AppendLine(@"' Function:	Create Registry Key to the local computer's registry using WMI.");
        //                loStringBuilder.AppendLine(@"' Parameter:    root key & path to registry key to create, Provider architecture (64 or 32 bit)");
        //                loStringBuilder.AppendLine(@"' Return:       This is disabled ""True if successful, False if not"" return always True");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CreateRegKey(RootKey, KeyPath, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim oCtx, oLocator, oReg, oInParams, oOutParams ");
        //                loStringBuilder.AppendLine(@"	Dim strKeyPath, Return");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"") ");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"") ");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""CreateKey"").InParameters ");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = RootKey ");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = KeyPath ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""CreateKey"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CreateRegKey = (oOutParams.ReturnValue = 0)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set oLocator = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' Function Name: Format the Date Time");
        //                loStringBuilder.AppendLine(@"' Function: Reformat the Date Time in format YYYYMMDDHHMMSS");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       string in format YYYYMMDDHHMMSS");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetFormattedDate");
        //                loStringBuilder.AppendLine(@"	Dim strDate, strDay, strMonth, strYear, strHour, strMinute, strSecond");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strDate = Now()");
        //                loStringBuilder.AppendLine(@"	strDay = DatePart(""d"", strDate)");
        //                loStringBuilder.AppendLine(@"	strMonth = DatePart(""m"", strDate)");
        //                loStringBuilder.AppendLine(@"	strYear = DatePart(""yyyy"", strDate)");
        //                loStringBuilder.AppendLine(@"	strHour = DatePart(""h"", strDate)");
        //                loStringBuilder.AppendLine(@"	strMinute = DatePart(""n"", strDate)");
        //                loStringBuilder.AppendLine(@"	strSecond = DatePart(""s"", strDate)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If strDay < 10 Then");
        //                loStringBuilder.AppendLine(@"		strDay = ""0"" & strDay");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If strMonth < 10 Then");
        //                loStringBuilder.AppendLine(@"		strMonth = ""0"" & strMonth");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If strHour < 10 Then");
        //                loStringBuilder.AppendLine(@"		strHour = ""0"" & strHour");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If strMinute < 10 Then");
        //                loStringBuilder.AppendLine(@"		strMinute = ""0"" & strMinute");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If strSecond < 10 Then");
        //                loStringBuilder.AppendLine(@"		strSecond = ""0"" & strSecond");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetFormattedDate = strYear & strMonth & strDay & strHour & strMinute & strSecond");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	WriteDSPID");
        //                loStringBuilder.AppendLine(@"' Function:	Handles all DSPID writings");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub WriteDSPID");
        //                loStringBuilder.AppendLine(@"	Dim strDSPID, sDSPID, PInstallDate, PPublisher, PDisplayVersion, PProductID, PAppPath, i_loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	sDSPID = Split(DSPIDKey,""#"")");
        //                loStringBuilder.AppendLine(@"	If DSPIDPublisher <> """" Then PPublisher = Split(DSPIDPublisher,""#"")");
        //                loStringBuilder.AppendLine(@"	If DSPIDDisplayVersion <> """" Then PDisplayVersion = Split(DSPIDDisplayVersion,""#"")");
        //                loStringBuilder.AppendLine(@"	If DSPIDProductID <> """" Then PProductID = Split(DSPIDProductID,""#"")");
        //                loStringBuilder.AppendLine(@"	If DSPIDAppPath <> """" Then PAppPath = Split(DSPIDAppPath,""#"")");
        //                loStringBuilder.AppendLine(@"	PInstallDate = GetFormattedDate");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i_loop = 0 to UBound(sDSPID)");
        //                loStringBuilder.AppendLine(@"		strDSPID = ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & sDSPID(i_loop) & ""\""");
        //                loStringBuilder.AppendLine(@"		write2log(""Writing DSPID key: "" & strDSPID & "" ..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		Wso.RegWrite strDSPID & ""DisplayName"", sDSPID(i_loop)");
        //                loStringBuilder.AppendLine(@"		write2Log(""DSPID DisplayName subkey: "" & sDSPID(i_loop))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Wso.RegWrite strDSPID & ""InstallDate"", PInstallDate");
        //                loStringBuilder.AppendLine(@"		write2Log(""DSPID InstallDate subkey: "" & PInstallDate)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If PPublisher(i_loop) <> """" Then ");
        //                loStringBuilder.AppendLine(@"			Wso.RegWrite strDSPID & ""Publisher"", PPublisher(i_loop)");
        //                loStringBuilder.AppendLine(@"			write2Log(""DSPID Publisher subkey: "" & PPublisher(i_loop))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		If PDisplayVersion(i_loop) <> """" Then ");
        //                loStringBuilder.AppendLine(@"			Wso.RegWrite strDSPID & ""DisplayVersion"", PDisplayVersion(i_loop)");
        //                loStringBuilder.AppendLine(@"			write2Log(""DSPID DisplayVersion subkey: "" & PDisplayVersion(i_loop))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		If PProductID(i_loop) <> """" Then ");
        //                loStringBuilder.AppendLine(@"			Wso.RegWrite strDSPID & ""ProductID"", PProductID(i_loop)");
        //                loStringBuilder.AppendLine(@"			write2Log(""DSPID PProductID subkey: "" & PProductID(i_loop))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		If PAppPath(i_loop) <> """" Then ");
        //                loStringBuilder.AppendLine(@"			Wso.RegWrite strDSPID & ""ApplicationPath"", ParseConst(PAppPath(i_loop))");
        //                loStringBuilder.AppendLine(@"			write2Log(""DSPID ApplicationPath subkey: "" & ParseConst(PAppPath(i_loop)))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	WriteAS");
        //                loStringBuilder.AppendLine(@"' Function:	Writes Active Setup Key to Registry");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub WriteAS");
        //                loStringBuilder.AppendLine(@"	Dim ActiveSetupKey, ActiveSetupCommandline, i_loop, key_string");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ActiveSetupKey = Split(ASKey,""#"")");
        //                loStringBuilder.AppendLine(@"	ActiveSetupCommandline = Split(ASCommand,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i_loop = 0 to UBound(ActiveSetupKey)");
        //                loStringBuilder.AppendLine(@"		key_string = ""SOFTWARE\Microsoft\Active Setup\Installed Components\"" & ActiveSetupKey(i_loop)");
        //                loStringBuilder.AppendLine(@"		write2log(""Writing ASkey: "" & key_string & "" ..."")");
        //                loStringBuilder.AppendLine(@"		write2Log(""ActiveSetupCommandline: "" & ParseConst(ActiveSetupCommandline(i_loop)))");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		If Len(Trim(ActiveSetupKey(i_loop))) <> 0 Then");
        //                loStringBuilder.AppendLine(@"			CreateRegKey HKEY_LOCAL_MACHINE, key_string, AscContext");
        //                loStringBuilder.AppendLine(@"			WriteRegStr ""HKLM\"" & key_string & ""\StubPath"", ParseConst(ActiveSetupCommandline(i_loop)),AscContext");
        //                loStringBuilder.AppendLine(@"			If AskVersion = True Then WriteRegStr ""HKLM\"" & key_string & ""\Version"", buildversionAskey,AscContext");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteDSPID");
        //                loStringBuilder.AppendLine(@"' Function:	Delete the parse in DSPID keys");
        //                loStringBuilder.AppendLine(@"' Parameter:    Target DSPIDs");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteDSPID(strDSPID)");
        //                loStringBuilder.AppendLine(@"	Dim i_loop, sDSPID");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	sDSPID = Split(strDSPID,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i_loop = 0 to UBound(sDSPID)");
        //                loStringBuilder.AppendLine(@"		If Len(Trim(sDSPID(i_loop))) <> 0 Then");
        //                loStringBuilder.AppendLine(@"			If Reg_Hive_Delete(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & Trim(sDSPID(i_loop))) Then");
        //                loStringBuilder.AppendLine(@"				write2log ("" Deleted PID hive: "" & ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & Trim(sDSPID(i_loop)))");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	DeleteAS");
        //                loStringBuilder.AppendLine(@"' Function:	Deletes Active Setup Keys from Registry");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteAS");
        //                loStringBuilder.AppendLine(@"	Dim ActiveSetupKey, i_loop, key_string");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ActiveSetupKey = Split(ASDeleteKey,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i_loop = 0 to UBound(ActiveSetupKey)");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		If Len(Trim(ActiveSetupKey(i_loop))) <> 0 Then");
        //                loStringBuilder.AppendLine(@"			key_string = ""HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\"" & ActiveSetupKey(i_loop)");
        //                loStringBuilder.AppendLine(@"			'write2log(key_string)		");
        //                loStringBuilder.AppendLine(@"			If fKillRegKey(key_string,AscContext) = 0 Then write2log("" Deleted ActiveSetup key: "" & key_string)");
        //                loStringBuilder.AppendLine(@"			If AscContext=""32"" And bitWise=""64bit"" Then");
        //                loStringBuilder.AppendLine(@"				If fKillRegKey(key_string,64) = 0 Then write2log("" Deleted ActiveSetup key on 64bit context: "" & key_string)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteFile");
        //                loStringBuilder.AppendLine(@"' Function:	Delete file, if file is found and permissions are sufficient");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path and name of file to be deleted (e.g. C:\temp\logfile.txt)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteFile(FilePath)");
        //                loStringBuilder.AppendLine(@"	Dim tmp, strPath");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FilePath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not fso.FileExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		write2log (""File "" & strPath & "" was not found. Delete failed!"")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		fso.DeleteFile strPath, True");
        //                loStringBuilder.AppendLine(@"		If Err.Number = 0 Then ");
        //                loStringBuilder.AppendLine(@"			write2log(""Deleted file : "" & strPath)");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Could not delete file : "" & strPath & "". Make sure you have the necessary permissions."")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteFolder");
        //                loStringBuilder.AppendLine(@"' Function:	Delete folder, if folder is found and permissions are sufficient");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteFolder(FolderPath)");
        //                loStringBuilder.AppendLine(@"	Dim tmp, strPath");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FolderPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		write2log (""Folder "" & strPath & "" was not found. Delete failed!"")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		fso.DeleteFolder strPath, True");
        //                loStringBuilder.AppendLine(@"		If Err.Number = 0 Then ");
        //                loStringBuilder.AppendLine(@"			write2log(""Deleted folder : "" & strPath)");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Could not delete folder : "" & strPath & "". Make sure you have the necessary permissions."")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	DeleteEmptyFolder");
        //                loStringBuilder.AppendLine(@"' Function:	Check delete a folder if it is empty");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub DeleteEmptyFolder(FolderPath)");
        //                loStringBuilder.AppendLine(@"	Dim strPath, objFolder, delRes");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FolderPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		Set objFolder = fso.GetFolder(strPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If objFolder.Files.Count = 0 And objFolder.SubFolders.Count = 0 Then");
        //                loStringBuilder.AppendLine(@"			delRes = objFolder.Delete");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If Not delRes = 0 Then");
        //                loStringBuilder.AppendLine(@"		        	write2log(""Delete Empty folder failed: "" & strPath)");
        //                loStringBuilder.AppendLine(@"		        Else");
        //                loStringBuilder.AppendLine(@"		        	write2log(""Delete Empty folder successfully: "" & strPath)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Delete Empty folder aborted: "" & strPath & "" is not empty."")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Set objFolder = Nothing");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Target empty folder not found: "" & strPath)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	RecursiveDeleteFolder");
        //                loStringBuilder.AppendLine(@"' Function:	Delete folder including subfolder and files");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub RecursiveDeleteFolder(FolderPath)");
        //                loStringBuilder.AppendLine(@"	Dim strPath, i, objWMIService, objFolder, strDeleteFolder, strFolder, colFolders, errResults");
        //                loStringBuilder.AppendLine(@"	intSize = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FolderPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		strDeleteFolder = strPath");
        //                loStringBuilder.AppendLine(@"		ReDim Preserve arrFolders(intSize)");
        //                loStringBuilder.AppendLine(@"		arrFolders(intSize) = strDeleteFolder");
        //                loStringBuilder.AppendLine(@"		intSize = intSize + 1");
        //                loStringBuilder.AppendLine(@"		GetSubFolders strDeleteFolder");
        //                loStringBuilder.AppendLine(@"		write2log(""Deleting: "" & strDeleteFolder)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i = Ubound(arrFolders) to 0 Step -1");
        //                loStringBuilder.AppendLine(@"		    strFolder = arrFolders(i)");
        //                loStringBuilder.AppendLine(@"		    strFolder = Replace(strFolder, ""\"", ""\\"")");
        //                loStringBuilder.AppendLine(@"		    On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		    Set colFolders = objWMIService.ExecQuery _");
        //                loStringBuilder.AppendLine(@"		        (""Select * from Win32_Directory where Name = '"" & strFolder & ""'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		    For Each objFolder in colFolders");
        //                loStringBuilder.AppendLine(@"		        errResults = objFolder.Delete");
        //                loStringBuilder.AppendLine(@"		        If Not errResults = 0 Then");
        //                loStringBuilder.AppendLine(@"		        	write2log(""Delete failed: "" & objFolder.Name)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		    Next");
        //                loStringBuilder.AppendLine(@"		    On Error Goto 0");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not fso.FolderExists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		write2log(""Successfully deleted: "" & strPath)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""Failed to delete: "" & strPath)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName:	GetSubFolders");
        //                loStringBuilder.AppendLine(@"' Function:	Retrieve the subfolders and add to the array arrFolders");
        //                loStringBuilder.AppendLine(@"' Parameter:	Complete path to the folder, without ending \ (e.g. C:\temp)");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' Author: 	Eric Seng Teck Wei");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub GetSubFolders(strFolderName)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colSubfolders2, objFolder2");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strFolderName = ParseConst(strFolderName)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colSubfolders2 = objWMIService.ExecQuery _");
        //                loStringBuilder.AppendLine(@"		(""Associators of {Win32_Directory.Name='"" & strFolderName & ""'} "" _");
        //                loStringBuilder.AppendLine(@"		    & ""Where AssocClass = Win32_Subdirectory "" _");
        //                loStringBuilder.AppendLine(@"		        & ""ResultRole = PartComponent"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objFolder2 in colSubfolders2");
        //                loStringBuilder.AppendLine(@"		If Not IsEmpty(objFolder2) Then");
        //                loStringBuilder.AppendLine(@"			strFolderName = objFolder2.Name");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			ReDim Preserve arrFolders(intSize)");
        //                loStringBuilder.AppendLine(@"			arrFolders(intSize) = strFolderName");
        //                loStringBuilder.AppendLine(@"			intSize = intSize + 1");
        //                loStringBuilder.AppendLine(@"			GetSubFolders strFolderName");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	On Error Goto 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objFolder2 = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colSubfolders2 = Nothing");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: State");
        //                loStringBuilder.AppendLine(@"' Function:	Subfunction to return readable statuscode");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function State(statecode)");
        //                loStringBuilder.AppendLine(@"	Select Case statecode");
        //                loStringBuilder.AppendLine(@"		Case -6: State = ""Bad configuration""");
        //                loStringBuilder.AppendLine(@"		Case -2: State = ""Invalid argument""");
        //                loStringBuilder.AppendLine(@"		Case -1: State = ""Unknown package""		'	neither advertised nor installed :-)");
        //                loStringBuilder.AppendLine(@"		Case 1: State = ""Advertised""			'	advertised but not installed");
        //                loStringBuilder.AppendLine(@"		Case 2: State = ""Absent""			'	installed for a different user");
        //                loStringBuilder.AppendLine(@"		Case 5: State = ""Installed""			'	installed for the current user");
        //                loStringBuilder.AppendLine(@"		Case Else: State = CStr(statecode)");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	KillProcess");
        //                loStringBuilder.AppendLine(@"' Function:	Kills given Process");
        //                loStringBuilder.AppendLine(@"' Parameter:    Process to kill");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub KillProcess(Process)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colProcessList, objProcess");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	objWMIService.Security_.Privileges.AddAsString ""SeDebugPrivilege"", True");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = objWMIService.ExecQuery (""Select * from Win32_Process Where Name = '""& Process & ""'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	write2log(""Check for open process "" & Process & ""..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objProcess in colProcessList");
        //                loStringBuilder.AppendLine(@"		objProcess.Terminate()");
        //                loStringBuilder.AppendLine(@"		write2log(""Process "" & Process & "" killed..."")");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = Nothing");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: KillPID");
        //                loStringBuilder.AppendLine(@"' Function:	Kills Process with a given PID");
        //                loStringBuilder.AppendLine(@"' Parameter:    PID of Process to kill");
        //                loStringBuilder.AppendLine(@"' Return:       True on success, False on error");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function KillPID(PID)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colProcessList, objProcess");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	KillPID = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	objWMIService.Security_.Privileges.AddAsString ""SeDebugPrivilege"", True");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = objWMIService.ExecQuery (""Select * from Win32_Process Where ProcessID = '""& PID & ""'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objProcess in colProcessList");
        //                loStringBuilder.AppendLine(@"		objProcess.Terminate()");
        //                loStringBuilder.AppendLine(@"		KillPID = True");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckProcess");
        //                loStringBuilder.AppendLine(@"' Function:	Checks if given Process is running");
        //                loStringBuilder.AppendLine(@"' Parameter:    Process to check for");
        //                loStringBuilder.AppendLine(@"' Return:       True if Process was found, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckProcess(strProcess)");
        //                loStringBuilder.AppendLine(@"	Dim Found, objWMIService, colItems, objItem");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Found = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colItems = objWMIService.ExecQuery(""Select * from Win32_Process"",,48)");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckProcess WMI GetObject = "" & Err.number & "" "" & Err.Description : Err.clear");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"		If UCase(objItem.Name) = UCase(strProcess) Then");
        //                loStringBuilder.AppendLine(@"			Found = True");
        //                loStringBuilder.AppendLine(@"			Exit For");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckProcess WMI ExecQuery = "" & Err.number & "" "" & Err.Description ");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	If Found Then Write2Log ""- Process "" & strProcess & "" found.""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CheckProcess = Found");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: OSDateInstalled");
        //                loStringBuilder.AppendLine(@"' Function:	Operating System installation date");
        //                loStringBuilder.AppendLine(@"' Parameter:    ");
        //                loStringBuilder.AppendLine(@"' Return:       Date format standard");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function OSDateInstalled()");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colItems, objItem,objSWbemDateTime");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	OSDateInstalled  = ""ERR""");
        //                loStringBuilder.AppendLine(@"	Set objSWbemDateTime = CreateObject(""WbemScripting.SWbemDateTime"")");
        //                loStringBuilder.AppendLine(@"	If Err = 0 Then                                      ");
        //                loStringBuilder.AppendLine(@"		Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"		Set colItems = objWMIService.ExecQuery(""Select * from Win32_OperatingSystem"")");
        //                loStringBuilder.AppendLine(@"		For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"			objSWbemDateTime.Value = objItem.InstallDate");
        //                loStringBuilder.AppendLine(@"			OSDateInstalled = objSWbemDateTime.GetVarDate(False) 'convert CIM_DATETIME  to VT_DATE ");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"		If OSDateInstalled = ""ERR"" Then	OSDateInstalled = ""15-Jan-909 00:00:00""");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		OSDateInstalled = ""15-Jan-909 00:00:00""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: buildversionAskey");
        //                loStringBuilder.AppendLine(@"' Function:	Build a new (Up) version for activesetup key version");
        //                loStringBuilder.AppendLine(@"' Parameter: 	none");
        //                loStringBuilder.AppendLine(@"' Return: 	active setup key version 16 digit");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function buildversionAskey()");
        //                loStringBuilder.AppendLine(@"	Dim atzr1, atzr2, atzr3, atzr4, Digit4, Digit3, Digit2, Digit1");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	buildversionAskey = Year(Date) & Right(""00"" & Month(Date), 2) & Right(""00"" & Day(Date), 2) & Right(""00"" & Hour(Time), 2) & Right(""00"" & Minute(Time), 2) & Right(""00"" & Second(Time), 2)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Current DateTime: "" & buildversionAskey)");
        //                loStringBuilder.AppendLine(@"	buildversionAskey = Left(buildversionAskey & ""0000000000000000"", 16)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Left 16: "" & buildversionAskey)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim atzr :: atzr = buildversionAskey");
        //                loStringBuilder.AppendLine(@"	atzr1 = Left(atzr,12)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Left 12: "" & atzr1)");
        //                loStringBuilder.AppendLine(@"	atzr = Mid(atzr,13)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Mid 13 (Digit 4): "" & atzr)");
        //                loStringBuilder.AppendLine(@"	Digit4 =atzr");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	atzr2 = Left(atzr1,8)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Left 8: "" & atzr2)");
        //                loStringBuilder.AppendLine(@"	atzr = Mid(atzr1,9)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Mid 9 (Digit 3): "" & atzr)");
        //                loStringBuilder.AppendLine(@"	Digit3 =atzr");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	atzr3 = Left(atzr2,4)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Left 4: "" & atzr3)");
        //                loStringBuilder.AppendLine(@"	atzr = Mid(atzr2,5)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Mid 5 (Digit 2): "" & atzr)");
        //                loStringBuilder.AppendLine(@"	Digit2 =atzr");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	atzr4 = Left(atzr3,0)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Left 0: "" & atzr4)");
        //                loStringBuilder.AppendLine(@"	atzr = Mid(atzr3,1)");
        //                loStringBuilder.AppendLine(@"	'Write2Log (""AS Mid 1 (Digit 1): "" & atzr)");
        //                loStringBuilder.AppendLine(@"	Digit1 =atzr");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	buildversionAskey =  Digit1 & "","" & Digit2 & "","" & Digit3 & "","" & Digit4");
        //                loStringBuilder.AppendLine(@"	'Write2Log(""buildversionAskey : "" & buildversionAskey)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ProductInstalled");
        //                loStringBuilder.AppendLine(@"' Function:	Checks if given MSI Product is installed");
        //                loStringBuilder.AppendLine(@"' Parameter:    Productcode");
        //                loStringBuilder.AppendLine(@"' Return:       True if Product is installed, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ProductInstalled(ProductCode)");
        //                loStringBuilder.AppendLine(@"	Dim Found, objWMIService, colItems, objItem");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Found = False");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set colItems = objWMIService.ExecQuery(""Select * from Win32_Product"")");
        //                loStringBuilder.AppendLine(@"	For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"		If objItem.IdentifyingNumber = ProductCode Then");
        //                loStringBuilder.AppendLine(@"			Write2Log (""Found product GUID: "" & ProductCode)");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" FullName: "" & objItem.name)");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" InstallDate: "" & Left(objItem.InstallDate2,8))");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" InstallLocation: "" & objItem.InstallLocation)");
        //                loStringBuilder.AppendLine(@"			Write2Log ("" InstallState: "" & State(objItem.InstallState))");
        //                loStringBuilder.AppendLine(@"			Write2Log ("""")");
        //                loStringBuilder.AppendLine(@"			Found = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: ProductInstalled WMI ExecQuery = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	ProductInstalled = Found");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function	");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	CheckRequiredProducts");
        //                loStringBuilder.AppendLine(@"' Function:	Checks if required products are installed and exits if one or more are not installed");
        //                loStringBuilder.AppendLine(@"' Parameter:    Hash separated list of DSPID keys");
        //                loStringBuilder.AppendLine(@"' Return:       None");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub CheckRequiredProducts(ReqProducts, CustMsg)");
        //                loStringBuilder.AppendLine(@"	Dim ProductsR, FullMsg, CustomMsg, ProdName, ProdCode, rloop, opr, tmpbool, fillsReq");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ProductsR = Split(ReqProducts,""#"")");
        //                loStringBuilder.AppendLine(@"	If RequiredProductName <> """" Then ProdName = Split(RequiredProductName,""#"")");
        //                loStringBuilder.AppendLine(@"	If CustMsg = """" Then ");
        //                loStringBuilder.AppendLine(@"		FullMsg = ""Missing required packages. Please make sure the following packages are installed first before running the installation again."" & VbCrLf");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		FullMsg = CustMsg & VbCrLf");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpbool = True");
        //                loStringBuilder.AppendLine(@"	fillsReq = True");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For rloop = 0 To UBound(ProductsR)");
        //                loStringBuilder.AppendLine(@"		ProdCode = Replace(Replace(ProductsR(rloop), "":a"", """",1,1,1), "":o"", """",1,1,1)");
        //                loStringBuilder.AppendLine(@"		opr = ""and""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		tmpbool = Key_Exists_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & ProdCode & ""\DisplayName"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If rloop = 0 Then");
        //                loStringBuilder.AppendLine(@"			fillsReq = tmpbool");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			If Instr(LCase(ProductsR(rloop - 1)), "":a"") > 0 Then opr = ""and""");
        //                loStringBuilder.AppendLine(@"			If Instr(LCase(ProductsR(rloop - 1)), "":o"") > 0 Then opr = ""or""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			Select Case opr");
        //                loStringBuilder.AppendLine(@"				Case ""and""");
        //                loStringBuilder.AppendLine(@"					fillsReq = fillsReq And tmpbool");
        //                loStringBuilder.AppendLine(@"				Case ""or""");
        //                loStringBuilder.AppendLine(@"					fillsReq = fillsReq Or tmpbool");
        //                loStringBuilder.AppendLine(@"				Case Else");
        //                loStringBuilder.AppendLine(@"					'By Default, operator AND is used.");
        //                loStringBuilder.AppendLine(@"					fillsReq = fillsReq And tmpbool");
        //                loStringBuilder.AppendLine(@"			End Select");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If tmpbool Then");
        //                loStringBuilder.AppendLine(@"			If RequiredProductName <> """" Then");
        //                loStringBuilder.AppendLine(@"				write2log(""Required Product:"" & vbTab & ProdName(rloop) & "" ("" & ProdCode & "") is found!"")");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				write2log(""Required Product:"" & vbTab & ProdCode & "" is found!"")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			If RequiredProductName <> """" Then ");
        //                loStringBuilder.AppendLine(@"				FullMsg = FullMsg & vbCrLf & ProdName(rloop) & "" ("" & ProdCode & "")""");
        //                loStringBuilder.AppendLine(@"				write2log(""Required Product:"" & vbTab & ProdName(rloop) & "" ("" & ProdCode & "") is not found!"")");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				FullMsg = FullMsg & vbCrLf & ProdCode");
        //                loStringBuilder.AppendLine(@"				write2log(""Required Product:"" & vbTab & ProdCode & "" is not found!"")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fillsReq = False Then");
        //                loStringBuilder.AppendLine(@"		ExitScript FullMsg, 1602");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""RequiredProduct returns TRUE."")");
        //                loStringBuilder.AppendLine(@"		write2log("""")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckPatchProcess");
        //                loStringBuilder.AppendLine(@"' Function:	checks if the msiexec process that handles the patching is still running");
        //                loStringBuilder.AppendLine(@"' Parameter:    name of the patch to be checked for");
        //                loStringBuilder.AppendLine(@"' Return:       True if process is still running, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckPatchProcess(PatchName)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colProcessList, objProcess");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CheckPatchProcess = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	objWMIService.Security_.Privileges.AddAsString ""SeDebugPrivilege"", True");
        //                loStringBuilder.AppendLine(@"	Set colProcessList = objWMIService.ExecQuery (""Select * from Win32_Process Where Name = 'msiexec.exe' And CommandLine LIKE '%"" & PatchName & ""%'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objProcess in colProcessList");
        //                loStringBuilder.AppendLine(@"		CheckPatchProcess = True");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: GetSubValues");
        //                loStringBuilder.AppendLine(@"' Function:	Gets an array with the subvalues of a registry key");
        //                loStringBuilder.AppendLine(@"' Parameter:    Registry key to check");
        //                loStringBuilder.AppendLine(@"' Return:       ###-separated list of subvalues, """" if key is not found");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetSubValues(sRegKey, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim oCtx, oLocator, oReg, oInParams, oOutParams, aKeyPathSubSection, tmpKey, tmpValue, hKeyRoot, i, sSubValue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetSubValues = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sRegKey, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpKey = """"");
        //                loStringBuilder.AppendLine(@"	tmpValue = aKeyPathSubSection(UBound(aKeyPathSubSection))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For i = 1 To UBound(aKeyPathSubSection)");
        //                loStringBuilder.AppendLine(@"	   tmpKey = tmpKey & aKeyPathSubSection(i) & ""\""");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""EnumValues"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = tmpKey");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""EnumValues"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not IsNull(oOutParams.sNames) Then");
        //                loStringBuilder.AppendLine(@"		For Each sSubValue In oOutParams.sNames");
        //                loStringBuilder.AppendLine(@"			GetSubValues = GetSubValues & ""###"" & sSubValue");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Len(GetSubValues) > 0 Then GetSubValues = Right(GetSubValues,Len(GetSubValues)-3)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: AddToPatchSourceList");
        //                loStringBuilder.AppendLine(@"' Function:	Gets the maximum value of a registry key in a HKLM hive");
        //                loStringBuilder.AppendLine(@"' Parameter:    Patch package code GUID, Source path to be added to the patch source list");
        //                loStringBuilder.AppendLine(@"' Return:       True if successful, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function AddToPatchSourceList(PatchGUID, SrcPath)");
        //                loStringBuilder.AppendLine(@"	Dim tmpVal, arrVal, sValue, sRegKey, tProv");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	AddToPatchSourceList = False");
        //                loStringBuilder.AppendLine(@"	sRegKey = ""HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Installer\Patches\"" & PatchGUID & ""\SourceList\Net""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tProv = 64");
        //                loStringBuilder.AppendLine(@"	arrVal = GetSubValues(sRegKey,tProv) ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (arrVal = """") Then ");
        //                loStringBuilder.AppendLine(@"		tProv = 32");
        //                loStringBuilder.AppendLine(@"		arrVal = GetSubValues(sRegKey,tProv) ");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (arrVal <> """") Then");
        //                loStringBuilder.AppendLine(@"		For Each sValue In Split(arrVal,""###"")");
        //                loStringBuilder.AppendLine(@"			tmpVal = 0 ");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			tmpVal = CInt(sValue)");
        //                loStringBuilder.AppendLine(@"			If (Err.Number = 0) And (tmpVal > MaxRegVal) Then MaxRegVal = tmpVal");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0 ");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"		If (tmpVal > 0) Then");
        //                loStringBuilder.AppendLine(@"			AddToPatchSourceList = WriteRegStr(sRegKey & ""\"" & CStr(tmpVal+1),SrcPath,tProv)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: MSIMutex");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for running MSI Installation");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True if found, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function MSIMutex()");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, colListOfServices, objService, Chk");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:"" _");
        //                loStringBuilder.AppendLine(@"		& ""{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colListOfServices = objWMIService.ExecQuery _");
        //                loStringBuilder.AppendLine(@"			(""Select * from Win32_Service Where Name = 'MSIServer'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Chk = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Write2Log(""MSI Mutex entered..."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objService in colListOfServices");
        //                loStringBuilder.AppendLine(@"		If UCase(objService.State) = ""RUNNING"" and objService.AcceptStop = False Then");
        //                loStringBuilder.AppendLine(@"			Write2Log(""-> MSIServer acceptstop = False"")");
        //                loStringBuilder.AppendLine(@"			' MSI Process running");
        //                loStringBuilder.AppendLine(@"			Chk = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	MSIMutex = Chk");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colListOfServices = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: MSIErrorHandler");
        //                loStringBuilder.AppendLine(@"' Function:	handles MSI error codes");
        //                loStringBuilder.AppendLine(@"' Parameter:    Return value from MSI Commandline");
        //                loStringBuilder.AppendLine(@"' Return:       ");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function MSIErrorHandler(ErrorCode)");
        //                loStringBuilder.AppendLine(@"	' Handle all possible MSI Errors...");
        //                loStringBuilder.AppendLine(@"	If ErrorCode = 0 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation finished successfully!"")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 3010 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation finished successfully, but reboot required now!"")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 13 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The data is invalid."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 87 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": One of the parameters is invalid."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1601 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows Installer Service could not be accessed."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1602 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation was cancelled by user."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1603 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Fatal error during installation."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1604 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Installation was suspended."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1605 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Process is only valid for pruducts which are installed."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1606 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unknown Feature found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1607 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unknown Component found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1608 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unknown Property found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1609 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Invalid handle state."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1610 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The config files for this product are invalid."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1611 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The index for the component is absent."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1612 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation source for this product is absent."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = -10 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation source for this product is absent."")	' Custom Return Code from installation");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1613 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows Installer Version is not sufficient to install this product."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1614 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Uninstallation of this product is pending."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1615 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Bad SQL query syntax."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1616 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Invalid field found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1618 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Another installation is in progress. Please use the mutex tool to avoid this error."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1619 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation package could not be accessed. Unable to open MSI database."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1620 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation package could not be accessed. Unable to open MSI database."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1621 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error starting MSI GUI."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1622 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error opening MSI logging."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1623 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The language form this package is not supported on your system."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1624 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The TRANSFORM file cound not be found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1625 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The installation of this package is blocked by policy."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1626 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Function could not be executed."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1627 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error calling function."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1628 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Reference to an unknown table found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1629 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Datatype mismatch."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1630 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Unsupported datatype found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1631 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows installer service could not be started. Please check state of MSIServer."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1632 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": TEMP folder could not be accessed or is full."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1633 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": This platform is not supported by this installation package."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1634 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The component is not used on this computer."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1635 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The patch package could not be found."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1636 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": The patch package could not be opened."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1637 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Windows Installer version not sufficient to install this patch package."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1638 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Another version of this product is present. Please uninstall this version first and try again."")");
        //                loStringBuilder.AppendLine(@"	ElseIf ErrorCode = 1639 Then");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": Error in Commandline."")");
        //                loStringBuilder.AppendLine(@"	'ElseIf ErrorCode = 1640 Then");
        //                loStringBuilder.AppendLine(@"	'	write2log("" "" & ErrorCode & "": Unsupported platform."")");
        //                loStringBuilder.AppendLine(@"	'ElseIf ErrorCode = 1641 Then");
        //                loStringBuilder.AppendLine(@"	'	write2log("" "" & ErrorCode & "": script launched manually."")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log("" "" & ErrorCode & "": unknown error during installation."")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Return original code and 0 in case of success");
        //                loStringBuilder.AppendLine(@"	If (ErrorCode = 0) or (ErrorCode = 3010) Then");
        //                loStringBuilder.AppendLine(@"		MSIErrorHandler = 0");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		MSIErrorHandler = ErrorCode");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CheckFileVersion");
        //                loStringBuilder.AppendLine(@"' Function:	Compare fileversion with given version.");
        //                loStringBuilder.AppendLine(@"' Parameter:    path and file, version to check");
        //                loStringBuilder.AppendLine(@"' Return:       True if version equals or greater, False if version lower or file not existing");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckFileVersion(FileToCheck,VersionToCompare)");
        //                loStringBuilder.AppendLine(@"	Dim Fversion 				' used to store the fileversion as String");
        //                loStringBuilder.AppendLine(@"	Dim arrFversion, arrVersionToCompare	' array for fileversion and givenversion, splitted by . as decimal");
        //                loStringBuilder.AppendLine(@"	Dim upperbound, i, i_loop		' Bounds and Loops as decimal");
        //                loStringBuilder.AppendLine(@"	Dim FileVersionHigher, FileVersionEqual	' Boolean");
        //                loStringBuilder.AppendLine(@"	Dim strPath");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	strPath = ParseConst(FileToCheck)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.fileexists(strPath) Then");
        //                loStringBuilder.AppendLine(@"		Fversion = fso.GetFileVersion(strPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Split both up in an Array");
        //                loStringBuilder.AppendLine(@"		arrFversion = Split(Fversion,""."")");
        //                loStringBuilder.AppendLine(@"		arrVersionToCompare = Split(VersionToCompare,""."")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Find the array with the lowest amount of dots in it and assign the upper bound to upperbound variable");
        //                loStringBuilder.AppendLine(@"		If UBound(arrFversion) > UBound(arrVersionToCompare) Then");
        //                loStringBuilder.AppendLine(@"			upperbound = UBound(arrVersionToCompare)");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			upperbound = UBound(arrFversion)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Define start values for compare");
        //                loStringBuilder.AppendLine(@"		i = 0");
        //                loStringBuilder.AppendLine(@"		FileVersionEqual = True");
        //                loStringBuilder.AppendLine(@"		FileVersionHigher = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Do While (i <= upperbound) and FileVersionEqual and (FileVersionHigher = False)");
        //                loStringBuilder.AppendLine(@"			If arrFversion(i) > arrVersionToCompare(i) Then");
        //                loStringBuilder.AppendLine(@"				FileVersionHigher = True");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			If arrFversion(i) < arrVersionToCompare(i) Then FileVersionEqual = False");
        //                loStringBuilder.AppendLine(@"			i = i + 1");
        //                loStringBuilder.AppendLine(@"		Loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' At this point both versions are equal in their common digits.");
        //                loStringBuilder.AppendLine(@"		' So we have to check if the givenversion has more dots in it and the rest of the decimals are <> 0");
        //                loStringBuilder.AppendLine(@"		If FileVersionEqual and (UBound(arrVersionToCompare) >= i) Then");
        //                loStringBuilder.AppendLine(@"			For i_loop = i To UBound(arrVersionToCompare)");
        //                loStringBuilder.AppendLine(@"				If arrVersionToCompare(i_loop) > 0 Then FileVersionEqual = False");
        //                loStringBuilder.AppendLine(@"			Next");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' Define an equal value as a True for the return");
        //                loStringBuilder.AppendLine(@"		If FileVersionEqual Then ");
        //                loStringBuilder.AppendLine(@"			FileVersionHigher = True");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else	' File not existing");
        //                loStringBuilder.AppendLine(@"		write2log ""File for versioncheck not found!""");
        //                loStringBuilder.AppendLine(@"		CheckFileVersion = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CheckFileVersion = FileVersionHigher");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: fKillRegKey");
        //                loStringBuilder.AppendLine(@"' Function:	Deletes given Registry Key and all its Subkeys");
        //                loStringBuilder.AppendLine(@"' Parameter:    RegKey to delete starting with name of hive, eg. HKLM\Software\...");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function fKillRegKey(sKeyToDelete, RegType)");
        //                loStringBuilder.AppendLine(@"	Dim sSubKey, sKeyToKill, oInParams, oOutParams, iElement");
        //                loStringBuilder.AppendLine(@"	Dim aKeyPathSubSection, sKeyRoot, hkeyRoot, strKeyRoot, oLocator, oReg, oCtx");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	aKeyPathSubSection = Split(sKeyToDelete, ""\"")");
        //                loStringBuilder.AppendLine(@"	Select Case UCase(aKeyPathSubSection(0))");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CLASSES_ROOT"", ""HKCR""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CLASSES_ROOT");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_CLASSES_ROOT""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_USER"", ""HKCU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_USER");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_CURRENT_USER""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_LOCAL_MACHINE"", ""HKLM""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_LOCAL_MACHINE");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_LOCAL_MACHINE""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_USERS"", ""HKU""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_USERS");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_USERS""");
        //                loStringBuilder.AppendLine(@"		Case ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"			hKeyRoot = HKEY_CURRENT_CONFIG");
        //                loStringBuilder.AppendLine(@"			strKeyRoot = ""HKEY_CURRENT_CONFIG""");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			fKillRegKey = 1");
        //                loStringBuilder.AppendLine(@"			Exit Function");
        //                loStringBuilder.AppendLine(@"	End Select ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	skeyToKill = """"");
        //                loStringBuilder.AppendLine(@"	For iElement = 1 To UBound(aKeyPathSubSection)");
        //                loStringBuilder.AppendLine(@"		sKeyToKill = sKeyToKill & ""\"" & aKeyPathSubSection(iElement)   ");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Left(sKeyToKill,1) = ""\"" Then sKeyToKill = Right(sKeyToKill, Len(sKeyToKill)-1)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oCtx = CreateObject(""WbemScripting.SWbemNamedValueSet"")");
        //                loStringBuilder.AppendLine(@"	oCtx.Add ""__ProviderArchitecture"", RegType");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oLocator = CreateObject(""Wbemscripting.SWbemLocator"")");
        //                loStringBuilder.AppendLine(@"	Set oReg = oLocator.ConnectServer("""", ""root\default"", """", """", , , , oCtx).Get(""StdRegProv"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""EnumKey"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = sKeyToKill");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""EnumKey"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Not IsNull(oOutParams.sNames) Then");
        //                loStringBuilder.AppendLine(@"		For Each sSubKey In oOutParams.sNames");
        //                loStringBuilder.AppendLine(@"			'Recursively call this Function, to delete each subkey - and their subkeys, and so on...");
        //                loStringBuilder.AppendLine(@"			fKillRegKey strKeyRoot & ""\"" & sKeyToKill & ""\"" & sSubKey, RegType");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'if the key has no subkeys, delete it.");
        //                loStringBuilder.AppendLine(@"	Set oInParams = oReg.Methods_(""DeleteKey"").InParameters");
        //                loStringBuilder.AppendLine(@"	oInParams.hDefKey = hKeyRoot");
        //                loStringBuilder.AppendLine(@"	oInParams.sSubKeyName = sKeyToKill");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set oOutParams = oReg.ExecMethod_(""DeleteKey"", oInParams, , oCtx)");
        //                loStringBuilder.AppendLine(@"	fKillRegKey = oOutParams.ReturnValue");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: Reg_Hive_Delete");
        //                loStringBuilder.AppendLine(@"' Function:	deletes a registry hive");
        //                loStringBuilder.AppendLine(@"' Parameter:    reg hive to delete");
        //                loStringBuilder.AppendLine(@"' Return:       value of the REG_SZ reg value, ##ERR if key is not present");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function Reg_Hive_Delete(sRegValue)");
        //                loStringBuilder.AppendLine(@"	Dim oRet ");
        //                loStringBuilder.AppendLine(@"	oRet = fKillRegKey(sRegValue,64)");
        //                loStringBuilder.AppendLine(@"	'If platform is 64bit and key is not read, read 32bit context key");
        //                loStringBuilder.AppendLine(@"	If (oRet <> 0) And (bitWise = ""64bit"") Then oRet = fKillRegKey(sRegValue,32)");
        //                loStringBuilder.AppendLine(@"	Reg_Hive_Delete = (oRet = 0)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	GetCurrUserSID");
        //                loStringBuilder.AppendLine(@"' Function:	Get SID of currently logged-in user");
        //                loStringBuilder.AppendLine(@"' Return:	SID of current user if successful, """" if not");
        //                loStringBuilder.AppendLine(@"' Author:	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	Dim oReg, arrSubKeys, subkey, arrSubKeys2, subkey2");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetCurrUserSID = """"");
        //                loStringBuilder.AppendLine(@"	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")");
        //                loStringBuilder.AppendLine(@"	oReg.EnumKey HKEY_USERS,"""",arrSubKeys");
        //                loStringBuilder.AppendLine(@"	For Each subkey In arrSubKeys");
        //                loStringBuilder.AppendLine(@"		If Not subkey = "".DEFAULT"" Then");
        //                loStringBuilder.AppendLine(@"			oReg.EnumKey HKEY_USERS, subkey, arrSubKeys2");
        //                loStringBuilder.AppendLine(@"			If isArray(arrSubKeys2) Then");
        //                loStringBuilder.AppendLine(@"				For Each subkey2 In arrSubKeys2");
        //                loStringBuilder.AppendLine(@"					If subkey2 = ""Volatile Environment"" Then");
        //                loStringBuilder.AppendLine(@"						GetCurrUserSID = subkey");
        //                loStringBuilder.AppendLine(@"						Exit For");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Next");
        //                loStringBuilder.AppendLine(@"				If GetCurrUserSID <> """" Then Exit For    ");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next  ");
        //                loStringBuilder.AppendLine(@"	Set oReg = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	GetCurrUserName");
        //                loStringBuilder.AppendLine(@"' Function:	Get username of currently logged-in user");
        //                loStringBuilder.AppendLine(@"' Return:	Username  of current user if successful, """" if not");
        //                loStringBuilder.AppendLine(@"' Author:	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetCurrUserName()");
        //                loStringBuilder.AppendLine(@"	Dim objWMISvc, colItems, objItem");
        //                loStringBuilder.AppendLine(@"	Dim strComputer, sUser");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetCurrUserName = """"");
        //                loStringBuilder.AppendLine(@"	strComputer = "".""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	set objWMISvc = GetObject(""winmgmts:\\"" & strComputer & ""\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	set colItems = objWMISvc.ExecQuery(""Select * From Win32_Process Where Name='explorer.exe'"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For Each objItem in colItems");
        //                loStringBuilder.AppendLine(@"		objItem.GetOwner sUser");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetCurrUserName = sUser");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	set objWMISvc = Nothing");
        //                loStringBuilder.AppendLine(@"	set colItems = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	ReadHKCUValue");
        //                loStringBuilder.AppendLine(@"' Function:	Read value from the HKCU hive of the logged-in user");
        //                loStringBuilder.AppendLine(@"' Parameter:	Path to the HKCU registry value that should be read");
        //                loStringBuilder.AppendLine(@"' Return:       Value of the registry key if successful, ""##ERR"" if not");
        //                loStringBuilder.AppendLine(@"' Author: 	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadHKCUValue(RegPath)");
        //                loStringBuilder.AppendLine(@"	Dim userSID");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	userSID = GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	If userSID <> """" Then");
        //                loStringBuilder.AppendLine(@"		ReadHKCUValue = Reg_Read_Str(""HKEY_USERS\"" & userSID & RegPath)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		ReadHKCUValue = ""ERROR - couldn't get SID of logged on user.""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	DeleteHKCUValue");
        //                loStringBuilder.AppendLine(@"' Function:	Delete value from the HKCU hive of the logged-in user");
        //                loStringBuilder.AppendLine(@"' Parameter:	Path to the HKCU registry value that should be deleted");
        //                loStringBuilder.AppendLine(@"' Return:       True if succesful, False if not ");
        //                loStringBuilder.AppendLine(@"' Author: 	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DeleteHKCUValue(RegPath)");
        //                loStringBuilder.AppendLine(@"	Dim userSID, sregvalue");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	userSID = GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	If userSID <> """" Then");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		sregvalue = wso.RegDelete(""HKEY_USERS\"" & userSID & RegPath)");
        //                loStringBuilder.AppendLine(@"		DeleteHKCUValue = (Err.Number = 0)");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log(""ERROR - couldn't get SID of logged on user."")");
        //                loStringBuilder.AppendLine(@"		DeleteHKCUValue = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: WriteHKCUValue");
        //                loStringBuilder.AppendLine(@"' Function: 	Write value to the HKCU hive of the logged-in user");
        //                loStringBuilder.AppendLine(@"' Parameter:    KeyPath   = Path to the HKCU key the value will be created in ");
        //                loStringBuilder.AppendLine(@"'        	ValueName = Name of the value that will be created");
        //                loStringBuilder.AppendLine(@"'        	Value     = Type of the value (REG_SZ, REG_EXPAND_SZ, REG_DWORD, REG_BINARY)");
        //                loStringBuilder.AppendLine(@"' Return:       True if successful, False if not");
        //                loStringBuilder.AppendLine(@"' Author: 	Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function WriteHKCUValue(KeyPath, ValueName, ValueType)");
        //                loStringBuilder.AppendLine(@"	Dim userSID");
        //                loStringBuilder.AppendLine(@"	userSID = GetCurrUserSID()");
        //                loStringBuilder.AppendLine(@"	If userSID <> """" Then");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		wso.RegWrite ""HKEY_USERS\"" & userSID & KeyPath, ValueName, ValueType");
        //                loStringBuilder.AppendLine(@"		If Err.Number = 0 Then");
        //                loStringBuilder.AppendLine(@"			WriteHKCUValue = True");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			WriteHKCUValue = False");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		WriteHKCUValue = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	CheckDiskSpace");
        //                loStringBuilder.AppendLine(@"' Function:	Check for free disk space for give drive");
        //                loStringBuilder.AppendLine(@"' Parameter:	Drive to check free disk space for (driveletter)");
        //                loStringBuilder.AppendLine(@"' Return:       Value of free disk space in GB");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckDiskSpace(HardDisk)");
        //                loStringBuilder.AppendLine(@"	Dim objWMISvc, colDisks, objDisk, Tmp");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	tmp = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMISvc = GetObject(""winmgmts:"" _");
        //                loStringBuilder.AppendLine(@"		& ""{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colDisks = objWMISvc.ExecQuery _");
        //                loStringBuilder.AppendLine(@"		(""Select * from Win32_LogicalDisk Where DriveType = 3"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckDiskSpace WMI GetObject = "" & Err.number & "" "" & Err.Description : Err.Clear ");
        //                loStringBuilder.AppendLine(@"	For Each objDisk in colDisks");
        //                loStringBuilder.AppendLine(@"		If UCase(objDisk.DeviceID) = HardDisk Then");
        //                loStringBuilder.AppendLine(@"			If IsNumeric(objDisk.FreeSpace) Then");
        //                loStringBuilder.AppendLine(@"				Tmp = Round((objDisk.FreeSpace / 1024 / 1024 / 1024),0)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then write2Log ""Error: CheckDiskSpace WMI ExecQuery = "" & Err.number & "" "" & Err.Description  ");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"	CheckDiskSpace = Tmp");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMISvc = Nothing");
        //                loStringBuilder.AppendLine(@"	Set colDisks = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	Reboot");
        //                loStringBuilder.AppendLine(@"' Function:	Reboots the System");
        //                loStringBuilder.AppendLine(@"' Parameter:	Return code for install process");
        //                loStringBuilder.AppendLine(@"' Return:       no return");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub Reboot(BootReturnCode)");
        //                loStringBuilder.AppendLine(@"	Dim tmp");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	If Not ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		write2log(""Installation on Master PC, skipping reboot..."")");
        //                loStringBuilder.AppendLine(@"	Else  ");
        //                loStringBuilder.AppendLine(@"		' Show Reboot window");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			If fso.FileExists(IniFileName) Then ");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2Log(VbTab & ""=>> Return code from script = "" & BootReturnCode)");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2log(""Showing reboot window..."")");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				tmp = wso.Run(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34) & "" --file="" & IniFileName & "" --mode=5"",,True)");
        //                loStringBuilder.AppendLine(@"				write2log(""Reboot window closed, reboot initiated."")");
        //                loStringBuilder.AppendLine(@"				write2Log(""************************************************ END ******************************************************"")");
        //                loStringBuilder.AppendLine(@"				Set fso = Nothing");
        //                loStringBuilder.AppendLine(@"				Set wso = Nothing");
        //                loStringBuilder.AppendLine(@"				Set WshNetwork = Nothing");
        //                loStringBuilder.AppendLine(@"				Wscript.Quit(BootReturnCode)");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				ExitScript ""Cannot show reboot window! "" & IniFileName & "" was not found!"" & VbCrLf & ""Exiting..."", 1602");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			ExitScript ""Cannot show reboot window! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "" & VbCrLf & ""Exiting..."", 1602");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StopServices");
        //                loStringBuilder.AppendLine(@"' Function:	Stop service.");
        //                loStringBuilder.AppendLine(@"' Parameter:    List of services for stop as a hash separated list [String]");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StopServices(T_Services)");
        //                loStringBuilder.AppendLine(@"	Dim Services,ServiceName");
        //                loStringBuilder.AppendLine(@"	'On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	Services = Split(T_Services,""#"")");
        //                loStringBuilder.AppendLine(@"	For Each ServiceName In Services");
        //                loStringBuilder.AppendLine(@"		StopService ServiceName, True");
        //                loStringBuilder.AppendLine(@"	Next ");
        //                loStringBuilder.AppendLine(@"	'On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StopService");
        //                loStringBuilder.AppendLine(@"' Function:	Stop service.");
        //                loStringBuilder.AppendLine(@"' Parameter:    Name of service to stop ");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub StopService(ServiceName, Waitforstopservice)");
        //                loStringBuilder.AppendLine(@"	Dim objWMIService, objService, oService, Result");
        //                loStringBuilder.AppendLine(@"	On error resume next");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set objService = objWMIService.Get(""Win32_Service.Name='"" & ServiceName & ""'"")");
        //                loStringBuilder.AppendLine(@"	If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""Warning:  StopService .Get Win32_Service.Name  = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If Not objService.Started Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""The service "" & ServiceName & "" is Not started""");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If Not objService.AcceptStop Then");
        //                loStringBuilder.AppendLine(@"		write2Log ""The service "" & ServiceName & "" does Not accept stop command""");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	Result  = objService.StopService");
        //                loStringBuilder.AppendLine(@"	If 0 <> Result Then");
        //                loStringBuilder.AppendLine(@"		write2Log  ""Stop "" & ServiceName & "" error: "" & Result");
        //                loStringBuilder.AppendLine(@"		on error goto 0  ");
        //                loStringBuilder.AppendLine(@"		Exit Sub");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Do While objService.Started And Waitforstopservice");
        //                loStringBuilder.AppendLine(@"		Set objService = objWMIService.Get(""Win32_Service.Name='"" & ServiceName & ""'"")");
        //                loStringBuilder.AppendLine(@"		If Err <> 0 Then");
        //                loStringBuilder.AppendLine(@"			write2Log ""Warning:  StopService .Started .Get Win32_Service.Name  = "" & Err.number & "" "" & Err.Description");
        //                loStringBuilder.AppendLine(@"			on error goto 0  ");
        //                loStringBuilder.AppendLine(@"			exit Sub");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2Log ""Service "" & ServiceName & "" "" & objService.State & "" "" & objService.Status");
        //                loStringBuilder.AppendLine(@"		Wscript.Sleep 300");
        //                loStringBuilder.AppendLine(@"	Loop  ");
        //                loStringBuilder.AppendLine(@"	on error goto 0  ");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	WaitForOpenApps");
        //                loStringBuilder.AppendLine(@"' Function:	wait until all given processes are closed by user.");
        //                loStringBuilder.AppendLine(@"' Parameter:    List of processes to wait for close as a hash separated list [String]");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function WaitForOpenApps(processnames, killproc, ToBeStopServices)");
        //                loStringBuilder.AppendLine(@"	Dim iButton, strMessage, strMessage2, processes, kprocesses, i, found, Chk, repeats");
        //                loStringBuilder.AppendLine(@"	Dim Appnames, processName");
        //                loStringBuilder.AppendLine(@"	Dim OpenApps, OpenAppsName, Apps, AppsName, j");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	OpenApps = ""NLNOTES.EXE#OUTLOOK.EXE#WINWORD.EXE#POWERPNT.EXE#IEXPLORE.EXE#ACRORD32.EXE#ACROBAT.EXE#VISIO.EXE#MSACCESS.EXE#EXCEL.EXE#INFOPATH.EXE""");
        //                loStringBuilder.AppendLine(@"	OpenAppsName = ""Lotus Notes#Microsoft Outlook#Microsoft Word#Microsoft Powerpoint#Internet Explorer#Adobe Acrobat Reader#Adobe Acrobat Writer#Microsoft Visio#Microsoft Access#Microsoft Excel#Microsoft Office 2003 Infopath""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Apps = Split(OpenApps, ""#"")");
        //                loStringBuilder.AppendLine(@"	AppsName = Split(OpenAppsName, ""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	processes = Split(processnames,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If WaitToKillProcess = True Then");
        //                loStringBuilder.AppendLine(@"		kprocesses = Split(processnames,""#"")");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		kprocesses = Split(killproc,""#"")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	found = False");
        //                loStringBuilder.AppendLine(@"	Chk = True");
        //                loStringBuilder.AppendLine(@"	appnames = """"");
        //                loStringBuilder.AppendLine(@"	strmessage = ""Please close all the following applications. Press OK when done."" & vbCrLf & vbCrLf");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Run precheck to find out if message box has to be displayed");
        //                loStringBuilder.AppendLine(@"	For i = 0 to UBound(processes)");
        //                loStringBuilder.AppendLine(@"		If CheckProcess(processes(i)) Then");
        //                loStringBuilder.AppendLine(@"			found = True");
        //                loStringBuilder.AppendLine(@"			processName = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"				If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"					processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"					Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			Next");
        //                loStringBuilder.AppendLine(@"			If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If found Then");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"		If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"			repeats = 1");
        //                loStringBuilder.AppendLine(@"		Else ");
        //                loStringBuilder.AppendLine(@"			repeats = 3");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		While Chk");
        //                loStringBuilder.AppendLine(@"			WScript.Sleep 2000");
        //                loStringBuilder.AppendLine(@"			Chk = False");
        //                loStringBuilder.AppendLine(@"			If repeats = 3 Then ");
        //                loStringBuilder.AppendLine(@"				appnames = """"");
        //                loStringBuilder.AppendLine(@"				For i = 0 to UBound(kprocesses)");
        //                loStringBuilder.AppendLine(@"					If CheckProcess(kprocesses(i)) Then");
        //                loStringBuilder.AppendLine(@"						processName = """"");
        //                loStringBuilder.AppendLine(@"						For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"							If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"								processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"								Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"							End If");
        //                loStringBuilder.AppendLine(@"						Next");
        //                loStringBuilder.AppendLine(@"						If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"						Chk = True");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Next");
        //                loStringBuilder.AppendLine(@"				If Appnames <> """" Then");
        //                loStringBuilder.AppendLine(@"					strMessage2 = ""The following applications are still open and will be closed automatically after pressing OK"" & vbCrLf & vbCrLf & _");
        //                loStringBuilder.AppendLine(@"											""IMPORTANT: Please make sure all your work is saved. "" & VbCrLf & VbCrLf");
        //                loStringBuilder.AppendLine(@"					If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"						iButton = MessageBox(strMessage2 & Appnames)");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"					For i = 0 to UBound(kprocesses)");
        //                loStringBuilder.AppendLine(@"						If CheckProcess(kprocesses(i)) Then KillProcess(kprocesses(i))");
        //                loStringBuilder.AppendLine(@"					Next");
        //                loStringBuilder.AppendLine(@"				End If	");
        //                loStringBuilder.AppendLine(@"				Appnames = """"");
        //                loStringBuilder.AppendLine(@"				For i = 0 to UBound(processes)");
        //                loStringBuilder.AppendLine(@"					If CheckProcess(processes(i)) Then");
        //                loStringBuilder.AppendLine(@"						processName = """"");
        //                loStringBuilder.AppendLine(@"						For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"							If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"								processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"								Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"							End If");
        //                loStringBuilder.AppendLine(@"						Next");
        //                loStringBuilder.AppendLine(@"						If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"						Chk = True");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"				Next");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If Appnames <> """" Then ");
        //                loStringBuilder.AppendLine(@"					If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"						iButton = MessageBox(strMessage & Appnames)");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"					appnames = """"");
        //                loStringBuilder.AppendLine(@"					For i = 0 to UBound(processes)");
        //                loStringBuilder.AppendLine(@"						If CheckProcess(processes(i)) Then");
        //                loStringBuilder.AppendLine(@"							processName = """"");
        //                loStringBuilder.AppendLine(@"							For j=0 to UBound(Apps)");
        //                loStringBuilder.AppendLine(@"								If InStr(UCase(processes(i)), UCase(Apps(j))) > 0 Then ");
        //                loStringBuilder.AppendLine(@"									processName = ""Found!""");
        //                loStringBuilder.AppendLine(@"									Appnames = Appnames & AppsName(j) & "" (Process : "" & processes(i) & "")"" & vbCrLf");
        //                loStringBuilder.AppendLine(@"								End If");
        //                loStringBuilder.AppendLine(@"							Next");
        //                loStringBuilder.AppendLine(@"							If processName = """" Then Appnames = Appnames & UCase(processes(i)) & vbCrLf");
        //                loStringBuilder.AppendLine(@"							Chk = True");
        //                loStringBuilder.AppendLine(@"						End If");
        //                loStringBuilder.AppendLine(@"					Next");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If	");
        //                loStringBuilder.AppendLine(@"			If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"				repeats = repeats + 1");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"		Wend");
        //                loStringBuilder.AppendLine(@"		If ToBeStopServices <> """" Then StopServices(ToBeStopServices)");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		If ToBeStopServices <> """" Then StopServices(ToBeStopServices)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	WaitForOpenApps = True");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	BuildInstalledProductMatrix");
        //                loStringBuilder.AppendLine(@"' Function:	Checks If given MSI Products are installed and writes info back to global array");
        //                loStringBuilder.AppendLine(@"' Parameter:    Comma separated list of productcodes");
        //                loStringBuilder.AppendLine(@"' Return:       None");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub BuildInstalledProductMatrix(ListOfProducts)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim Products, liste, iExists");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If (ListOfProducts <> """") Then");
        //                loStringBuilder.AppendLine(@"		Write2Log(""Installed product matrix"")");
        //                loStringBuilder.AppendLine(@"		Write2Log(""-----------------------------------"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Products = Split(ListOfProducts,""#"")");
        //                loStringBuilder.AppendLine(@"		ProductMatrix = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		For liste = 0 to UBound(Products)");
        //                loStringBuilder.AppendLine(@"			iExists = (InStr(Products(liste), ""I::"") > 0)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If iExists Then Products(liste) = Replace(Products(liste), ""I::"", """")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			Write2Log(liste + 1 & "")===> "" & Products(liste))");
        //                loStringBuilder.AppendLine(@"			If (ProductExists(Products(liste))) Then");
        //                loStringBuilder.AppendLine(@"				If iExists Then Products(liste) = Replace(Products(liste), ""{"", ""I::{"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				If ProductMatrix = """" Then");
        //                loStringBuilder.AppendLine(@"					ProductMatrix = ProductMatrix & Products(liste)");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					If Not Instr(ProductMatrix, Products(liste)) > 0 Then ProductMatrix = ProductMatrix & ""#"" & Products(liste)				");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			Write2Log("""")");
        //                loStringBuilder.AppendLine(@"			Write2Log(""-----------------------------------"")");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	ProductExists");
        //                loStringBuilder.AppendLine(@"' Function:		Check if product is installed");
        //                loStringBuilder.AppendLine(@"' Parameter:	ProductCode (GUID)");
        //                loStringBuilder.AppendLine(@"' Return:       True return if found else False return");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ProductExists(ProductGUID)");
        //                loStringBuilder.AppendLine(@"	ProductExists = False");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Key_Exists_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(ProductGUID) & ""\SourceList\PackageName"") Or _");
        //                loStringBuilder.AppendLine(@"	Key_Exists_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"" & ProductGUID & ""\DisplayName"") Then");
        //                loStringBuilder.AppendLine(@"		ProductExists = True");
        //                loStringBuilder.AppendLine(@"		Write2Log (""Product GUID found: "" & ProductGUID)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If (Reg_Read_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(ProductGUID) & ""\ProductName"") <> ""##ERR"") Then");
        //                loStringBuilder.AppendLine(@"			Write2Log (""ProductName: "" & Reg_Read_Str(""HKLM\SOFTWARE\Classes\Installer\Products\"" & ReverseGUID(ProductGUID) & ""\ProductName""))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Write2Log (""Product GUID not found: "" & ProductGUID)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StartUninstallations");
        //                loStringBuilder.AppendLine(@"' Function:	This Function handles all uninstallations");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       Returncode of uninstallation command; In case or error the first error is returned");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StartUninstallations");
        //                loStringBuilder.AppendLine(@"	Dim Uninstalls, Chk, tmp, i_loop, ReturnCode, ErrorCode, pctPoz, restoreDCOM,USParameters, tmplog");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReturnCode = 0");
        //                loStringBuilder.AppendLine(@"	ErrorCode = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Write2Log("""")");
        //                loStringBuilder.AppendLine(@"	Write2Log(""---------------------Start Uninstallations---------------------"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ProductMatrix <> """" Then");
        //                loStringBuilder.AppendLine(@"		' split it up");
        //                loStringBuilder.AppendLine(@"		Uninstalls = Split(ProductMatrix,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i_loop = 0 to UBound(Uninstalls)");
        //                loStringBuilder.AppendLine(@"			' msi uninstallation log file");
        //                loStringBuilder.AppendLine(@"			tmplog = MSILogDir & PackageID & ""_Uninst("" & i_loop & "").log""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			restoreDCOM = False");
        //                loStringBuilder.AppendLine(@"			pctPoz = InStr(Uninstalls(i_loop), ""::"")");
        //                loStringBuilder.AppendLine(@"			If pctPoz > 0 Then");
        //                loStringBuilder.AppendLine(@"				If InStr(Left(Uninstalls(i_loop),(pctPoz + 1)),""I"") > 0 Then");
        //                loStringBuilder.AppendLine(@"					restoreDCOM = True");
        //                loStringBuilder.AppendLine(@"				End If  ");
        //                loStringBuilder.AppendLine(@"				Uninstalls(i_loop) = Right(Uninstalls(i_loop),Len(Uninstalls(i_loop))- (pctPoz + 1))");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If ProductExists(Uninstalls(i_loop)) Then");
        //                loStringBuilder.AppendLine(@"				' Check and pause instalaltion if vulscan or msi is running");
        //                loStringBuilder.AppendLine(@"				PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				If restoreDCOM Then");
        //                loStringBuilder.AppendLine(@"					SetDCOMInstallShieldAppIDs(""DELETE"")");
        //                loStringBuilder.AppendLine(@"				End If ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				tmp = ""msiexec /x "" & Uninstalls(i_loop) & "" /l*v "" & Chr(34) & tmplog & Chr(34) & "" REBOOT=ReallySuppress"" & InstallSwitch");
        //                loStringBuilder.AppendLine(@"				write2Log(""Running commandline for uninstallation: "" & tmp)");
        //                loStringBuilder.AppendLine(@"				Chk = wso.run (tmp,,True)");
        //                loStringBuilder.AppendLine(@"				write2log("""")");
        //                loStringBuilder.AppendLine(@"				ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"				If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"					write2Log(VbTab & ""=> Uninstallation sequence returned: success"")");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					If ErrorCode = 0 Then ErrorCode = ReturnCode");
        //                loStringBuilder.AppendLine(@"					write2Log(VbTab & ""=> Error: Uninstallation sequence returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"					write2Log(VbTab & ""Note: This error will be ignored and not be returned. Continue with sequence..."")");
        //                loStringBuilder.AppendLine(@"				End If		");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				If restoreDCOM Then");
        //                loStringBuilder.AppendLine(@"					SetDCOMInstallShieldAppIDs(""WRITE"")");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If LegacyUninstall <> """" Then");
        //                loStringBuilder.AppendLine(@"		' Check and pause instalaltion if vulscan or msi is running");
        //                loStringBuilder.AppendLine(@"		PreInstallCheck()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		' split it up");
        //                loStringBuilder.AppendLine(@"		Uninstalls = Split(LegacyUninstall,""#"")");
        //                loStringBuilder.AppendLine(@"		If AdditionalLegacyUninstallParameters <> """" Then USParameters = Split(AdditionalLegacyUninstallParameters,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i_loop = 0 to UBound(Uninstalls)");
        //                loStringBuilder.AppendLine(@"			write2Log(""Uninstall Job found: "" & Uninstalls(i_loop))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			If AdditionalLegacyUninstallParameters <> """" Then");
        //                loStringBuilder.AppendLine(@"				tmp = Chr(34) & ParseConst(Uninstalls(i_loop)) & Chr(34) & "" "" & ParseConst(USParameters(i_loop))");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				tmp = Chr(34) & ParseConst(Uninstalls(i_loop)) & Chr(34)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			write2Log(""Running commandline for uninstallation: "" & tmp)");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			Chk = wso.run(tmp,,True)");
        //                loStringBuilder.AppendLine(@"			write2log("""")");
        //                loStringBuilder.AppendLine(@"			ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"			If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"				write2Log(VbTab & ""=> Uninstallation sequence returned: success"")");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If ErrorCode = 0 Then ErrorCode = ReturnCode");
        //                loStringBuilder.AppendLine(@"				write2Log(vbTab & ""=> Error: Uninstallation sequence returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"				write2Log(vbTab & ""Note: This error will be ignored and not be returned. Continue with sequence..."")");
        //                loStringBuilder.AppendLine(@"			End If		");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Write2Log(""---------------------End Uninstallations-----------------------"")");
        //                loStringBuilder.AppendLine(@"	Write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	StartUninstallations = ErrorCode");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StartLegacySetup");
        //                loStringBuilder.AppendLine(@"' Function:	This Function starts a legacy setup (e.g. the setup.exe of a package)");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       Returncode of legacy setup");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StartLegacySetup(Installer, Para)");
        //                loStringBuilder.AppendLine(@"	Dim Legacy, CMD, ReturnCode, tmp, Chk");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReturnCode = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Installer <> """" Then ");
        //                loStringBuilder.AppendLine(@"		Legacy = ParseConst(Installer)");
        //                loStringBuilder.AppendLine(@"		CMD = ParseConst(Para)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		write2Log(""Legacy setup job found: "" & Legacy)");
        //                loStringBuilder.AppendLine(@"		If Para <> """" Then");
        //                loStringBuilder.AppendLine(@"			tmp = Chr(34) & Legacy & Chr(34) & "" "" & CMD");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			tmp = Chr(34) & Legacy & Chr(34)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2Log(""Running commandline for legacy setup : "" & tmp)");
        //                loStringBuilder.AppendLine(@"		Chk = wso.run (tmp,,True)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		write2log("""")");
        //                loStringBuilder.AppendLine(@"		ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> Legacy setup returned: success"")");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> Error: Legacy setup returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	StartLegacySetup = ReturnCode");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StartMSIInstallations");
        //                loStringBuilder.AppendLine(@"' Function:	This Function handles all MSI Installations");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       Returncode of MSI Installation command; In case of error the first error is returned.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StartMSIInstallations(Installer, Para)");
        //                loStringBuilder.AppendLine(@"	Dim MSI, CMD, tmp, Chk, ReturnCode, rPath, tmpstr, tmpPoz, tmpMSI, pctPoz, restoreDCOM");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReturnCode = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Installer <> """" Then");
        //                loStringBuilder.AppendLine(@"		MSI = ParseConst(Installer)");
        //                loStringBuilder.AppendLine(@"		CMD = ParseConst(Para)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		restoreDCOM = False");
        //                loStringBuilder.AppendLine(@"		pctPoz = InStr(MSI, ""::"")");
        //                loStringBuilder.AppendLine(@"		If pctPoz > 0 Then");
        //                loStringBuilder.AppendLine(@"			If InStr(Left(MSI,(pctPoz + 1)),""I"") > 0 Then");
        //                loStringBuilder.AppendLine(@"				SetDCOMInstallShieldApPIDs(""DELETE"")");
        //                loStringBuilder.AppendLine(@"				restoreDCOM = True");
        //                loStringBuilder.AppendLine(@"			End If  ");
        //                loStringBuilder.AppendLine(@"			MSI = Right(MSI,Len(MSI)- (pctPoz + 1))");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		write2Log(""MSI install job found: "" & MSI)");
        //                loStringBuilder.AppendLine(@"		tmpMSI = Replace(Mid(MSI, InstrRev(MSI, ""%"") + 1, Len(MSI) - InstrRev(MSI, ""%"")),"".msi"","".log"",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpPoz = InStrRev(tmpMSI,Chr(92))");
        //                loStringBuilder.AppendLine(@"		If tmpPoz>0 Then tmpMSI = Mid(tmpMSI,tmpPoz+1, Len(tmpMSI)-tmpPoz)");
        //                loStringBuilder.AppendLine(@"		If CMD <> """" Then");
        //                loStringBuilder.AppendLine(@"			If InStr(1,CMD, ""TRANSFORMS="",1) and not InStr(1,CMD, ""TRANSFORMS=:"",1) Then");
        //                loStringBuilder.AppendLine(@"				CMD = Replace(CMD, ""TRANSFORMS="",""TRANSFORMS="""""",1,1,1)");
        //                loStringBuilder.AppendLine(@"				If InStr(1,CMD, "".mst "",1) Then");
        //                loStringBuilder.AppendLine(@"					CMD = Replace(CMD, "".mst "","".mst"""" "",1,-1,1)");
        //                loStringBuilder.AppendLine(@"				Else");
        //                loStringBuilder.AppendLine(@"					CMD = CMD & Chr(34)");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			If InStr(1,CMD, ""TRANSFORMS=:"",1) Then");
        //                loStringBuilder.AppendLine(@"				CMD = Replace(CMD, ""TRANSFORMS="",""TRANSFORMS="""""",1,1,1)");
        //                loStringBuilder.AppendLine(@"				CMD = Replace(CMD, "".mst;"","".mst;"",1,-1,1)");
        //                loStringBuilder.AppendLine(@"				If InStr(1,CMD, "".mst "",1) Then");
        //                loStringBuilder.AppendLine(@"					CMD = Replace(CMD, "".mst "","".mst"""" "",1,-1,1)");
        //                loStringBuilder.AppendLine(@"				Else ");
        //                loStringBuilder.AppendLine(@"					CMD = CMD & Chr(34)");
        //                loStringBuilder.AppendLine(@"				End If");
        //                loStringBuilder.AppendLine(@"			End If	");
        //                loStringBuilder.AppendLine(@"			tmp = ""msiexec /i "" & Chr(34) & MSI & Chr(34) & "" /l*v "" & Chr(34) & MSILogDir & tmpMSI & Chr(34) & "" "" & CMD  & "" REBOOT=ReallySuppress ALLUSERS=1 ALLOWINSTALL=1"" & InstallSwitch");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			tmp = ""msiexec /i "" & Chr(34) & MSI & Chr(34) & "" /l*v "" & Chr(34) & MSILogDir & tmpMSI & Chr(34) & "" REBOOT=ReallySuppress ALLUSERS=1 ALLOWINSTALL=1"" & InstallSwitch");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2log(""Running commandline for MSI installation: "" & Replace(tmp,""ALLOWINSTALL=1"",""""))");
        //                loStringBuilder.AppendLine(@"		Chk = wso.run (tmp,,True)");
        //                loStringBuilder.AppendLine(@"		write2log("""")");
        //                loStringBuilder.AppendLine(@"		ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		arrLogFiles = arrLogFiles & ""#"" & MSILogDir & tmpMSI");
        //                loStringBuilder.AppendLine(@"		If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> MSI installation sequence returned: success"")");
        //                loStringBuilder.AppendLine(@"			write2Log("""")");
        //                loStringBuilder.AppendLine(@"			tmpstr = MSI");
        //                loStringBuilder.AppendLine(@"			rPath = Mid(tmpstr,1,InStrRev(tmpstr,""\"") - 1)");
        //                loStringBuilder.AppendLine(@"			If Mid(rPath, InStrRev(rPath, ""\"") + 1, Len(rPath) - InStrRev(rPath, ""\"")) <> PackageID Then ");
        //                loStringBuilder.AppendLine(@"				rPath = Mid(rPath, InStrRev(rPath, ""\"") + 1, Len(rPath) - InStrRev(rPath, ""\""))");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				rPath = """"");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			AddNetworkSourceListEntry Mid(tmpstr, InStrRev(tmpstr, ""\"") + 1, Len(tmpstr) - InStrRev(tmpstr, ""\"")), rPath");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> Error: MSI installation sequence returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"			If MSIRollback Then");
        //                loStringBuilder.AppendLine(@"				write2Log("""")");
        //                loStringBuilder.AppendLine(@"				write2Log(VbTab & ""=>> Starting Rollback..."")");
        //                loStringBuilder.AppendLine(@"				tmp = ""msiexec /x "" & Chr(34) & MSI & Chr(34) & "" REBOOT=ReallySuppress"" & InstallSwitch");
        //                loStringBuilder.AppendLine(@"				Chk = wso.run (Tmp,,True)");
        //                loStringBuilder.AppendLine(@"				write2log("""")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2Log("""")	");
        //                loStringBuilder.AppendLine(@"		If restoreDCOM Then");
        //                loStringBuilder.AppendLine(@"			SetDCOMInstallShieldAppIDs(""WRITE"")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	StartMSIInstallations = ReturnCode");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName:	StartPatchInstallations");
        //                loStringBuilder.AppendLine(@"' Function:	This Function handles all patch installations");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       Returncode of patch installation command; In case or error the first error is returned.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function StartPatchInstallations(Installer, Para)");
        //                loStringBuilder.AppendLine(@"	Dim Patch, PatchParameter, Chk, tmp, ReturnCode, ErrorCode, tmpPoz, tmpPatch, rPath, tmpstr");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReturnCode = 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Installer <> """" Then");
        //                loStringBuilder.AppendLine(@"		Patch = ParseConst(Installer)");
        //                loStringBuilder.AppendLine(@"		PatchParameter = ParseConst(Para)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		write2Log(""Patch install Job found: "" & Patch)");
        //                loStringBuilder.AppendLine(@"		tmpPatch = Replace(Mid(Patch, InstrRev(Patch, ""%"") + 1, Len(Patch) - InstrRev(Patch, ""%"")),"".msp"","".log"",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpPoz = InStrRev(tmpPatch,Chr(92))");
        //                loStringBuilder.AppendLine(@"		If tmpPoz>0 Then tmpPatch = Mid(tmpPatch,tmpPoz+1, Len(tmpPatch)-tmpPoz)");
        //                loStringBuilder.AppendLine(@"		If Para <> """" Then");
        //                loStringBuilder.AppendLine(@"			tmp = ""msiexec /p "" & Chr(34) & Patch & Chr(34) & "" /l*v "" & Chr(34) & MSILogDir & tmpPatch & Chr(34) & "" REBOOT=ReallySuppress "" & PatchParameter & InstallSwitch");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			tmp = ""msiexec /p "" & Chr(34) & Patch & Chr(34) & "" /l*v "" & Chr(34) & MSILogDir & tmpPatch & Chr(34) & "" REBOOT=ReallySuppress"" & InstallSwitch");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2log(""running commandline for patch installation: "" & tmp)");
        //                loStringBuilder.AppendLine(@"		Chk = wso.run (Tmp,,True)");
        //                loStringBuilder.AppendLine(@"		If MultipleTargetPatch = True Then ");
        //                loStringBuilder.AppendLine(@"			write2log(""Multiple target patch detected, waiting for patch to finish..."")");
        //                loStringBuilder.AppendLine(@"			Do While CheckPatchProcess(Patch)");
        //                loStringBuilder.AppendLine(@"				WScript.Sleep 2000");
        //                loStringBuilder.AppendLine(@"			Loop");
        //                loStringBuilder.AppendLine(@"			write2log(""Multiple target patch finished!"")");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2log("""")");
        //                loStringBuilder.AppendLine(@"		ReturnCode = MSIErrorHandler(Chk)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		arrLogFiles = arrLogFiles & ""#"" & MSILogDir & tmpPatch");
        //                loStringBuilder.AppendLine(@"		If ReturnCode = 0 Then");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> Patch installation sequence returned: success"")");
        //                loStringBuilder.AppendLine(@"			tmpstr = Patch");
        //                loStringBuilder.AppendLine(@"			rPath = Mid(tmpstr,1,InStrRev(tmpstr,""\"") - 1)");
        //                loStringBuilder.AppendLine(@"			If Mid(rPath, InStrRev(rPath, ""\"") + 1, Len(rPath) - InStrRev(rPath, ""\"")) <> PackageID Then ");
        //                loStringBuilder.AppendLine(@"				rPath = Mid(rPath, InStrRev(rPath, ""\"") + 1, Len(rPath) - InStrRev(rPath, ""\""))");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				rPath = """"");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			AddNetworkSourceListEntry Mid(tmpstr, InStrRev(tmpstr, ""\"") + 1, Len(tmpstr) - InStrRev(tmpstr, ""\"")), rPath");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2Log(VbTab & ""=> Error: Patch installation sequence returned: "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	StartPatchInstallations = ReturnCode");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DisplayProgressBar");
        //                loStringBuilder.AppendLine(@"' Function:	Displays a progress bar window, to be used during pre-/post-installation");
        //                loStringBuilder.AppendLine(@"'           	if there are time-consuming tasks done silently");
        //                loStringBuilder.AppendLine(@"' Parameter:    1 for pre-installation progress bar, 2 for post-installation progress bar");
        //                loStringBuilder.AppendLine(@"' Return:       PID of ProgressBar process");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DisplayProgressBar(Mode)");
        //                loStringBuilder.AppendLine(@"	Dim oBar");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			Set oBar = wso.Exec(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34)& "" --mode="" & Mode)");
        //                loStringBuilder.AppendLine(@"			wso.AppActivate oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"			DisplayProgressBar = oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Cannot show progress bar! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "")");
        //                loStringBuilder.AppendLine(@"		End If   ");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	on error goto 0 ");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DisplayCustomProgressBar");
        //                loStringBuilder.AppendLine(@"' Function:	Displays a progress bar window with a custom message");
        //                loStringBuilder.AppendLine(@"' Parameter:    the message that has to be displayed");
        //                loStringBuilder.AppendLine(@"' Return:       PID of ProgressBar process");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DisplayCustomProgressBar(Caption)");
        //                loStringBuilder.AppendLine(@"	Dim oBar");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	If ShowMessageBoxes Then");
        //                loStringBuilder.AppendLine(@"		If fso.FileExists(SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"") Then");
        //                loStringBuilder.AppendLine(@"			Set oBar = wso.Exec(Chr(34) & SysRoot & ""DSClient\DS_SIE\DS_SIE.exe"" & Chr(34)& "" --caption="" & Caption)");
        //                loStringBuilder.AppendLine(@"			wso.AppActivate oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"			DisplayCustomProgressBar = oBar.ProcessID");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			write2log(""Cannot show progress bar! DS_SIE.exe was not found in the folder "" & SysRoot & ""DSClient\DS_SIE\ "")");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"	on error goto 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	KillProgressBar");
        //                loStringBuilder.AppendLine(@"' Function:	Kills a progress bar window, ");
        //                loStringBuilder.AppendLine(@"' Parameter:    PID of ProgressBar process");
        //                loStringBuilder.AppendLine(@"' Return:       True on success, False on error");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub KillProgressBar(PID)");
        //                loStringBuilder.AppendLine(@"	Call KillPID(PID)");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	CheckPendingFileRename");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for Pending File Rename");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckPendingFileRename()");
        //                loStringBuilder.AppendLine(@"	CheckPendingFileRename = Key_Exists_Str(""HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	CheckRebootPending");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for Reboot Pending");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CheckRebootPending()");
        //                loStringBuilder.AppendLine(@"	CheckRebootPending = Reg_Hive_Exists(""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending"")");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	PendingReboot");
        //                loStringBuilder.AppendLine(@"' Function:	Checks for a pending reboot ");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function PendingReboot");
        //                loStringBuilder.AppendLine(@"	write2log(""Pre-installation check : checking if there is a pending reboot scheduled..."")");
        //                loStringBuilder.AppendLine(@"	If CheckPendingFileRename or  CheckRebootPending Then");
        //                loStringBuilder.AppendLine(@"		write2log(""WARNING: A pending reboot was reported from the operating system, previous installation might not completed succesfully!"")");
        //                loStringBuilder.AppendLine(@"		write2log(""This warning is only for your information, no additional steps are being done."")");
        //                loStringBuilder.AppendLine(@"		write2Log("""")");
        //                loStringBuilder.AppendLine(@"		PendingReboot =  True");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		PendingReboot  = False");
        //                loStringBuilder.AppendLine(@"		write2log(""No pending reboot is found."")");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	StartLANDeskInventory");
        //                loStringBuilder.AppendLine(@"' Function:	Handles starting LanDesk Inventory");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       none");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub StartLANDeskInventory");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun, tmpCoreServer, LDCmd");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	LDCmd = """"""%ProgramFiles%\LANDesk\LDClient\LDIScn32.exe"""" /NTT=%CoreServer%:5007 /S=%CoreServer%  /I=HTTP://%CoreServer%/ldlogon/ldappl3.ldz""");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	tmpCmd = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\LANDeskInventoryClient"")");
        //                loStringBuilder.AppendLine(@"	If (tmpCmd = ""##ERR"") Then");
        //                loStringBuilder.AppendLine(@"		On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"		On Error Resume Next");
        //                loStringBuilder.AppendLine(@"		tmpCoreServer = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Intel\LANDesk\LDWM\CoreServer"")");
        //                loStringBuilder.AppendLine(@"		If (tmpCoreServer = ""##ERR"") Then");
        //                loStringBuilder.AppendLine(@"			write2log ""Could not start LANDesk Inventory!""");
        //                loStringBuilder.AppendLine(@"			write2log ""Make sure you have the LANDesk Agent installed on this machine...""");
        //                loStringBuilder.AppendLine(@"			Exit Sub");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			tmpCmd = Replace(LDCmd, ""%CoreServer%"",tmpCoreServer)");
        //                loStringBuilder.AppendLine(@"			If fso.FolderExists(ProgramFiles & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"				tmpCmd = Replace(tmpCmd, ""%ProgramFiles%"",Left(ProgramFiles, Len(ProgramFiles)-1))");
        //                loStringBuilder.AppendLine(@"			Else ");
        //                loStringBuilder.AppendLine(@"				Dim ProgramFilesx86");
        //                loStringBuilder.AppendLine(@"				ProgramFilesx86 = Wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"				If Right(ProgramFilesx86,1) <> ""\"" Then ProgramFilesx86 = ProgramFilesx86 & ""\""");
        //                loStringBuilder.AppendLine(@"				If ProgramFilesx86 <> ""%ProgramFiles(x86)%\"" And fso.FolderExists(ProgramFilesx86 & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"					tmpCmd = Replace(tmpCmd, ""%ProgramFiles%"",Left(ProgramFilesx86, Len(ProgramFilesx86)-1))");
        //                loStringBuilder.AppendLine(@"				End If  ");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If ");
        //                loStringBuilder.AppendLine(@"	Else  ");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /v"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /f-"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /f"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /noui"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(tmpCmd,"" /w=300"","""",1,1,1)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Select Case LANDeskInventory");
        //                loStringBuilder.AppendLine(@"	Case ""Hardware""");
        //                loStringBuilder.AppendLine(@"		tmpCmd = tmpCmd & "" /F- /RSS""");
        //                loStringBuilder.AppendLine(@"	Case ""Software""");
        //                loStringBuilder.AppendLine(@"		tmpCmd = tmpCmd & "" /F /NH""");
        //                loStringBuilder.AppendLine(@"	Case ""Both""");
        //                loStringBuilder.AppendLine(@"		tmpCmd = tmpCmd & "" /F""");
        //                loStringBuilder.AppendLine(@"	Case Else");
        //                loStringBuilder.AppendLine(@"		Exit Sub   ");
        //                loStringBuilder.AppendLine(@"	End Select");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	tmpCmd = tmpCmd & "" /noui""");
        //                loStringBuilder.AppendLine(@"	If InStr(1, tmpCmd, ""%ProgramFiles%"", 1) = 0 Then");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,False)");
        //                loStringBuilder.AppendLine(@"		write2log ""Running LANDesk Inventory Command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		write2log ""Started LANDesk Inventory, Inventory Type: "" & LANDeskInventory & "", return code: "" & tmpRun");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log ""Could not start LANDesk Inventory!""");
        //                loStringBuilder.AppendLine(@"		write2log ""Make sure you have the LANDesk Agent installed on this machine...""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	LANDeskStartAsUser");
        //                loStringBuilder.AppendLine(@"' Function:	Handles starting LanDesk StartAsUser");
        //                loStringBuilder.AppendLine(@"' Parameter:    none");
        //                loStringBuilder.AppendLine(@"' Return:       True/False or ERR -> don't find %ProgramFiles%\LANDesk\LDClient\StartAsUser.exe");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function LANDeskStartAsUser()");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun");
        //                loStringBuilder.AppendLine(@"	Dim LDCmd :: LDCmd = """"""%ProgramFiles%\LANDesk\LDClient\startasuser.exe""""  ///Silent """"%ProgramFiles%\LANDesk\LDClient\ldapwhoami.exe"""""" & "" -structured""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"  	If fso.FolderExists(ProgramFiles & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFiles, Len(ProgramFiles)-1))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else ");
        //                loStringBuilder.AppendLine(@"		Dim ProgramFilesx86");
        //                loStringBuilder.AppendLine(@"		ProgramFilesx86 = Wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"		If Right(ProgramFilesx86,1) <> ""\"" Then ProgramFilesx86 = ProgramFilesx86 & ""\""");
        //                loStringBuilder.AppendLine(@"		If ProgramFilesx86 <> ""%ProgramFiles(x86)%\"" And fso.FolderExists(ProgramFilesx86 & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"			tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFilesx86, Len(ProgramFilesx86)-1))");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(1, tmpCmd, ""%ProgramFiles%"", 1) = 0 Then");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,True)");
        //                loStringBuilder.AppendLine(@"		write2log ""Running LANDesk StartAsUser Command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		write2log ""Started LANDesk StartAsUser - return code: "" & tmpRun");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"		if tmpRun = ""-2147023651"" then LANDeskStartAsUser =  False");
        //                loStringBuilder.AppendLine(@"		if tmpRun = ""1"" then LANDeskStartAsUser =  True");
        //                loStringBuilder.AppendLine(@"		if tmpRun = ""0"" then LANDeskStartAsUser =  True");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log ""Could not start LANDesk StartAsUser!""");
        //                loStringBuilder.AppendLine(@"		write2log ""Make sure you have the LANDesk StartAsUser.exe installed on folder %ProgramFiles%\LANDesk\LDClient\""");
        //                loStringBuilder.AppendLine(@"		LANDeskStartAsUser = ""ERR""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	LANDeskSdclient");
        //                loStringBuilder.AppendLine(@"' Function:	Send message to core server");
        //                loStringBuilder.AppendLine(@"' Parameter:    text to send");
        //                loStringBuilder.AppendLine(@"' Return:       True or (False -> don't find %ProgramFiles%\LANDesk\LDClient\Sdclient.exe)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function LANDeskSDCLIENT(msg)");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun");
        //                loStringBuilder.AppendLine(@"	Dim LDCmd :: LDCmd = """"""%ProgramFiles%\LANDesk\LDClient\Sdclient.exe""""  /msg="" & Chr(34) & msg & Chr(34)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"  	If fso.FolderExists(ProgramFiles & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"		tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFiles, Len(ProgramFiles)-1))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Else ");
        //                loStringBuilder.AppendLine(@"		Dim ProgramFilesx86");
        //                loStringBuilder.AppendLine(@"		ProgramFilesx86 = Wso.ExpandEnvironmentStrings(""%ProgramFiles(x86)%"")");
        //                loStringBuilder.AppendLine(@"		If Right(ProgramFilesx86,1) <> ""\"" Then ProgramFilesx86 = ProgramFilesx86 & ""\""");
        //                loStringBuilder.AppendLine(@"		If ProgramFilesx86 <> ""%ProgramFiles(x86)%\"" And fso.FolderExists(ProgramFilesx86 & ""LANDesk"") Then");
        //                loStringBuilder.AppendLine(@"			tmpCmd = Replace(LDCmd, ""%ProgramFiles%"",Left(ProgramFilesx86, Len(ProgramFilesx86)-1))");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If  ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(1, tmpCmd, ""%ProgramFiles%"", 1) = 0 Then");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		write2log ""Running LANDesk Sdclient Command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,True)");
        //                loStringBuilder.AppendLine(@"		WScript.Sleep 3000");
        //                loStringBuilder.AppendLine(@"		If tmpRun = ""-1918091240"" Then write2log ""Message not send to Landesk core server.""");
        //                loStringBuilder.AppendLine(@"		If tmpRun =  ""1168"" Then write2log ""Message not send to Landesk core server.""	");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"		LANDeskSDCLIENT = True");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log ""Could not start LANDesk Sdclient!""");
        //                loStringBuilder.AppendLine(@"		write2log ""Make sure you have the LANDesk Sdclient.exe installed on folder %ProgramFiles%\LANDesk\LDClient\""");
        //                loStringBuilder.AppendLine(@"		'LANDeskSDCLIENT = ""ERR""");
        //                loStringBuilder.AppendLine(@"		LANDeskSDCLIENT = False");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"End function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: 	GetPatchPackCode");
        //                loStringBuilder.AppendLine(@"' Function: 		Returns the PackageCode of a patch");
        //                loStringBuilder.AppendLine(@"' Paramater:		Path to MSP");
        //                loStringBuilder.AppendLine(@"' Return: 		PackageCode of MSP (from the SIS)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetPatchPackCode(fMSP)");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"	Dim sInfo, msiFile, msiDB ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetPatchPackCode = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = objInstaller.OpenDatabase(fMSP, 32)");
        //                loStringBuilder.AppendLine(@"	Set sInfo = msiDB.SummaryInformation");
        //                loStringBuilder.AppendLine(@"	GetPatchPackCode = Left(sInfo.Property(9), 38)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = Nothing ");
        //                loStringBuilder.AppendLine(@"	Set sInfo = Nothing ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: 	GetMSIProdCode");
        //                loStringBuilder.AppendLine(@"' Function: 		Returns the ProductCode of an MSI");
        //                loStringBuilder.AppendLine(@"' Paramater:		Path to MSI");
        //                loStringBuilder.AppendLine(@"' Return: 		ProductCode of MSI (from Property table)");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function GetMSIProdCode(fMSI)");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetMSIProdCode = """"");
        //                loStringBuilder.AppendLine(@"	Dim msiDB, record, view");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = objInstaller.OpenDatabase(fMSI, 0)");
        //                loStringBuilder.AppendLine(@"	Set view = msiDB.OpenView(""SELECT * FROM Property"")");
        //                loStringBuilder.AppendLine(@"	view.Execute");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Do ");
        //                loStringBuilder.AppendLine(@"		Set record = view.Fetch");
        //                loStringBuilder.AppendLine(@"		If record Is Nothing Then Exit Do");
        //                loStringBuilder.AppendLine(@"		If record.StringData(1) = ""ProductCode"" Then ");
        //                loStringBuilder.AppendLine(@"			GetMSIProdCode = record.StringData(2)");
        //                loStringBuilder.AppendLine(@"			Exit Do");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	Loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set msiDB = Nothing");
        //                loStringBuilder.AppendLine(@"	Set record = Nothing");
        //                loStringBuilder.AppendLine(@"	Set view = Nothing");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: 	ReverseGUID");
        //                loStringBuilder.AppendLine(@"' Function: 		Returns the ""reversed GUID"" from a GUID");
        //                loStringBuilder.AppendLine(@"' Paramater:		GUID to be reversed");
        //                loStringBuilder.AppendLine(@"' Return: 		reversed GUID");
        //                loStringBuilder.AppendLine(@"' Author: 		Tudose Razvan");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReverseGUID(GUID)");
        //                loStringBuilder.AppendLine(@"	Dim testExp ");
        //                loStringBuilder.AppendLine(@"	Set testExp = New RegExp");
        //                loStringBuilder.AppendLine(@"	testExp.Pattern = ""\{[A-Za-z0-9]{8}\-[A-Za-z0-9]{4}\-[A-Za-z0-9]{4}\-[A-Za-z0-9]{4}\-[A-Za-z0-9]{12}\}""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If testExp.Test(GUID) = True Then ");
        //                loStringBuilder.AppendLine(@"		ReverseGUID = StrReverse(Mid(GUID,2,8)) & StrReverse(Mid(GUID,11,4)) & StrReverse(Mid(GUID,16,4)) & StrReverse(Mid(GUID,21,2)) & StrReverse(Mid(GUID,23,2)) & StrReverse(Mid(GUID,26,2)) & StrReverse(Mid(GUID,28,2)) & StrReverse(Mid(GUID,30,2)) & StrReverse(Mid(GUID,32,2)) & StrReverse(Mid(GUID,34,2)) & StrReverse(Mid(GUID,36,2))");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		ReverseGUID = """" ");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set testExp = Nothing");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	AddNetworkSourceListEntry");
        //                loStringBuilder.AppendLine(@"' Function:	Checks if Sourcepath for the package is on a network drive, and if not, ");
        //                loStringBuilder.AppendLine(@"'          	adds the network path to the package to the SourceList of the MSI/MSP");
        //                loStringBuilder.AppendLine(@"' Parameters:	Path to installation file (MSI/MSP) or Product Code GUID (EXE)");
        //                loStringBuilder.AppendLine(@"'		Relative Path of MSI/MSP compared to Sourcepath (e.g. ""$DSClient\"")");
        //                loStringBuilder.AppendLine(@"' Return:       True if successful, False if not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub AddNetworkSourceListEntry(FileNameOrGUID, RelPath)");
        //                loStringBuilder.AppendLine(@"	Dim pCode, sPath , rGUID, mVal, fPath");
        //                loStringBuilder.AppendLine(@"	On Error Resume Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Mid(Sourcepath,2,2) = "":\"" Or Mid(Sourcepath,1,2) <> ""\\"" Then ");
        //                loStringBuilder.AppendLine(@"		If NetworkSourcePath <> """" Then ");
        //                loStringBuilder.AppendLine(@"			sPath = NetworkSourcePath ");
        //                loStringBuilder.AppendLine(@"		Else ");
        //                loStringBuilder.AppendLine(@"			If SWRep = ""%DS_SWRep%\"" Then");
        //                loStringBuilder.AppendLine(@"				write2log("""")");
        //                loStringBuilder.AppendLine(@"				write2Log(""WARNING: Could not read the DS_SWREP environment variable! SourceList adding cancelled..."")");
        //                loStringBuilder.AppendLine(@"				Exit Sub");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				sPath = SWRep & PackageID");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If Right(sPath,1) <> ""\"" Then sPath = sPath & ""\""");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If RelPath <> """" Then");
        //                loStringBuilder.AppendLine(@"			sPath = sPath & RelPath & ""\""");
        //                loStringBuilder.AppendLine(@"			fPath  = Sourcepath & RelPath & ""\"" & FileNameOrGUID");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			fPath = Sourcepath & FileNameOrGUID");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Select Case Right(LCase(FileNameOrGUID),3)");
        //                loStringBuilder.AppendLine(@"		Case ""msi""");
        //                loStringBuilder.AppendLine(@"			pCode = GetMSIProdCode(fPath)");
        //                loStringBuilder.AppendLine(@"			If pCode <> """" Then");
        //                loStringBuilder.AppendLine(@"				objInstaller.AddSource pCode,"""",sPath");
        //                loStringBuilder.AppendLine(@"				If Err.Number = 0 Then write2log ""Added SourceList "" & sPath & "" to Product with ProductCode "" & pCode");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Case ""msp""");
        //                loStringBuilder.AppendLine(@"			pCode = GetPatchPackCode(fPath)");
        //                loStringBuilder.AppendLine(@"			rGUID = ReverseGUID(pCode)");
        //                loStringBuilder.AppendLine(@"			If rGUID <> """" Then");
        //                loStringBuilder.AppendLine(@"				If AddToPatchSourceList(rGUID, sPath) = True Then write2log ""Added SourceList #"" & CStr(mVal+1) & "": "" & sPath & "" to Patch with PackageCode "" & pCode ");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Case Else");
        //                loStringBuilder.AppendLine(@"			objInstaller.AddSource FileNameOrGUID,"""",sPath");
        //                loStringBuilder.AppendLine(@"			If Err.Number = 0 Then write2log ""Added SourceList "" & sPath & "" to Product with ProductCode "" & FileNameOrGUID");
        //                loStringBuilder.AppendLine(@"		End Select");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2Log(""SourceList adding cancelled..."")");
        //                loStringBuilder.AppendLine(@"		Exit Sub");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	ExitScript");
        //                loStringBuilder.AppendLine(@"' Function:	Exits the script with a given return code");
        //                loStringBuilder.AppendLine(@"' Parameters:	Message to be written to logfile");
        //                loStringBuilder.AppendLine(@"'		required exit code");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub ExitScript(ExitMessage, ReturnCode)");
        //                loStringBuilder.AppendLine(@"	If Not (ReturnCode = 0 Or ReturnCode = 3010) Or (InStr(ExitMessage,"" is already installed, exiting!"") > 0) Then");
        //                loStringBuilder.AppendLine(@"		If InStr(ExitMessage,"" is already installed, exiting!"") > 0 Then");
        //                loStringBuilder.AppendLine(@"			CustomMessageBox ExitMessage & vbCrLf & vbCrLf & ""For more details, please check the package log file."" & _");
        //                loStringBuilder.AppendLine(@"					vbCrLf & Logfilename, Null, Null, vbOKOnly + vbInformation");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			CustomMessageBox ExitMessage & vbCrLf & vbCrLf & ""For more details, please check the package log file."" & _");
        //                loStringBuilder.AppendLine(@"					vbCrLf & Logfilename, Null, Null, Null");
        //                loStringBuilder.AppendLine(@"			DeleteDSPID(PackageID)");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	' Kill installation progress bar");
        //                loStringBuilder.AppendLine(@"	If ShowProgressBar = True Then");
        //                loStringBuilder.AppendLine(@"		KillProgressBar(pbPID)");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(ExitMessage, VbCrLf) > 0 Then ExitMessage = Mid(ExitMessage, 1, InStr(ExitMessage, VbCrLf))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Re-enable IE zone checks");
        //                loStringBuilder.AppendLine(@"	ZoneCheckDisabled = DisableIEZoneChecks(False)");
        //                loStringBuilder.AppendLine(@"	write2log("""")");
        //                loStringBuilder.AppendLine(@"	LANDeskSDCLIENT(ExitMessage)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	write2Log(VbTab & ""=>> Return code from script = "" & ReturnCode)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	write2log(ExitMessage)");
        //                loStringBuilder.AppendLine(@"	write2Log("""")");
        //                loStringBuilder.AppendLine(@"	Write2Log(""************************************************ END ******************************************************"")");
        //                loStringBuilder.AppendLine(@"	Write2Log("""")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set fso = Nothing");
        //                loStringBuilder.AppendLine(@"	Set wso = Nothing");
        //                loStringBuilder.AppendLine(@"	Set WshNetwork = Nothing");
        //                loStringBuilder.AppendLine(@"	Wscript.Quit(ReturnCode)");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	SetDCOMInstallShieldAppIDs");
        //                loStringBuilder.AppendLine(@"' Return:");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub SetDCOMInstallShieldAppIDs(Action)");
        //                loStringBuilder.AppendLine(@" 	On Error Resume Next ");
        //                loStringBuilder.AppendLine(@"	Dim AppIDs, WMIService, DComApp, DComApps, i_loop");
        //                loStringBuilder.AppendLine(@" 	'Create WMI object");
        //                loStringBuilder.AppendLine(@"	Set WMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"") ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If UCase(Action) = ""DELETE"" Then ");
        //                loStringBuilder.AppendLine(@"		DCOMInstallShieldAppIDs = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Query all DCOM object on the machine that are Installshield related and set to run as interactive user");
        //                loStringBuilder.AppendLine(@"		Set DComApps = WMIService.ExecQuery(""Select * from Win32_DComApplicationSetting where Caption Like '%InstallShield%' and RunAsUser='Interactive User'"") ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Delete the registry key that set the run as for the DCOM application (DCOM guid is used from the above query to locate the registry)");
        //                loStringBuilder.AppendLine(@"		For Each DComApp In DComApps ");
        //                loStringBuilder.AppendLine(@"			'Generate Undo Array");
        //                loStringBuilder.AppendLine(@"			DCOMInstallShieldAppIDs = DCOMInstallShieldAppIDs & DComApp.AppID & ""#""");
        //                loStringBuilder.AppendLine(@"			write2Log(""InstallShield DCOM Server was found and Interactive User flag was deleted: "" & DComApp.AppID)");
        //                loStringBuilder.AppendLine(@"			wso.RegDelete ""HKEY_CLASSES_ROOT\AppID\"" & DComApp.AppID & ""\RunAs"" ");
        //                loStringBuilder.AppendLine(@"		Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Query all DCOM object on the machine that are Installshield related and set to run as interactive user");
        //                loStringBuilder.AppendLine(@"		Set DComApps = WMIService.ExecQuery(""Select * from Win32_DComApplicationSetting where Caption Like '%IDriverT%' and RunAsUser='Interactive User'"") ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		'Delete the registry key that set the run as for the DCOM application (DCOM guid is used from the above query to locate the registry)");
        //                loStringBuilder.AppendLine(@"		For Each DComApp In DComApps ");
        //                loStringBuilder.AppendLine(@"			'Generate Undo Array");
        //                loStringBuilder.AppendLine(@"			DCOMInstallShieldAppIDs = DCOMInstallShieldAppIDs & DComApp.AppID & ""#""");
        //                loStringBuilder.AppendLine(@"			write2Log(""InstallShield DCOM Server was found and Interactive User flag was deleted: "" & DComApp.AppID)");
        //                loStringBuilder.AppendLine(@"			wso.RegDelete ""HKEY_CLASSES_ROOT\AppID\"" & DComApp.AppID & ""\RunAs"" ");
        //                loStringBuilder.AppendLine(@"		Next ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		If (Len(DCOMInstallShieldAppIDs) > 1) Then DCOMInstallShieldAppIDs = Left(DCOMInstallShieldAppIDs,Len(DCOMInstallShieldAppIDs)-1)");
        //                loStringBuilder.AppendLine(@"		write2Log(""InstallShield DCOM Servers: "" & DCOMInstallShieldAppIDs)");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"	If UCase(Action) = ""WRITE"" Then");
        //                loStringBuilder.AppendLine(@"		AppIDs = Split(DCOMInstallShieldAppIDs,""#"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		For i_loop = 0 To UBound(AppIDs)");
        //                loStringBuilder.AppendLine(@"			write2log(""InstallShield DCOM Server reset to Interactive User: "" & AppIDs(i_loop))");
        //                loStringBuilder.AppendLine(@"			wso.RegWrite ""HKEY_CLASSES_ROOT\AppID\"" & AppIDs(i_loop) & ""\RunAs"", ""Interactive User""");
        //                loStringBuilder.AppendLine(@"		Next ");
        //                loStringBuilder.AppendLine(@"	End If ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	On Error GoTo 0   ");
        //                loStringBuilder.AppendLine(@"End Sub ");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DisableIEZoneChecks");
        //                loStringBuilder.AppendLine(@"' Function:	Prevents ""Open File - Security Warning"" dialog box from displaying on Windows XP SP2 and above");
        //                loStringBuilder.AppendLine(@"' Parameters: 	True for disabling checks, False for enabling it again  ");
        //                loStringBuilder.AppendLine(@"' Return: 	DisableCheck = True - True if zone check was disabled, False if Not");
        //                loStringBuilder.AppendLine(@"'         	DisableCheck = False - False if zone check was reenabled, True if Not");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function DisableIEZoneChecks(DisableCheck)");
        //                loStringBuilder.AppendLine(@"	Dim env : Set env = wso.Environment(""PROCESS"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If DisableCheck = False Then");
        //                loStringBuilder.AppendLine(@"		If ZoneCheckDisabled = True Then ");
        //                loStringBuilder.AppendLine(@"			DisableIEZoneChecks = True");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			env(""SEE_MASK_NOZONECHECKS"") = 0");
        //                loStringBuilder.AppendLine(@"			env.Remove(""SEE_MASK_NOZONECHECKS"")");
        //                loStringBuilder.AppendLine(@"			If Err.Number = 0 Then");
        //                loStringBuilder.AppendLine(@"				DisableIEZoneChecks = False");
        //                loStringBuilder.AppendLine(@"				write2log(""IE Zone checks re-enabled."")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0 ");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		DisableIEZoneChecks = False");
        //                loStringBuilder.AppendLine(@"		If (CStr(env(""SEE_MASK_NOZONECHECKS"")) = ""1"") Then");
        //                loStringBuilder.AppendLine(@"			write2log(""IE Zone checks already disabled."") ");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			On Error Resume Next");
        //                loStringBuilder.AppendLine(@"			env(""SEE_MASK_NOZONECHECKS"") = 1");
        //                loStringBuilder.AppendLine(@"			If Err.Number = 0 Then ");
        //                loStringBuilder.AppendLine(@"				DisableIEZoneChecks = True");
        //                loStringBuilder.AppendLine(@"				write2log(""IE Zone checks temporarily disabled."")");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"			On Error GoTo 0 ");
        //                loStringBuilder.AppendLine(@"		End If  ");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: ReformatDouble");
        //                loStringBuilder.AppendLine(@"' Function:	To convert different formats of double value to standard string (e.g. 6.1, 78.86)");
        //                loStringBuilder.AppendLine(@"' Parameters: 	string to be converted");
        //                loStringBuilder.AppendLine(@"' Return: 	Double");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReformatDouble(str)");
        //                loStringBuilder.AppendLine(@"	Dim res,chrReo,splitChr,scLoop");
        //                loStringBuilder.AppendLine(@"	res = """"");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(str, ""."") > 0 Then ");
        //                loStringBuilder.AppendLine(@"		chrReo = "".""");
        //                loStringBuilder.AppendLine(@"		str = Replace(str, "","", """",1,-1,1)");
        //                loStringBuilder.AppendLine(@"		If Not CheckDouble(str) Then chrReo = "",""");
        //                loStringBuilder.AppendLine(@"	ElseIf InStr(str, "","") > 0 Then");
        //                loStringBuilder.AppendLine(@"		chrReo = "",""");
        //                loStringBuilder.AppendLine(@"		str = Replace(str, "" "", """",1,-1,1)");
        //                loStringBuilder.AppendLine(@"		If Not CheckDouble(str) Then chrReo = "".""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	splitChr = Split(str, chrReo)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For scLoop = 0 to UBound(splitChr)");
        //                loStringBuilder.AppendLine(@"		If scLoop < 2 Then");
        //                loStringBuilder.AppendLine(@"			If scLoop = 0 Then");
        //                loStringBuilder.AppendLine(@"				res = splitChr(scLoop)");
        //                loStringBuilder.AppendLine(@"			Else");
        //                loStringBuilder.AppendLine(@"				If (splitChr(scLoop) <> ""0"") Then res = res & chrReo & splitChr(scLoop)");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	ReformatDouble = CDbl(res)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"Function CheckDouble(str)");
        //                loStringBuilder.AppendLine(@"	Dim ret");
        //                loStringBuilder.AppendLine(@"	CheckDouble = true");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	on error resume next");
        //                loStringBuilder.AppendLine(@"	ret = CDbl(str)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ret = """" Then CheckDouble = false");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: CompareVersions");
        //                loStringBuilder.AppendLine(@"' Function:	Compares two versions ""a.b.c.d"". If Version1 < Version2,");
        //                loStringBuilder.AppendLine(@"' Parameters: 	version string");
        //                loStringBuilder.AppendLine(@"' Return: 	returns -1; if Version1 = Version2, returns 0;");
        //                loStringBuilder.AppendLine(@"' If Version1 > Version2, Returns 1.");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function CompareVersions(ByVal Version1, ByVal Version2)");
        //                loStringBuilder.AppendLine(@"	Dim Ver1, Ver2, Result");
        //                loStringBuilder.AppendLine(@"	Ver1 = GetVersionStringAsArray(Version1)");
        //                loStringBuilder.AppendLine(@"	Ver2 = GetVersionStringAsArray(Version2)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If Ver1(0) < Ver2(0) Then");
        //                loStringBuilder.AppendLine(@"		Result = -1");
        //                loStringBuilder.AppendLine(@"	ElseIf Ver1(0) = Ver2(0) Then");
        //                loStringBuilder.AppendLine(@"		If Ver1(1) < Ver2(1) Then");
        //                loStringBuilder.AppendLine(@"			Result = -1");
        //                loStringBuilder.AppendLine(@"		ElseIf Ver1(1) = Ver2(1) Then");
        //                loStringBuilder.AppendLine(@"			Result = 0");
        //                loStringBuilder.AppendLine(@"		Else");
        //                loStringBuilder.AppendLine(@"			Result = 1");
        //                loStringBuilder.AppendLine(@"		End If");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		Result = 1");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	CompareVersions = Result");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Bitwise left shift.");
        //                loStringBuilder.AppendLine(@"Function Lsh(ByVal N, ByVal Bits)");
        //                loStringBuilder.AppendLine(@"	Lsh = N * (2 ^ Bits)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"' Returns a version string ""a.b.c.d"" as a two-element numeric");
        //                loStringBuilder.AppendLine(@"' array. The first array element is the most-significant 32 bits,");
        //                loStringBuilder.AppendLine(@"' and the second element is the least-significant 32 bits.");
        //                loStringBuilder.AppendLine(@"Function GetVersionStringAsArray(ByVal Version)");
        //                loStringBuilder.AppendLine(@"	Dim VersionAll, VersionParts, N, chr");
        //                loStringBuilder.AppendLine(@"	VersionAll = Array(0, 0, 0, 0)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If InStr(Version, ""."") > 0 Then ");
        //                loStringBuilder.AppendLine(@"		chr = "".""");
        //                loStringBuilder.AppendLine(@"	ElseIf InStr(Version, "","") > 0 Then");
        //                loStringBuilder.AppendLine(@"		chr = "",""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	VersionParts = Split(Version, chr)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	For N = 0 To UBound(VersionParts)");
        //                loStringBuilder.AppendLine(@"		VersionAll(N) = CLng(VersionParts(N))");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Dim Hi, Lo");
        //                loStringBuilder.AppendLine(@"	Hi = Lsh(VersionAll(0), 16) + VersionAll(1)");
        //                loStringBuilder.AppendLine(@"	Lo = Lsh(VersionAll(2), 16) + VersionAll(3)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	GetVersionStringAsArray = Array(Hi, Lo)");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' FunctionName: DetectClientPlatform");
        //                loStringBuilder.AppendLine(@"' Function:	Detects OS Version and bitwise");
        //                loStringBuilder.AppendLine(@"' Parameters:	none");
        //                loStringBuilder.AppendLine(@"' Return: 	OS Version, bitWise");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Public Function DetectClientPlatform()");
        //                loStringBuilder.AppendLine(@"	Dim cCheck, objWMIService, colOperatingSystems, objOperatingSystem, oVersion");
        //                loStringBuilder.AppendLine(@"	Dim splitChr, chrReo, scLoop, dotPos, sdotPos");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
        //                loStringBuilder.AppendLine(@"	Set colOperatingSystems = objWMIService.ExecQuery(""Select * from Win32_OperatingSystem"")");
        //                loStringBuilder.AppendLine(@"	For Each objOperatingSystem In colOperatingSystems");
        //                loStringBuilder.AppendLine(@"		oVersion = objOperatingSystem.Version");
        //                loStringBuilder.AppendLine(@"	Next");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	OSVer = oVersion");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	'Check platform DSContainer or OS ProductName");
        //                loStringBuilder.AppendLine(@"	cCheck = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\DSClient\Installation\Version\DSContainer"")");
        //                loStringBuilder.AppendLine(@"	If cCheck = ""##ERR"" Then cCheck = Reg_Read_Str(""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName"")");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If ( (PROC_ARCH1 = ""X86"") AND (PROC_ARCH2 = ""%PROCESSOR_ARCHITEW6432%"") ) Then");
        //                loStringBuilder.AppendLine(@"		bitWise = ""32bit""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If ( (PROC_ARCH1 = ""X86"") AND (PROC_ARCH2 = ""AMD64"") ) Then");
        //                loStringBuilder.AppendLine(@"		bitWise = ""64bit""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"	If  PROC_ARCH1 = ""AMD64"" or PROC_ARCH1 = ""IA64"" Then");
        //                loStringBuilder.AppendLine(@"		bitWise = ""64bit""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	DetectClientPlatform = cCheck  & "" "" & bitWise");
        //                loStringBuilder.AppendLine(@"End Function");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' SubName: 	RunSecedit");
        //                loStringBuilder.AppendLine(@"' Function:	Runs secedit.exe");
        //                loStringBuilder.AppendLine(@"' Parameters:   Path to database used");
        //                loStringBuilder.AppendLine(@"'		Path to security template");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Sub RunSecedit(DBPath, InfPath)");
        //                loStringBuilder.AppendLine(@"	Dim tmpCmd, tmpRun, logfile, InfFile");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	DBPath = ParseConst(DBPath)");
        //                loStringBuilder.AppendLine(@"	InfPath = ParseConst(InfPath)");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	logfile = Replace(Right(InfPath, Len(InfPath) - InstrRev(InfPath, ""\"")), "".inf"", ""_secedit.log"", 1, -1, 1)");
        //                loStringBuilder.AppendLine(@"	InfFile = SysRoot & ""security\templates\"" & Right(InfPath, Len(InfPath) - InstrRev(InfPath, ""\""))");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	fso.CopyFile InfPath, InfFile, 1");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FileExists(InfFile) Then ");
        //                loStringBuilder.AppendLine(@"		tmpCmd = SystemFolder & ""secedit.exe /configure /db "" & DBPath & "" /cfg "" & chr(34) & InfFile & chr(34) & "" /log "" & MSILogDir & logfile");
        //                loStringBuilder.AppendLine(@"		write2log ""Running secedit command: "" & tmpCmd");
        //                loStringBuilder.AppendLine(@"		tmpRun = wso.Run(tmpCmd,,True)");
        //                loStringBuilder.AppendLine(@"		write2log ""Finished running secedit, return code: "" & tmpRun");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log InfFile & "" file not found. Secedit canceled.""");
        //                loStringBuilder.AppendLine(@"		write2log """"");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Sub");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"'------------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"' Function:	ReadIni ");
        //                loStringBuilder.AppendLine(@"' Parameters:");
        //                loStringBuilder.AppendLine(@"' myFilePath  [string]  the (path and) file name of the INI file");
        //                loStringBuilder.AppendLine(@"' mySection   [string]  the section in the INI file to be searched");
        //                loStringBuilder.AppendLine(@"' myKey       [string]  the key whose value is to be returned");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' Returns:    [string] value for the specified key in the specified section");
        //                loStringBuilder.AppendLine(@"'");
        //                loStringBuilder.AppendLine(@"' CAVEAT:     Will return ##ERR if key exists but value is blank");
        //                loStringBuilder.AppendLine(@"' robvanderwoude/vbstech_files_ini");
        //                loStringBuilder.AppendLine(@"' -----------------------------------------------------------------------------");
        //                loStringBuilder.AppendLine(@"Function ReadIni( myFilePath, mySection, myKey )");
        //                loStringBuilder.AppendLine(@"	Dim intEqualPos");
        //                loStringBuilder.AppendLine(@"	Dim objIniFile");
        //                loStringBuilder.AppendLine(@"	Dim strFilePath, strKey, strLeftString, strLine, strSection");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	ReadIni     = """"");
        //                loStringBuilder.AppendLine(@"	strFilePath = Trim( ParseConst(myFilePath) )");
        //                loStringBuilder.AppendLine(@"	strSection  = Trim( mySection )");
        //                loStringBuilder.AppendLine(@"	strKey      = Trim( myKey )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"	If fso.FileExists( strFilePath ) Then");
        //                loStringBuilder.AppendLine(@"		Set objIniFile = fso.OpenTextFile( strFilePath, 1, False )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		Do While objIniFile.AtEndOfStream = False");
        //                loStringBuilder.AppendLine(@"			strLine = Trim( objIniFile.ReadLine )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"			' Check if section is found in the current line");
        //                loStringBuilder.AppendLine(@"			If LCase( strLine ) = ""["" & LCase( strSection ) & ""]"" Then");
        //                loStringBuilder.AppendLine(@"				strLine = Trim( objIniFile.ReadLine )");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"				' Parse lines until the next section is reached");
        //                loStringBuilder.AppendLine(@"				Do While Left( strLine, 1 ) <> ""[""");
        //                loStringBuilder.AppendLine(@"					' Find position of equal sign in the line");
        //                loStringBuilder.AppendLine(@"					intEqualPos = InStr( 1, strLine, ""="", 1 )");
        //                loStringBuilder.AppendLine(@"					If intEqualPos > 0 Then");
        //                loStringBuilder.AppendLine(@"						strLeftString = Trim( Left( strLine, intEqualPos - 1 ) )");
        //                loStringBuilder.AppendLine(@"						' Check If item is found in the current line");
        //                loStringBuilder.AppendLine(@"						If LCase( strLeftString ) = LCase( strKey ) Then");
        //                loStringBuilder.AppendLine(@"							ReadIni = Trim( Mid( strLine, intEqualPos + 1 ) )");
        //                loStringBuilder.AppendLine(@"							' In case the item exists but value is blank");
        //                loStringBuilder.AppendLine(@"							If ReadIni = """" Then");
        //                loStringBuilder.AppendLine(@"								ReadIni = ""##ERR""");
        //                loStringBuilder.AppendLine(@"							End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"							' Abort loop when item is found");
        //                loStringBuilder.AppendLine(@"							Exit Do");
        //                loStringBuilder.AppendLine(@"						End If");
        //                loStringBuilder.AppendLine(@"					End If");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"					' Abort If the end of the INI file is reached");
        //                loStringBuilder.AppendLine(@"					If objIniFile.AtEndOfStream Then Exit Do");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"					' Continue with next line");
        //                loStringBuilder.AppendLine(@"					strLine = Trim( objIniFile.ReadLine )");
        //                loStringBuilder.AppendLine(@"				Loop");
        //                loStringBuilder.AppendLine(@"				Exit Do");
        //                loStringBuilder.AppendLine(@"			End If");
        //                loStringBuilder.AppendLine(@"		Loop");
        //                loStringBuilder.AppendLine(@"");
        //                loStringBuilder.AppendLine(@"		objIniFile.Close");
        //                loStringBuilder.AppendLine(@"	Else");
        //                loStringBuilder.AppendLine(@"		write2log strFilePath & "" doesn't exists. Exiting...""");
        //                loStringBuilder.AppendLine(@"	End If");
        //                loStringBuilder.AppendLine(@"End Function");
        //            }
        //            break;
        //    }
        //    return loStringBuilder.ToString();
        //}

    
       

    
        public static string CreateCustomScripts00(string lsDeployXML, string lsManufacturer, string lsProduct, string lsVersion, string lsReleaseName, string lsUninstallKey)
        {

            StringBuilder loStringBuilder = new StringBuilder();

            DataTable loTable = ConvertXMLToDataTable("install", lsDeployXML, false);
            DataTable loUninstallTable = ConvertXMLToDataTable("uninstall", lsDeployXML, false);

            string lsMSI = "";
            string lsMST = "";
            string lsMSP = "";

            foreach (DataRow loRow in loTable.Rows)
            {
                string lsInherit = "";
                for (int i = 1; i < Convert.ToInt32(loRow["level"].ToString()); i++)
                {
                    lsInherit = lsInherit + "  ";
                }

                //    loStringBuilder.AppendLine(@"#parsing action " + loRow["actiontype"].ToString());
                //try
                //{
                //    loStringBuilder.AppendLine(@"#        parameters " + loRow["param"].ToString());
                //}
                //catch { }




                switch (loRow["actiontype"].ToString().ToLower())
                {

                    case "launchprocess":

                        //switch (loRow["command"].ToString().ToLower())
                        //{



                        //}

                        break;

                    case "msiexec":
                        {

                            try
                            {
                                foreach (string lsArgument in CommandLineToArgs(loRow["param"].ToString()))
                                {
                                    if (lsArgument.ToLower().Contains(".msi"))
                                    {
                                        lsMSI = lsArgument;
                                    }
                                    if (lsArgument.ToLower().Contains(".mst"))
                                    {
                                        lsMST = lsArgument;
                                        lsMST = lsMST.Replace("TRANSFORMS=", "");
                                        lsMST = lsMST.Replace("TRANSFORMS =", "");
                                        lsMST = lsMST.Replace(@"""", "");
                                    }
                                    if (lsArgument.ToLower().Contains(".msp"))
                                    {
                                        lsMSP = lsArgument;
                                        lsMSP = lsMSP.Replace(@"""", "");
                                    }
                                }
                            }
                            catch { }


                            break;
                        }
                }
            }


            loStringBuilder.AppendLine(@";------------------------------------------------------------");
            loStringBuilder.AppendLine(@";File:		spf_Setup.ini");
            loStringBuilder.AppendLine(@";Purpose:	Settings File for Setup_automated.vbs");
            loStringBuilder.AppendLine(@";------------------------------------------------------------");
            loStringBuilder.AppendLine(@";Author:	Clearbyte GmbH");
            loStringBuilder.AppendLine(@";Date:		" + DateTime.Now.Year.ToString());
            loStringBuilder.AppendLine(@";------------------------------------------------------------");
            loStringBuilder.AppendLine(@"; NOTE: Lines starting with semicolon(;) will be ignored !");
            loStringBuilder.AppendLine(@";------------------------------------------------------------");
            loStringBuilder.AppendLine(@";Description:");
            loStringBuilder.AppendLine(@";");
            loStringBuilder.AppendLine(@";Section 1");
            loStringBuilder.AppendLine(@";0001 is the executable an MSI? (Values 'Y' or 'N')");
            loStringBuilder.AppendLine(@";0002 Name of the executable");
            loStringBuilder.AppendLine(@";0003 Arguments for the executable");
            loStringBuilder.AppendLine(@";0004 Filenames of the TRANSFORMS for an .MSI (if you have more than one file you have to separate it via ';')");
            loStringBuilder.AppendLine(@";00041 Filenames of patches for an .MSI (if you have more than one file you have to separate it via ';')");
            loStringBuilder.AppendLine(@";0005 User Interface Mode for an .MSI. Please refer to the Windows Installer SDK under ""Command Line Options""");
            loStringBuilder.AppendLine(@";0006 Properties to set for an .MSI via Command Line");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 2");
            loStringBuilder.AppendLine(@";0007 ProductCode (if it is a .MSI)");
            loStringBuilder.AppendLine(@";0008 Product Name");
            loStringBuilder.AppendLine(@";0009 Product Version");
            loStringBuilder.AppendLine(@";0010 Swiss Soft Packaging Factory Oder Number, which you can easily refer to an order made");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 3");
            loStringBuilder.AppendLine(@";0011 ProductCode's of previous .MSI Packages to uninstall before installing the product");
            loStringBuilder.AppendLine(@";0012 Uninstall commands for previous Legacy Installations to uninstall before installing the Product");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 4");
            loStringBuilder.AppendLine(@";0013 Should the Inventory Registry Keys be written via the VBSkript? (Value 'Y' or 'N'). If the Value is set to 'N' the Inventory Keys must be written via the installation routine (normally the .MSI)");
            loStringBuilder.AppendLine(@";0014 Root Key for the Inventory Keys to be written");
            loStringBuilder.AppendLine(@";0015 Key for Inventory in the Registry under the choosen Root Key");
            loStringBuilder.AppendLine(@";0016 expectet Return Codes by success of the installation");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 5");
            loStringBuilder.AppendLine(@";0017 Path to the Logfile");
            loStringBuilder.AppendLine(@";0018 Logging Options for an .MSI. Please refer to the Windows Installer SDK under ""Command Line Options""");
            loStringBuilder.AppendLine(@";0019 Prefix for the installation logfile");
            loStringBuilder.AppendLine(@";0020 Prefix for the deinstallation logfile");
            loStringBuilder.AppendLine(@";0021 Name of the Logfile");
            loStringBuilder.AppendLine(@";0022 Suffix for the installation logfile");
            loStringBuilder.AppendLine(@";0023 Suffix for the deinstallation logfile");
            loStringBuilder.AppendLine(@";0024 Extension for the logfile");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 6");
            loStringBuilder.AppendLine(@";0025 Header of Message that the spf_Setup.ini exists");
            loStringBuilder.AppendLine(@";0026 Header of Message that the installation was aborted");
            loStringBuilder.AppendLine(@";0027 Header of Message that the Registry Key defined in the .ini already exists");
            loStringBuilder.AppendLine(@";0028 Header of Message that the spf_Setup.ini does not exist");
            loStringBuilder.AppendLine(@";0029 Header of Message that the Registry Key defined in the .ini does not exist");
            loStringBuilder.AppendLine(@";0030 Header of Message that the installation failed");
            loStringBuilder.AppendLine(@";0031 Header of Message that a running process was detected an the user cancelled the installation");
            loStringBuilder.AppendLine(@";0032 Header of Message that it was successfully uninstalled");
            loStringBuilder.AppendLine(@";0033 Header of Message that it was successfully installed");
            loStringBuilder.AppendLine(@";0034 Header of Message that it was multiple times tried to install and it failed");
            loStringBuilder.AppendLine(@";0035 Header of Message with the ErrorCode");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 1 ------------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"[FileExecution]");
            loStringBuilder.AppendLine(@";0001");
            loStringBuilder.AppendLine(@"IsFileAnMSI=Y");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0002");
            loStringBuilder.AppendLine(@"File2Execute=" + lsMSI);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0003");
            loStringBuilder.AppendLine(@"SetupArguments=");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0004");
            loStringBuilder.AppendLine(@"TRANSFORMS=" + lsMST);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";00041");
            loStringBuilder.AppendLine(@"PATCH=");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0005");
            loStringBuilder.AppendLine(@"UIMode=/qb-!");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0006");
            loStringBuilder.AppendLine(@"Properties=");
            loStringBuilder.AppendLine(@";End Section 1 --------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 2 ------------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"[Product]");
            loStringBuilder.AppendLine(@";0007");
            loStringBuilder.AppendLine(@"ProductCode=" + lsUninstallKey);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0008");
            loStringBuilder.AppendLine(@"ProductName=" + lsManufacturer + " " + lsProduct + " " + lsVersion);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0009");
            loStringBuilder.AppendLine(@"ProductVersion=" + lsReleaseName);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0010");
            loStringBuilder.AppendLine(@"SSPF_Puid=");
            loStringBuilder.AppendLine(@";End Section 2 --------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 3 ------------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"[UNINSTALL]");
            loStringBuilder.AppendLine(@";0011");
            //loStringBuilder.AppendLine(@"OldProductCodes={26A24AE4-039D-4CA4-87B4-2F83218065F0}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0012");
            loStringBuilder.AppendLine(@"UninstallCommands=");
            loStringBuilder.AppendLine(@";End Section 3 --------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 4 ------------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"[Global]");
            loStringBuilder.AppendLine(@";0013");
            loStringBuilder.AppendLine(@"WriteInventoryKeys=N");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0014");
            loStringBuilder.AppendLine(@"InventoryKeyRoot=HKEY_LOCAL_MACHINE");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0015");
            loStringBuilder.AppendLine(@"InventoryKeys=Software\Clearbyte\InstalledSoftware\");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0016");
            loStringBuilder.AppendLine(@"SuccessCodes=0;3010");
            loStringBuilder.AppendLine(@";End Section 4 --------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 5 ------------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"[Logging]");
            loStringBuilder.AppendLine(@";0017");
            loStringBuilder.AppendLine(@"Path=C:\Windows\Maintenance\logfiles\Applications\");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0018");
            loStringBuilder.AppendLine(@"Type=*v");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0019");
            loStringBuilder.AppendLine(@"InstallLogPrefix=");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0020");
            loStringBuilder.AppendLine(@"UninstLogPrefix=");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0021");
            loStringBuilder.AppendLine(@"LogFileName=" + (lsManufacturer + " " + lsProduct + " " + lsVersion).Replace(" ", "_"));
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0022");
            loStringBuilder.AppendLine(@"InstallLogSuffix=_Inst");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0023");
            loStringBuilder.AppendLine(@"UninstLogSuffix=_Rem");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0024");
            loStringBuilder.AppendLine(@"LogExtension=.log");
            loStringBuilder.AppendLine(@";End Section 5 --------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";Section 6 ------------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"[LogEventMessages]");
            loStringBuilder.AppendLine(@";0025");
            loStringBuilder.AppendLine(@"LogEventMsg1=""; file exists (spf_Setup.ini): """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0026");
            loStringBuilder.AppendLine(@"LogEventMsg2=""; installation aborted!""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0027");
            loStringBuilder.AppendLine(@"LogEventMsg3=""; regkey exists (spf_Setup.ini): """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0028");
            loStringBuilder.AppendLine(@"LogEventMsg4=""; file does NOT exist (spf_Setup.ini): """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0029");
            loStringBuilder.AppendLine(@"LogEventMsg5=""; regkey does NOT exist (spf_Setup.ini): """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0030");
            loStringBuilder.AppendLine(@"LogEventMsg6=""; Failed to install """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0031");
            loStringBuilder.AppendLine(@"LogEventMsg7=""; Running Processes detected (User cancelled) !""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0032");
            loStringBuilder.AppendLine(@"LogEventMsg8=""; Successfully uninstalled """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0033");
            loStringBuilder.AppendLine(@"LogEventMsg9=""; Successfully installed """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0034");
            loStringBuilder.AppendLine(@"LogEventMsg10=""; Failed multiple times to install """);
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@";0035");
            loStringBuilder.AppendLine(@"LogEventMsg11=""; ErrorCode: """);
            loStringBuilder.AppendLine(@";End Section 6 --------------------------------------------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");


            //loStringBuilder.AppendLine(@"[general]");");
            //loStringBuilder.AppendLine(@"LogPath=C:\Windows\Maintenance\logfiles\Applications");");
            //loStringBuilder.AppendLine(@"WriteInventoryKeys=0");");
            //loStringBuilder.AppendLine(@"InventoryKeys=Software\clearByte\InstalledSoftware\");");
            //loStringBuilder.AppendLine(@"DefaultUIMode=/qb-!");");
            //loStringBuilder.AppendLine(@"");
            //loStringBuilder.AppendLine(@"[application]");
            //loStringBuilder.AppendLine(@"ProductName=" + lsProduct);
            //loStringBuilder.AppendLine(@"ProductVersion=" + lsVersion);
            //loStringBuilder.AppendLine(@"ProductCode=" + lsUninstallKey);
            //loStringBuilder.AppendLine(@"PackageName=" + lsManufacturer + " " + lsProduct + " " + lsVersion);
            //loStringBuilder.AppendLine(@"SpfPuid=");
            //loStringBuilder.AppendLine(@"");
            //loStringBuilder.AppendLine(@"[Action]");
            //loStringBuilder.AppendLine(@"-INSTALL -----------------");
            //loStringBuilder.AppendLine(@"RunExe::deliveries_setup.exe|#|TYPE=I|#|i");
            //loStringBuilder.AppendLine(@"-UNINSTALL ---------------");
            //loStringBuilder.AppendLine(@"RunExe::deliveries_setup.exe|#|TYPE=X|#|x");
            //                loStringBuilder.AppendLine(@"_RunExe::notepad.exe|#||#|i");
            //                loStringBuilder.AppendLine(@"_UninstSingleMsi::{07EEE598-5F21-4B57-B40B-46592625B3D9}|#|meinlogfile.log|#|i");
            //                loStringBuilder.AppendLine(@"_InstMsi::meinmsi.msi|#|meintransform.mst,deintransform.mst|#|ALLUSERS=1 ROOTRDIVE=D:\|#|meinlogfile.log|#|i");
            //                loStringBuilder.AppendLine(@"_UninstMultipleMsi::{07EEE598-5F21-4B57-B40B-46592625B3D9}|#|{09782D89-1CA6-4B7D-82C5-2DE01AF5601B}|#|{0ADF605D-2D94-4467-91F7-D75C71CF328D}|#|i");
            //                loStringBuilder.AppendLine(@"_RunMsp::meinmsp.msp|#|meinlogfile.log|#|i");
            //                loStringBuilder.AppendLine(@"_RegAdd::HKLM|#|Software\MyReg\blup|#|MeinEintrag1|#|01,a2,10|#|Binary|#|64|#|i");
            //                loStringBuilder.AppendLine(@"_RegAdd::HKCU|#|Software\MyReg\blup|#|MeinEintrag2|#|%LOGONSERVER%|#|Regsz|#|64|#|i");
            //                loStringBuilder.AppendLine(@"-UNINSTALL ---------------");
            //                loStringBuilder.AppendLine(@"_RegAdd::HKCU|#|Software\MyReg\blup|#|MeinEintrag3|#|%ALLUSERSPROFILE%|#|Regsz|#|64|#|i");
            //                loStringBuilder.AppendLine(@"_RegDelKey::HKCU|#|Software\MyReg\blup|#|64|#|x");
            //                loStringBuilder.AppendLine(@"_RegDelValue::HKCU|#|Software\MyReg\blup|#|MeinEintrag3|#|64|#|i");
            //                loStringBuilder.AppendLine(@"_FileDel::c:\temp|#|mbusslinger1.png|#|i");
            //                loStringBuilder.AppendLine(@"_FileCopyMove::E:\|#|mbusslinger.png|#|c:\temp\mbusslinger1.png|#|0|#|i");
            //                loStringBuilder.AppendLine(@"_FolderCreate::E:\test\blup\aaa\bbb\ccc|#|1|#|i");
            //                loStringBuilder.AppendLine(@"_FolderDel::E:\test\todelete|#|0|#|i");
            //                loStringBuilder.AppendLine(@"_ServiceHandling::FoxitCloudUpdateService|#|0|#|i");
            //                loStringBuilder.AppendLine(@"_KillProcess::winword.exe|#|i");
            //                loStringBuilder.AppendLine(@"_FolderCreate::%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\meineFirma\clearByte|#|1|#|i");
            //                loStringBuilder.AppendLine(@"_CreateShortcut::meineFirma\clearByte|#|CB App.lnk|#|/abc|#|Die super App|#|3|#|%windir%\notepad.exe|#|%windir%\notepad.exe|#||#|i");
            //                loStringBuilder.AppendLine(@"_SetFileAttributes::C:\repoFolder\wrapper_script\Branches\wrapper_script-1.1\tst.ini|#|r|#|-|#|i");

            return loStringBuilder.ToString();
        }

        public static string CreateCustomScripts02(string lsDeployXML, string lsManufacturer, string lsProduct, string lsVersion, string lsReleaseName, string lsUninstallKey, string lsLanguages, string lsArchitectures, string lsDescription)
        {
            StringBuilder loStringBuilder = new StringBuilder();


            loStringBuilder.AppendLine(@"<?xml version=""1.0"" standalone=""yes""?>");
            loStringBuilder.AppendLine(@"<metainfo>");
            loStringBuilder.AppendLine(@"  <software>");
            loStringBuilder.AppendLine(@"    <Product>" + lsProduct + @"</Product>");
            loStringBuilder.AppendLine(@"    <Manufacturer>" + lsManufacturer + @"</Manufacturer>");
            loStringBuilder.AppendLine(@"    <Version>" + lsVersion + @"</Version>");
            loStringBuilder.AppendLine(@"    <Release>" + lsReleaseName + "</Release>");
            loStringBuilder.AppendLine(@"    <AssetId>" + Guid.NewGuid().ToString() + "</AssetId>");
            loStringBuilder.AppendLine(@"    <InternalVersion>" + lsReleaseName + "</InternalVersion>");
            loStringBuilder.AppendLine(@"    <Languages>de;fr</Languages>");
            loStringBuilder.AppendLine(@"    <Architectures>x86</Architectures>");
            loStringBuilder.AppendLine(@"    <Description>" + Regex.Replace(lsDescription, "<.*?>", String.Empty) + @"</Description>");
            loStringBuilder.AppendLine(@"    <CommandInstall>deliveries_setup.exe type=i</CommandInstall>");
            loStringBuilder.AppendLine(@"    <CommandUninstall>deliveries_setup.exe type=x</CommandUninstall>");
            loStringBuilder.AppendLine(@"    <CommandRepair>deliveries_setup.exe type=r</CommandRepair>");
            loStringBuilder.AppendLine(@"    <DetectionKey>" + lsUninstallKey + @"</DetectionKey>");
            loStringBuilder.AppendLine(@"    <SuccessCodes>0;3010</SuccessCodes>");
            loStringBuilder.AppendLine(@"    <RetryCodes>1066</RetryCodes>");
            loStringBuilder.AppendLine(@"  </software>");
            loStringBuilder.AppendLine(@"</metainfo>");


            return loStringBuilder.ToString();

        }

        public static string CreateCustomScripts01(string lsDeployXML, string lsManufacturer, string lsProduct, string lsVersion, string lsReleaseName, string lsUninstallKey, string lsArchitectures, DataTable loParameterTable)
        {




            StringBuilder loStringBuilder = new StringBuilder();

            loStringBuilder.AppendLine(@"# * SIX Group");
            loStringBuilder.AppendLine(@"# *");
            loStringBuilder.AppendLine(@"# * " + lsManufacturer + " " + lsProduct + " " + lsVersion + ".x");
            loStringBuilder.AppendLine(@"# *");
            loStringBuilder.AppendLine(@"# *		");
            loStringBuilder.AppendLine(@"# * Author:			Package Shop");
            loStringBuilder.AppendLine(@"# * Creation date:	" + DateTime.Now.ToString("yyyy-MM-dd"));
            loStringBuilder.AppendLine(@"# * Changed by:		clearByte Gmbh Christian Wegmann");
            loStringBuilder.AppendLine(@"# * Change date:	" + DateTime.Now.ToString("yyyy-MM-dd"));
            loStringBuilder.AppendLine(@"# * Change reason:	unknown");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * Usage:");
            loStringBuilder.AppendLine(@"# * _SIX_Setup_Package.ps1 { install | remove | check | reinstall* | repair* } [-f]* [-l LogFile]*");
            loStringBuilder.AppendLine(@"# * _SIX_Setup_Package.ps1 { info | summary* | help }");
            loStringBuilder.AppendLine(@"# * _SIX_Setup_Package.ps1 exportxml Output-Filename");
            loStringBuilder.AppendLine(@"# * (* not implemented yet)");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"$VERSION = '0.20120808+.0' # version of this script");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * package settings:");
            loStringBuilder.AppendLine(@"function Get-PackageConfiguration {");
            loStringBuilder.AppendLine(@"if ($global:ExternalConfiguration.Package) { $global:Package = $global:ExternalConfiguration.Package } else {");
            loStringBuilder.AppendLine(@"$global:Package = @{");
            loStringBuilder.AppendLine(@"	Vendor =		""" + lsManufacturer.Replace(" ", "") + @""";			# e.g. ""Adobe"" (mandatory)");
            loStringBuilder.AppendLine(@"	Product =		""" + lsProduct.Replace(" ", "") + @""";				# e.g. ""Reader"" (mandatory)");
            loStringBuilder.AppendLine(@"	Version =		""" + lsReleaseName + @""";		# e.g. ""10"" (mandatory)");
            loStringBuilder.AppendLine(@"	#Architecture =	""" + lsArchitectures + @""";	# ""x86"" or ""x64"" (optional)");
            loStringBuilder.AppendLine(@"	Release =		""001"";				# e.g. ""001"" (mandatory)");
            loStringBuilder.AppendLine(@"	#LogFile =		""<LogFile>"";		# alternative LogFile - this will override $OS[""LogFile""];");
            loStringBuilder.AppendLine(@"										#  but parameter -L will override this again (optional)");
            loStringBuilder.AppendLine(@"	#IDOverride =	""<SpecialID>"";		# overrides the autogenerated ID (Vendor_Product_Version[_Architecture]_Release)");
            loStringBuilder.AppendLine(@"										#  (optional)");
            loStringBuilder.AppendLine(@"	#Reboot = 		$true				# Enforce reboot after installation process");
            loStringBuilder.AppendLine(@"										#  (in real this script does never do a reboot -");
            loStringBuilder.AppendLine(@"										#   instead it returns the errorcode 3010 at its end)");
            loStringBuilder.AppendLine(@"}}}");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * organization settings:");
            loStringBuilder.AppendLine(@"function Get-OrganizationConfiguration {");
            loStringBuilder.AppendLine(@"if ($global:ExternalConfiguration.Organization) { $global:Organization = $global:ExternalConfiguration.Organization } else {");
            loStringBuilder.AppendLine(@"$global:Organization = @{");
            loStringBuilder.AppendLine(@"	Name = 'SIX';							# the name of your organization (mandatory)");
            loStringBuilder.AppendLine(@"	Mail = '4040EWPhotline@six-group.com';	# servicedesk/hotline email adress of your organization (mandatory for ARP)");
            loStringBuilder.AppendLine(@"	ServiceTelephone = '4040';				# servicedesk/hotline telephon number of your organization (mandatory for ARP)");
            loStringBuilder.AppendLine(@"	Tag = 'SIX';							# a short tag of your organization name (mandatory)");
            loStringBuilder.AppendLine(@"}}}");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * operating system presets");
            loStringBuilder.AppendLine(@"function Get-OSConfiguration {");
            loStringBuilder.AppendLine(@"if ($global:ExternalConfiguration.OS) { $global:OS = $global:ExternalConfiguration.OS } else {");
            loStringBuilder.AppendLine(@"$global:OS = @{");
            loStringBuilder.AppendLine(@"	LogFile = ""${env:LocalLogPath}\"" + $Package[""ID""] + "".log""	# global definition for LogFile; but parameter -L will override this");
            loStringBuilder.AppendLine(@"	MSIExecDefaultParameters = @(""/qn"", ""REBOOT=ReallySuppress"", ""ALLUSERS=1"")	# default arguments for msiexec");
            loStringBuilder.AppendLine(@"}}}");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * setup definition");
            loStringBuilder.AppendLine(@"function Get-SetupJobs {");
            loStringBuilder.AppendLine(@"if ($global:ExternalConfiguration.Setup) { $global:Setup = $global:ExternalConfiguration.Setup } else {");
            loStringBuilder.AppendLine(@"$Setup = @(); # do not touch this!");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");

            DataTable loTable = ConvertXMLToDataTable("install", lsDeployXML, false);
            DataTable loUninstallTable = ConvertXMLToDataTable("uninstall", lsDeployXML, false);


            loStringBuilder.AppendLine(@"# CaptureShortcuts");
            loStringBuilder.AppendLine(@"$Setup += @{");
            loStringBuilder.AppendLine(@"	Type = ""exe"";");
            loStringBuilder.AppendLine(@"	Name = ""MoveShortcuts.exe"";");
            loStringBuilder.AppendLine(@"	Parameters = @(");
            loStringBuilder.AppendLine(@"	""action=capture"");");
            loStringBuilder.AppendLine(@"}");

            GetMyPowershellScript(ref loStringBuilder, ref loTable, "install", lsUninstallKey);

            loStringBuilder.AppendLine(@"# MoveShortcuts");
            loStringBuilder.AppendLine(@"$StartMenuPath=""${env:ProgramData}\Microsoft\Windows\Start Menu\Programs\Applications""");
            loStringBuilder.AppendLine(@"$Setup += @{");
            loStringBuilder.AppendLine(@"	Type = ""exe"";");
            loStringBuilder.AppendLine(@"	Name = ""MoveShortcuts.exe"";");
            loStringBuilder.AppendLine(@"	Parameters = @(");
            loStringBuilder.AppendLine(@"	'action=moveshortcuts target=""' + $StartMenuPath + '""');");
            loStringBuilder.AppendLine(@"}");

            loStringBuilder.AppendLine(@"# RemoveShortcuts");
            loStringBuilder.AppendLine(@"$Setup += @{");
            loStringBuilder.AppendLine(@"	Type = ""exe"";");
            loStringBuilder.AppendLine(@"	UninstallName = ""MoveShortcuts.exe"";");
            loStringBuilder.AppendLine(@"	UninstallParameters = @(");
            loStringBuilder.AppendLine(@"	""action=cleanup"");");
            loStringBuilder.AppendLine(@"}");

            GetMyPowershellScript(ref loStringBuilder, ref loUninstallTable, "uninstall", lsUninstallKey);

            //if (1 == 2)
            //{
            //    loStringBuilder.AppendLine(@"# Reste abraeumen");
            //    loStringBuilder.AppendLine(@"#Cleanup");
            //    loStringBuilder.AppendLine(@"$Setup += @{");
            //    loStringBuilder.AppendLine(@"	Type = ""ps"";");
            //    loStringBuilder.AppendLine(@"	UninstallName = ""Remove-Item"";");
            //    loStringBuilder.AppendLine(@"	UninstallParameters = @(");
            //    loStringBuilder.AppendLine(@"		""-Path"",	(""`"""" + $CommonDirs[""ProgramFiles32""] + ""\CBK_Client`""""),");
            //    loStringBuilder.AppendLine(@"		""-Force"",");
            //    loStringBuilder.AppendLine(@"		""-Recurse""");
            //    loStringBuilder.AppendLine(@"	);");
            //    loStringBuilder.AppendLine(@"	UninstallAcceptExitCodes = @(1);");
            //    loStringBuilder.AppendLine(@"}");
            //    loStringBuilder.AppendLine(@"");
            //}


            //if (1 == 2)
            //{
            //    loStringBuilder.AppendLine(@"# Software installieren");
            //    loStringBuilder.AppendLine(@"$Setup += @{");
            //    loStringBuilder.AppendLine(@"	Type = ""msi"";");
            //    loStringBuilder.AppendLine(@"	Name = ""setup.msi"";");
            //    loStringBuilder.AppendLine(@"	GUID = """ + lsUninstallKey + @""";");
            //    loStringBuilder.AppendLine(@"");
            //    loStringBuilder.AppendLine(@"}");
            //}

            //loStringBuilder.AppendLine(@"");
            //if (1 == 2)
            //{
            //    loStringBuilder.AppendLine(@"# Berechtigungen setzen");
            //    loStringBuilder.AppendLine(@"$Setup += @{");
            //    loStringBuilder.AppendLine(@"	Type = ""exe"";");
            //    loStringBuilder.AppendLine(@"	PATH = ""C:\Support\Tools""");
            //    loStringBuilder.AppendLine(@"	Name = ""SubInacl.exe"";");
            //    loStringBuilder.AppendLine(@"	Parameters = @(");
            //    loStringBuilder.AppendLine(@"	""/subdirectories"", (""`"""" + $CommonDirs[""ProgramFiles32""] + ""\CBK_Client`""""),");
            //    loStringBuilder.AppendLine(@"        ""/Grant=Users=C""");
            //    loStringBuilder.AppendLine(@"    );");
            //    loStringBuilder.AppendLine(@"	");
            //    loStringBuilder.AppendLine(@"	WindowStyle = ""Hidden"";");
            //    loStringBuilder.AppendLine(@"}");
            //    loStringBuilder.AppendLine(@"");
            //}
            //if (1 == 2)
            //{
            //    loStringBuilder.AppendLine(@"$Setup += @{");
            //    loStringBuilder.AppendLine(@"	Type = ""exe"";");
            //    loStringBuilder.AppendLine(@"	PATH = ""C:\Support\Tools""");
            //    loStringBuilder.AppendLine(@"	Name = ""SubInacl.exe"";");
            //    loStringBuilder.AppendLine(@"	Parameters = @(");
            //    loStringBuilder.AppendLine(@"	""/subdirectories"", (""`"""" + $CommonDirs[""ProgramFiles32""] + ""\CBK_Client\*.*`""""),");
            //    loStringBuilder.AppendLine(@"        ""/Grant=Users=C""");
            //    loStringBuilder.AppendLine(@"    );");
            //    loStringBuilder.AppendLine(@"	");
            //    loStringBuilder.AppendLine(@"	WindowStyle = ""Hidden"";");
            //    loStringBuilder.AppendLine(@"}");
            //    loStringBuilder.AppendLine(@"");
            //}


            loStringBuilder.AppendLine(@"# Last action: register installation:");
            loStringBuilder.AppendLine(@"$Setup += @{");
            loStringBuilder.AppendLine(@"	Type = ""reg"";");
            loStringBuilder.AppendLine(@"	Path = ""HKLM:\Software\_SW-Delivery\"" + $Package[""ID""];");
            loStringBuilder.AppendLine(@"	Value = ""InstallDate"";");
            loStringBuilder.AppendLine(@"	Data = (get-date -Format ""yyyy-MM-dd HH:mm:ss zz"").ToString();");
            loStringBuilder.AppendLine(@"	ValueType = ""String"";");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# --------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"# * Examples and documentation for setup definition");
            loStringBuilder.AppendLine(@"# * please only copy from examples instead of modifying them - so later revisitors have a chance to get them...");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * single setup block with all possible options:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"# * generic:");
            loStringBuilder.AppendLine(@"#	Type = ""<TYPE>"";				# type ""msi"", ""msp"", ""msu"", ""exe"", ""ps"" or ""reg"" (mandatory)");
            loStringBuilder.AppendLine(@"#	Architecture = ""<Architecture>"";# defines the architecture for which only this block have to proceed");
            loStringBuilder.AppendLine(@"#									#  (optional: Standard is unset, valid values: x86, x64)");
            loStringBuilder.AppendLine(@"#	Features = @(""Feature1"", ...);	# list of msi-features to be installed/removed (only msi, optional)");
            loStringBuilder.AppendLine(@"#	GUID = ""<GUID>"";				# msi-ProductCode (only msi, mandatory)");
            loStringBuilder.AppendLine(@"#	LogFile = ""${env:LocalLogPath}\"" + $Package[""ID""] + "".setup.log"";");
            loStringBuilder.AppendLine(@"#									# log file for directly supported setup types (msi/msp/msu, optional)");
            loStringBuilder.AppendLine(@"#	Properties = @(""PROP1=x"", ...);	# list of additional msi-properties (only msi, optional)");
            loStringBuilder.AppendLine(@"#	WindowStyle = ""<Style>"";		# state of the windows used for the process");
            loStringBuilder.AppendLine(@"#									# (only msi/msp/exe, optional: Standard ""Normal"",");
            loStringBuilder.AppendLine(@"#									#  valid values: Normal, Hidden, Minimized, Maximized)");
            loStringBuilder.AppendLine(@"#");
            loStringBuilder.AppendLine(@"# * installation:");
            loStringBuilder.AppendLine(@"#	Name = ""<SETUP>"";				# msi, msp, msu, executable or ps-command");
            loStringBuilder.AppendLine(@"#									#  (only msi/msp/msu/exe/ps, optional: installation action will be skipped if not set)");
            loStringBuilder.AppendLine(@"#	Parameters = @(""<PAR1>"", ...);	# parameters for executable or ps-command (only exe/ps, optional)");
            loStringBuilder.AppendLine(@"#	Path = ""<PATH>"";				# installation source path (only msi/msp/exe, optional: Standard $SourcePath) or");
            loStringBuilder.AppendLine(@"#									#  path to registry key (only reg, mandatory)");
            loStringBuilder.AppendLine(@"#	Transforms = ""<MST>"";			# msi-transforms file relative to Path (only msi/msp, optional)");
            loStringBuilder.AppendLine(@"#	AcceptExitCodes = @(0, 5, ...);	# list of accepted return codes at installation (optional)");
            loStringBuilder.AppendLine(@"#");
            loStringBuilder.AppendLine(@"# * uninstallation:");
            loStringBuilder.AppendLine(@"#	UninstallName = ""<SETUP>"";					# executable or ps-command");
            loStringBuilder.AppendLine(@"#												#  (only exe/ps, optional: uninstallation action will be skipped if not set)");
            loStringBuilder.AppendLine(@"#	UninstallParameters = @(""<PAR1>"", ...);		# parameters to executable or ps-command (only exe/ps, optional)");
            loStringBuilder.AppendLine(@"#	UninstallPath = ""<PATH>"";					# uninstallation source path (only exe, optional: Standard $SourcePath)");
            loStringBuilder.AppendLine(@"#	UninstallAcceptExitCodes = @(0, 5, ...);	# list of accepted return codes at uninstallation (optional)");
            loStringBuilder.AppendLine(@"#");
            loStringBuilder.AppendLine(@"# * ARP:");
            loStringBuilder.AppendLine(@"#	ARPID = ""<Uninstall-ID in Registry>"";	# key name of registry uninstall entry");
            loStringBuilder.AppendLine(@"#											#  (optional; but mandatory if any ARP setting is used)");
            loStringBuilder.AppendLine(@"#	ARPWow6432Node = $false;				# ARP entry below Wow6432Node? (optional, default $false, only on x64 OS)");
            loStringBuilder.AppendLine(@"#	ARPName = [String]$Package[""Product"",""Version"",""Architecture""];		# ProductName (optional)");
            loStringBuilder.AppendLine(@"#	ARPPublisher = $Package[""Vendor""];		# ProductVendor/ProductPublisher (optional)");
            loStringBuilder.AppendLine(@"#	ARPVersion = $Package[""Version""];		# ProductVersion (optional)");
            loStringBuilder.AppendLine(@"#	ARPIcon = ""${env:ProgramFiles}\Vendor\Product\program.exe,0"";	# ARPPRODUCTICON (optional)");
            loStringBuilder.AppendLine(@"#	ARPUninstallString = ""${env:ProgramFiles}\V\P\uninstall.exe"";	# sets the uninstall command;");
            loStringBuilder.AppendLine(@"#											# if its neither given nor existent in registry, a messagebox command will be");
            loStringBuilder.AppendLine(@"#											# placed and all ARPNo* will be set to true (optional)");
            loStringBuilder.AppendLine(@"#	ARPContact = ""IT-Servicedesk"";			# ARPCONTACT (optional)");
            loStringBuilder.AppendLine(@"#	ARPComments = ""Repackaging/Customization for "" + $Organization[""Name""];		# ARPCOMMENTS (optional)");
            loStringBuilder.AppendLine(@"#	ARPHelpLink = ""mailto:"" + $Organization[""Mail""];		# ARPHELPLINK (optional)");
            loStringBuilder.AppendLine(@"#	ARPHelpTelephone = $Organization[""ServiceTelephone""];	# ARPHELPTELEPHONE (optional)");
            loStringBuilder.AppendLine(@"#	ARPNoModify = $true;					# ARPNOMODIFY (optional)");
            loStringBuilder.AppendLine(@"#	ARPNoRemove = $false;					# ARPNOREMOVE (optional)");
            loStringBuilder.AppendLine(@"#	ARPNoRepair = $true;					# ARPNOREPAIR (optional)");
            loStringBuilder.AppendLine(@"#	ARPSystemComponent = $false;			# ARPSYSTEMCOMPONENT (optional)");
            loStringBuilder.AppendLine(@"#	RemoveARPURLUpdateInfo = $true;			# remove ARPURLUPDATEINFO  (optional)");
            loStringBuilder.AppendLine(@"#	UninstallARP = $false;					# remove whole ARP key at uninstallation (optional)");
            loStringBuilder.AppendLine(@"#");
            loStringBuilder.AppendLine(@"# * registry:");
            loStringBuilder.AppendLine(@"#	Value = ""ProductName"";		# registry value (only reg, mandatory)");
            loStringBuilder.AppendLine(@"#	Data = [String]$Package[""Product"",""Version"",""Architecture""];	# registry data (only reg, mandatory)");
            loStringBuilder.AppendLine(@"#	ValueType = ""String"";		# registry data type (only reg, optional: Standard ""String"",");
            loStringBuilder.AppendLine(@"#								#  valid values: String, ExpandString, DWord, MultiString, QWord, Binary)");
            loStringBuilder.AppendLine(@"#");
            loStringBuilder.AppendLine(@"# * check installation:");
            loStringBuilder.AppendLine(@"#	CheckType = ""<Type>""		# type of check: ""file"", ""registry"", ""uninstall"", or ""execute"" (optional)");
            loStringBuilder.AppendLine(@"#								#  description:");
            loStringBuilder.AppendLine(@"#								#   execute: test a exitcode of an script or binary");
            loStringBuilder.AppendLine(@"#								#   file: test a file existence, size, version or date");
            loStringBuilder.AppendLine(@"#								#   registry: test a registry key/value existence or data");
            loStringBuilder.AppendLine(@"#								#   uninstall: test a ARP entry existence or version");
            loStringBuilder.AppendLine(@"#	CheckCondition = ""<COND>""	# condition for check (mandatory if CheckType is set)");
            loStringBuilder.AppendLine(@"#								#  description:");
            loStringBuilder.AppendLine(@"#								#   equals: equals CheckPaths data with CheckValue? (only for registry)");
            loStringBuilder.AppendLine(@"#								#   exitcode_{eq|lt|le|gt|ge}: is exitcode eq/lt/le/gt/ge CheckValue? (only for execute)");
            loStringBuilder.AppendLine(@"#								#   {c|m|a}date_{eq|lt|le|gt|ge}: is files creation/modification/access date eq/lt/le/gt/ge CheckValue? (only for file)");
            loStringBuilder.AppendLine(@"#								#   exists: does file/registry key/registry value/ARP entry in CheckPath exists? (only for file, registry and uninstall)");
            loStringBuilder.AppendLine(@"#								#   size_{eq|lt|le|gt|ge}: is file size eq/lt/le/gt/ge CheckValue? (only for file)");
            loStringBuilder.AppendLine(@"#								#   version_{eq|lt|le|gt|ge}: is file version/ARP entry version eq/lt/le/gt/ge CheckValue? (only for file and uninstall)");
            loStringBuilder.AppendLine(@"#	CheckPath = ""<OBJECT>""		# object of the test: file path, registry key or value, executable path or ARP DisplayName");
            loStringBuilder.AppendLine(@"#	CheckValue = ""<DATA>""		# data to test for: registry data, exitcode, date in ISO8601, size in bytes or version number");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * MSI example with TRANSFORMS:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""msi"";");
            loStringBuilder.AppendLine(@"#	Name = ""setupA.msi"";");
            loStringBuilder.AppendLine(@"#	Transforms = ""setupA.mst"";");
            loStringBuilder.AppendLine(@"#	GUID = ""{11111111-1111-1111-1111-111111111111}"";");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * MSI example without TRANSFORMS:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""msi"";");
            loStringBuilder.AppendLine(@"#	Name = ""setupB.msi"";");
            loStringBuilder.AppendLine(@"#	GUID = ""{00000000-0000-0000-0000-000000000000}"";");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * MSP example:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""msp"";");
            loStringBuilder.AppendLine(@"#	Name = ""update.msp"";");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * MSU example:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""msu"";");
            loStringBuilder.AppendLine(@"#	Name = ""update.msu"";");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * Executable setup example with uninstallation from source directory:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""exe"";");
            loStringBuilder.AppendLine(@"#	Name = ""setupC.exe"";");
            loStringBuilder.AppendLine(@"#	Parameters = @(""/SILENT"");");
            loStringBuilder.AppendLine(@"#	UninstallName = ""setupC.exe"";");
            loStringBuilder.AppendLine(@"#	UninstallParameters = @(""/SILENT"", ""/REMOVE"");");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * Executable setup example with uninstallation from target directory:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""exe"";");
            loStringBuilder.AppendLine(@"#	Name = ""setupD.exe"";");
            loStringBuilder.AppendLine(@"#	Parameters = @(""/S"", ""/Q"");");
            loStringBuilder.AppendLine(@"#	UninstallName = ""uninstall.exe"";");
            loStringBuilder.AppendLine(@"#	UninstallParameters = @(""/S"", ""/Q"", ""/R"");");
            loStringBuilder.AppendLine(@"#	UninstallPath = ""${env:ProgramFiles(x86)}\Vendor\Product"";");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * PowerShell example:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""ps"";");
            loStringBuilder.AppendLine(@"#	Name = ""Copy-Item"";");
            loStringBuilder.AppendLine(@"#	Parameters = @(");
            loStringBuilder.AppendLine(@"#		""-Path"",		""`""${SourcePath}\CustomConfiguration`"""",");
            loStringBuilder.AppendLine(@"#		""-Destination"",	""`""${env:ProgramData}\Vendor\Product\Configuration`"""",");
            loStringBuilder.AppendLine(@"#		""-Force"",");
            loStringBuilder.AppendLine(@"#		""-Recurse""");
            loStringBuilder.AppendLine(@"#	);");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * PowerShell example to create shortcut:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""ps"";");
            loStringBuilder.AppendLine(@"#	Name = ""Create-Shortcut"";");
            loStringBuilder.AppendLine(@"#	Parameters = @(");
            loStringBuilder.AppendLine(@"#		""-Path"",				""`"""" + $CommonDirs[""Programs""] + ""\Notepad`"""",	# directory path to the shortcut (mandatory)");
            loStringBuilder.AppendLine(@"#		""-Name"",				""`""Notepad Editor.lnk`"""",						# filename of the shortcut (mandatory)");
            loStringBuilder.AppendLine(@"#		""-Target"",				""`"""" + $CommonDirs[""SystemRoot""] + ""\notepad.exe`"""",	# target of the shortcut (mandatory)");
            loStringBuilder.AppendLine(@"#		""-Arguments"",			""`""N:\my.txt`"""",								# arguments to the target (optional)");
            loStringBuilder.AppendLine(@"#		""-Icon"",				""`"""" + $CommonDirs[""System32_Current""] + ""\shell32.dll,152`"""",	# icon (optional)");
            loStringBuilder.AppendLine(@"#		""-WorkingDirectory"",	""`""N:\`"""",										# working directory of target (optional)");
            loStringBuilder.AppendLine(@"#		""-Description"",			""`""A test shortcut.`"""",							# description (optional)");
            loStringBuilder.AppendLine(@"#		""-HotKey"",				""`""CTRL+ALT+N`""""								# hot key (optional)");
            loStringBuilder.AppendLine(@"#	);");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * PowerShell example to remove empty directory or registry paths:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""ps"";");
            loStringBuilder.AppendLine(@"#	Name = ""Remove-Item-IfEmpty"";");
            loStringBuilder.AppendLine(@"#	Parameters = @(");
            loStringBuilder.AppendLine(@"#		""-Path"", ""`""${env:ProgramData}\Vendor`""""");
            loStringBuilder.AppendLine(@"#	);");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * Registry example:");
            loStringBuilder.AppendLine(@"#$Setup += @{");
            loStringBuilder.AppendLine(@"#	Type = ""reg"";");
            loStringBuilder.AppendLine(@"#	Path = ""HKLM:\Software\Classes\Installer\Products\aaaabbbbccccddddeeeeffff00001111"";");
            loStringBuilder.AppendLine(@"#	Value = ""ProductName"";");
            loStringBuilder.AppendLine(@"#	Data = [String]$Package[""Product"",""Version"",""Architecture""];");
            loStringBuilder.AppendLine(@"#	ValueType = ""String"";");
            loStringBuilder.AppendLine(@"#}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * End of examples.");
            loStringBuilder.AppendLine(@"# --------------------------------------------------------------------------------------------------");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"$global:Setup = $Setup }}	# do not touch this!");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * do not touch anything below!");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"if ($PSVersionTable.PSVersion.Major -lt 2) {");
            loStringBuilder.AppendLine(@"	""ERROR: This Script requires at least version 2.0 of the PowerShell!""");
            loStringBuilder.AppendLine(@"	""For more information and download visit: http://www.microsoft.com/powershell""");
            loStringBuilder.AppendLine(@"	exit 1");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"# * generic functions:");
            loStringBuilder.AppendLine(@"function Create-Shortcut {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Path,");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Name,");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Target,");
            loStringBuilder.AppendLine(@"		[String]$Arguments,");
            loStringBuilder.AppendLine(@"		[String]$Icon,");
            loStringBuilder.AppendLine(@"		[String]$WorkingDirectory,");
            loStringBuilder.AppendLine(@"		[String]$Description,");
            loStringBuilder.AppendLine(@"		[String]$HotKey");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	New-Item -type directory -path $Path -force | Out-Null");
            loStringBuilder.AppendLine(@"	$WShell = New-Object -comObject WScript.Shell");
            loStringBuilder.AppendLine(@"	$Shortcut = $WShell.CreateShortcut(""$Path\$Name"")");
            loStringBuilder.AppendLine(@"	$Shortcut.TargetPath = $Target");
            loStringBuilder.AppendLine(@"	if ($Arguments)			{ $Shortcut.Arguments = $Arguments }");
            loStringBuilder.AppendLine(@"	if ($Icon)				{ $Shortcut.IconLocation = $Icon }");
            loStringBuilder.AppendLine(@"	if ($WorkingDirectory)	{ $Shortcut.WorkingDirectory = $WorkingDirectory }");
            loStringBuilder.AppendLine(@"	if ($Description)		{ $Shortcut.Description = $Description }");
            loStringBuilder.AppendLine(@"	if ($HotKey)			{ $Shortcut.HotKey = $HotKey }");
            loStringBuilder.AppendLine(@"	$Shortcut.Save()");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Get-CommonShellFolder {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Identifier");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	Get-RegistryValue -Path ""hklm:\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"" -Value ""$Identifier""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Get-RegistryValue {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Path,");
            loStringBuilder.AppendLine(@"		[String]$Value");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	if (-not $Value) {");
            loStringBuilder.AppendLine(@"		$Value = split-Path -leaf $Path;");
            loStringBuilder.AppendLine(@"		$Path = split-Path -parent $Path;");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	Get-ItemProperty -Path ""$Path"" -name ""$Value"" -ErrorAction SilentlyContinue `");
            loStringBuilder.AppendLine(@"		| Select-Object -ExpandProperty ""$Value"" -ErrorAction SilentlyContinue");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function hr { ""-"" * ($Host.UI.RawUI.MaxWindowSize.Width - 1) }");
            loStringBuilder.AppendLine(@"function Is-MSI-Installed {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$ProductCode");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	Get-WmiObject -class ""Win32_Product"" | ForEach-Object {");
            loStringBuilder.AppendLine(@"		if ( $_.IdentifyingNumber.ToLower() -eq $ProductCode.ToLower() ) { return $true }");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	return $false");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function title {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Title");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	hr; "">>> "" + $Title + "":""; """"");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Remove-Item-IfEmpty {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Path");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	if (Test-Path ""$Path"") {");
            loStringBuilder.AppendLine(@"		if ( -not (get-childitem ""$Path"" -ErrorAction SilentlyContinue)) { Remove-Item ""$Path"" -Force }");
            loStringBuilder.AppendLine(@"		else { ""Path `""$Path`"" not empty - removing ignored."" }");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	else { ""Path `""$Path`"" not found - removing ignored.""	}");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Remove-RegistryValue {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Path,");
            loStringBuilder.AppendLine(@"		[String]$Value");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	if (-not $Value) {");
            loStringBuilder.AppendLine(@"		$Value = split-Path -leaf $Path;");
            loStringBuilder.AppendLine(@"		$Path = split-Path -parent $Path;");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	Remove-ItemProperty -Path ""$Path"" -Name ""$Value"" `");
            loStringBuilder.AppendLine(@"		-Force -ErrorAction SilentlyContinue | Out-Null");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Set-RegistryValue {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Path,");
            loStringBuilder.AppendLine(@"		[String]$Value,");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Data,");
            loStringBuilder.AppendLine(@"		[String]$Type");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	if (-not $Value) {");
            loStringBuilder.AppendLine(@"		$Value = split-Path -leaf $Path;");
            loStringBuilder.AppendLine(@"		$Path = split-Path -parent $Path;");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	if (-not $Type) { $Type = 'String' }");
            loStringBuilder.AppendLine(@"	if ( -not (Test-Path ""$Path"") ) { New-Item -Path ""$Path"" -type directory -force | Out-Null }");
            loStringBuilder.AppendLine(@"	New-ItemProperty -Path ""$Path"" -Name ""$Value"" -Value ""$Data"" -Type $Type -Force | Out-Null");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Test-Setup {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)]$SetupDefinition");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"	if ( (""msi"", ""msp"" -contains $SetupDefinition.Type.ToLower()) -and $SetupDefinition.GUID ) {");
            loStringBuilder.AppendLine(@"		if ( -not (Is-MSI-Installed -ProductCode $SetupDefinition.GUID) ) { return $false }");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	if ( $SetupDefinition.Name -and $SetupDefinition.CheckType -and $SetupDefinition.CheckCondition -and $SetupDefinition.CheckPath ) {");
            loStringBuilder.AppendLine(@"		switch ( $SetupDefinition.CheckType.ToLower() ) {");
            loStringBuilder.AppendLine(@"			""file"" {");
            loStringBuilder.AppendLine(@"				if ( (Test-Path $SetupDefinition.CheckPath) ) {");
            loStringBuilder.AppendLine(@"					switch -regex ( $SetupDefinition.CheckCondition.ToLower() ) {");
            loStringBuilder.AppendLine(@"						""^exists$"" {}");
            loStringBuilder.AppendLine(@"						""^(c|m|a)date_(eq|lt|le|gt|ge)$"" {");
            loStringBuilder.AppendLine(@"							switch ( $SetupDefinition.CheckCondition.ToLower().Substring(0,1) ) {");
            loStringBuilder.AppendLine(@"								""c"" { $filedate = Get-Date -UFormat %s -Date (Get-Item $SetupDefinition.CheckPath).CreationTime }");
            loStringBuilder.AppendLine(@"								""m"" { $filedate = Get-Date -UFormat %s -Date (Get-Item $SetupDefinition.CheckPath).LastWriteTime }");
            loStringBuilder.AppendLine(@"								""a"" { $filedate = Get-Date -UFormat %s -Date (Get-Item $SetupDefinition.CheckPath).LastAccessTime }");
            loStringBuilder.AppendLine(@"							}");
            loStringBuilder.AppendLine(@"							$condition = [String]$SetupDefinition.CheckCondition.ToLower().Split(""_"")[1]");
            loStringBuilder.AppendLine(@"							$checkvalue = Get-Date -UFormat %s -Date $SetupDefinition.CheckValue");
            loStringBuilder.AppendLine(@"							Invoke-Expression -Command ""if ( -not ($filedate -$condition $checkvalue) ) { return $false }""");
            loStringBuilder.AppendLine(@"						}");
            loStringBuilder.AppendLine(@"						""^size_(eq|lt|le|gt|ge)$"" {");
            loStringBuilder.AppendLine(@"							$filesize = (Get-Item $SetupDefinition.CheckPath).Length");
            loStringBuilder.AppendLine(@"							$condition = [String]$SetupDefinition.CheckCondition.ToLower().Split(""_"")[1]");
            loStringBuilder.AppendLine(@"							$checkvalue = $SetupDefinition.CheckValue");
            loStringBuilder.AppendLine(@"							Invoke-Expression -Command ""if ( -not ($filesize -$condition $checkvalue) ) { return $false }""");
            loStringBuilder.AppendLine(@"						}");
            loStringBuilder.AppendLine(@"						""^version_(eq|lt|le|gt|ge)$"" {");
            loStringBuilder.AppendLine(@"							$fileversion = (Get-Item $SetupDefinition.CheckPath).VersionInfo.FileVersion");
            loStringBuilder.AppendLine(@"							$condition = [String]$SetupDefinition.CheckCondition.ToLower().Split(""_"")[1]");
            loStringBuilder.AppendLine(@"							$checkvalue = $SetupDefinition.CheckValue");
            loStringBuilder.AppendLine(@"							Invoke-Expression -Command ""if ( -not ([Version]$fileversion -$condition [Version]$checkvalue) ) { return $false }""");
            loStringBuilder.AppendLine(@"						}");
            loStringBuilder.AppendLine(@"						default { return 1024 }");
            loStringBuilder.AppendLine(@"					}");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				else { return $false }");
            loStringBuilder.AppendLine(@"			} # end of switch:file");
            loStringBuilder.AppendLine(@"			""registry"" {");
            loStringBuilder.AppendLine(@"				switch ( $SetupDefinition.CheckCondition.ToLower() ) {");
            loStringBuilder.AppendLine(@"					""exists"" {");
            loStringBuilder.AppendLine(@"						$Path = $SetupDefinition.CheckPath");
            loStringBuilder.AppendLine(@"						if ( -not (Get-ItemProperty -Path $Path -ErrorAction SilentlyContinue)) {");
            loStringBuilder.AppendLine(@"							$Value = split-Path -leaf $Path");
            loStringBuilder.AppendLine(@"							$Path = split-Path -parent $Path");
            loStringBuilder.AppendLine(@"							if ( -not (Get-ItemProperty -Path $Path -Name $Value -ErrorAction SilentlyContinue) ) { return $false }");
            loStringBuilder.AppendLine(@"						}");
            loStringBuilder.AppendLine(@"					}");
            loStringBuilder.AppendLine(@"					""equals"" {");
            loStringBuilder.AppendLine(@"						if ( -not ((Get-RegistryValue -Path $SetupDefinition.CheckPath) -eq $SetupDefinition.CheckValue) ) { return $false }");
            loStringBuilder.AppendLine(@"					}");
            loStringBuilder.AppendLine(@"					default { return 1024 }");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			} # end of switch:registry");
            loStringBuilder.AppendLine(@"			""uninstall"" {");
            loStringBuilder.AppendLine(@"				switch -regex ( $SetupDefinition.CheckCondition.ToLower() ) {");
            loStringBuilder.AppendLine(@"					""^exists$"" {");
            loStringBuilder.AppendLine(@"						$found = $false");
            loStringBuilder.AppendLine(@"						ForEach ($SearchRegkey in @(");
            loStringBuilder.AppendLine(@"								""HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"",");
            loStringBuilder.AppendLine(@"								""HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"")");
            loStringBuilder.AppendLine(@"								) {");
            loStringBuilder.AppendLine(@"							ForEach ($SearchPath in (Get-ChildItem -Path $SearchRegkey -ErrorAction SilentlyContinue)) {");
            loStringBuilder.AppendLine(@"								if ((Get-RegistryValue -Path $SearchPath.PSPath -Value ""DisplayName"") -eq $SetupDefinition.CheckPath) {");
            loStringBuilder.AppendLine(@"									$found = $true");
            loStringBuilder.AppendLine(@"								}");
            loStringBuilder.AppendLine(@"							}");
            loStringBuilder.AppendLine(@"						}");
            loStringBuilder.AppendLine(@"						if ($found -eq $false) { return $false }");
            loStringBuilder.AppendLine(@"					}");
            loStringBuilder.AppendLine(@"					""^version_(eq|lt|le|gt|ge)$"" {");
            loStringBuilder.AppendLine(@"						$found = $false");
            loStringBuilder.AppendLine(@"						$condition = [String]$SetupDefinition.CheckCondition.ToLower().Split(""_"")[1]");
            loStringBuilder.AppendLine(@"						$checkvalue = $SetupDefinition.CheckValue");
            loStringBuilder.AppendLine(@"						ForEach ($SearchRegkey in @(");
            loStringBuilder.AppendLine(@"								""HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"",");
            loStringBuilder.AppendLine(@"								""HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"")");
            loStringBuilder.AppendLine(@"								) {");
            loStringBuilder.AppendLine(@"							ForEach ($SearchPath in (Get-ChildItem -Path $SearchRegkey -ErrorAction SilentlyContinue)) {");
            loStringBuilder.AppendLine(@"								$foundversion = Get-RegistryValue -Path $SearchPath.PSPath -Value ""DisplayVersion""");
            loStringBuilder.AppendLine(@"								Invoke-Expression -Command ""if ( [Version]$foundversion -$condition [Version]$checkvalue ) {`$found = `$true}""");
            loStringBuilder.AppendLine(@"							}");
            loStringBuilder.AppendLine(@"						}");
            loStringBuilder.AppendLine(@"						if ($found -eq $false) { return $false }");
            loStringBuilder.AppendLine(@"					}");
            loStringBuilder.AppendLine(@"					default { return 1024 }");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			} # end of switch:uninstall");
            loStringBuilder.AppendLine(@"			""execute"" {");
            loStringBuilder.AppendLine(@"				switch -regex ( $SetupDefinition.CheckCondition.ToLower() ) {");
            loStringBuilder.AppendLine(@"					""^exitcode_(eq|lt|le|gt|ge)$"" {");
            loStringBuilder.AppendLine(@"						$executable = $SetupDefinition.CheckPath");
            loStringBuilder.AppendLine(@"						$condition = [String]$SetupDefinition.CheckCondition.ToLower().Split(""_"")[1]");
            loStringBuilder.AppendLine(@"						$checkvalue = $SetupDefinition.CheckValue");
            loStringBuilder.AppendLine(@"						$exitcode = (Start-Process -Wait -WindowStyle ""Hidden"" -Passthru -FilePath ""$executable"").ExitCode");
            loStringBuilder.AppendLine(@"						Invoke-Expression -Command ""if ( -not ($exitcode -$condition $checkvalue) ) { return $false }""");
            loStringBuilder.AppendLine(@"					}");
            loStringBuilder.AppendLine(@"					default { return 1024 }");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			} # end of switch:execute");
            loStringBuilder.AppendLine(@"			default { return 1024}");
            loStringBuilder.AppendLine(@"		} # end of switch");
            loStringBuilder.AppendLine(@"		return $true");
            loStringBuilder.AppendLine(@"	} # end of if");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * presets and other constants:");
            loStringBuilder.AppendLine(@"$global:ConfirmPreference = 'None'");
            loStringBuilder.AppendLine(@"$global:ErrorActionPreference = 'Stop'");
            loStringBuilder.AppendLine(@"$SetupLoopVariables = @(");
            loStringBuilder.AppendLine(@"	""Command"", ""Parameters"", ""GUID"", ""MSI"", ""MSU"", ""Path"",");
            loStringBuilder.AppendLine(@"	""Value"", ""Data"", ""ValueType"", ""ARPRegPath"",");
            loStringBuilder.AppendLine(@"	""CurrentExitCode"", ""CurrentExitMessage"")");
            loStringBuilder.AppendLine(@"$SourcePath = split-Path -parent $MyInvocation.MyCommand.Definition");
            loStringBuilder.AppendLine(@"$ScriptName = split-Path -Leaf $MyInvocation.MyCommand.Definition");
            loStringBuilder.AppendLine(@"$ScriptConfigurationXML = $SourcePath + ""\"" + [System.IO.Path]::GetFileNameWithoutExtension($ScriptName) + "".xml""");
            loStringBuilder.AppendLine(@"Remove-Variable -Name ExternalConfiguration -Scope global -ErrorAction SilentlyContinue");
            loStringBuilder.AppendLine(@"if ( Test-Path -Path $ScriptConfigurationXML ) {");
            loStringBuilder.AppendLine(@"	$global:ExternalConfiguration = Import-Clixml -Path $ScriptConfigurationXML");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"Get-OrganizationConfiguration");
            loStringBuilder.AppendLine(@"Get-PackageConfiguration");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * generating Package-ID:");
            loStringBuilder.AppendLine(@"if ( $Package[""IDOverride""] ) {	$global:Package[""ID""] = $Package[""IDOverride""]; }");
            loStringBuilder.AppendLine(@"else {");
            loStringBuilder.AppendLine(@"	$global:Package[""ID""] = `");
            loStringBuilder.AppendLine(@"		( $Package[""Vendor""] -replace ""\s"","""" ) + ""_"" + `");
            loStringBuilder.AppendLine(@"		( $Package[""Product""] -replace ""\s"","""" ) + ""_"" + `");
            loStringBuilder.AppendLine(@"		$Package[""Version""] + ""_"";");
            loStringBuilder.AppendLine(@"	if ( $Package[""Architecture""] ) { $global:Package[""ID""] += $Package[""Architecture""] + ""_""; }");
            loStringBuilder.AppendLine(@"	$global:Package[""ID""] += $Package[""Release""];");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"Get-OSConfiguration");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"if ($OS[""LogFile""]) { $LogFile = $OS[""LogFile""] }");
            loStringBuilder.AppendLine(@"if ($Package[""LogFile""]) { $LogFile = $Package[""LogFile""] }");
            loStringBuilder.AppendLine(@"if ( $LogFile ) {");
            loStringBuilder.AppendLine(@"	if ( -not (Test-Path (split-path -parent ""$LogFile"")) ) {");
            loStringBuilder.AppendLine(@"		New-Item -Path (split-path -parent ""$LogFile"") -type directory -force | Out-Null");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	Start-Transcript -Path ""$LogFile"" -Append -Force");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * refining $OS:");
            loStringBuilder.AppendLine(@"$global:OS += @{");
            loStringBuilder.AppendLine(@"	Architecture = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).OSArchitecture;");
            loStringBuilder.AppendLine(@"		#FIXME: this won't work with <NT6 - see: http://msdn.microsoft.com/en-us/library/aa394239.aspx");
            loStringBuilder.AppendLine(@"	BuildVersion = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).BuildNumber;");
            loStringBuilder.AppendLine(@"	CompleteVersion = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).Version;");
            loStringBuilder.AppendLine(@"	CurrentUser = ${env:UserName};");
            loStringBuilder.AppendLine(@"	CurrentDomain = ${env:UserDNSDomain};");
            loStringBuilder.AppendLine(@"	Hostname = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).CSName;");
            loStringBuilder.AppendLine(@"	LCID = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).OSLanguage;");
            loStringBuilder.AppendLine(@"	MajorVersion = [Int32]((Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).Version `");
            loStringBuilder.AppendLine(@"					| %{$_.split('.')[0]});");
            loStringBuilder.AppendLine(@"	MinorVersion = [Int32]((Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).Version `");
            loStringBuilder.AppendLine(@"					| %{$_.split('.')[1]});");
            loStringBuilder.AppendLine(@"	Name = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).Caption;");
            loStringBuilder.AppendLine(@"	PSVersion = [String]$PSVersionTable.PSVersion.Major + ""."" + [String]$PSVersionTable.PSVersion.Minor;");
            loStringBuilder.AppendLine(@"	RegisteredOrganization = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).Organization;");
            loStringBuilder.AppendLine(@"	RegisteredUser = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).RegisteredUser;");
            loStringBuilder.AppendLine(@"	SPMajorVersion = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).ServicePackMajorVersion;");
            loStringBuilder.AppendLine(@"	SPMinorVersion = (Get-WmiObject -Class Win32_OperatingSystem -ErrorAction SilentlyContinue).ServicePackMinorVersion;");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if ( $OS[""Architecture""] -eq '64-bit' ) { $global:OS[""Architecture""] = 'x64' }");
            loStringBuilder.AppendLine(@"else { $global:OS[""Architecture""] = 'x86' }");
            loStringBuilder.AppendLine(@"if ([System.IntPtr]::Size -eq 4) { $global:OS[""ArchitectureEnvironment""] = 'x86' }");
            loStringBuilder.AppendLine(@"else { $global:OS[""ArchitectureEnvironment""] = 'x64' }");
            loStringBuilder.AppendLine(@"$global:OS[""Version""] = [String]$OS[""MajorVersion""] + '.' + [String]$OS[""MinorVersion""];");
            loStringBuilder.AppendLine(@"$global:OS[""Name""] += '[' + $OS[""Architecture""] + ']';");
            loStringBuilder.AppendLine(@"if ( $OS[""SPMajorVersion""] -gt 0 -or $OS[""SPMinorVersion""] -gt 0 ) {");
            loStringBuilder.AppendLine(@"	$global:OS[""SPVersion""] = [String]$OS[""SPMajorVersion""] + '.' + [String]$OS[""SPMinorVersion""];");
            loStringBuilder.AppendLine(@"	$global:OS[""Name""] += ' (' + (Get-WmiObject -Class Win32_OperatingSystem).CSDVersion + ')';");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if ( -not $OS[""CurrentDomain""] ) { $global:OS[""CurrentDomain""] = ${env:UserDomain} }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# * refining $CommonDirs:");
            loStringBuilder.AppendLine(@"$CommonDirs = @{");
            loStringBuilder.AppendLine(@"	AdministrativeTools =	(Get-CommonShellFolder ""Common Administrative Tools"");");
            loStringBuilder.AppendLine(@"	AppData =				(Get-CommonShellFolder ""Common AppData"");");
            loStringBuilder.AppendLine(@"	Desktop =				(Get-CommonShellFolder ""Common Desktop"");");
            loStringBuilder.AppendLine(@"	Documents =				(Get-CommonShellFolder ""Common Documents"");");
            loStringBuilder.AppendLine(@"	Music =					(Get-CommonShellFolder ""CommonMusic"");");
            loStringBuilder.AppendLine(@"	Pictures =				(Get-CommonShellFolder ""CommonPictures"");");
            loStringBuilder.AppendLine(@"	Programs =				(Get-CommonShellFolder ""Common Programs"");");
            loStringBuilder.AppendLine(@"	StartMenu =				(Get-CommonShellFolder ""Common Start Menu"");");
            loStringBuilder.AppendLine(@"	Startup =				(Get-CommonShellFolder ""Common Startup"");");
            loStringBuilder.AppendLine(@"	Templates =				(Get-CommonShellFolder ""Common Templates"");");
            loStringBuilder.AppendLine(@"	Video =					(Get-CommonShellFolder ""CommonVideo"");");
            loStringBuilder.AppendLine(@"	SystemDrive =			${env:SystemDrive};");
            loStringBuilder.AppendLine(@"	SystemRoot =			${env:SystemRoot};");
            loStringBuilder.AppendLine(@"	System32_Current =		${env:SystemRoot} + ""\system32"";");
            loStringBuilder.AppendLine(@"	HKLMSoftware_Current =	""hklm:\Software"";");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if ( $OS[""ArchitectureEnvironment""] -eq 'x64' ) {");
            loStringBuilder.AppendLine(@"	$CommonDirs[""ProgramFiles32""] = ${env:ProgramFiles(x86)}");
            loStringBuilder.AppendLine(@"	$CommonDirs[""ProgramFiles64""] = ${env:ProgramFiles}");
            loStringBuilder.AppendLine(@"	$CommonDirs[""System32""] = ${env:SystemRoot} + ""\SysWOW64""");
            loStringBuilder.AppendLine(@"	$CommonDirs[""System64""] = ${env:SystemRoot} + ""\System32""");
            loStringBuilder.AppendLine(@"	$CommonDirs[""HKLMSoftware32""] = ""hklm:\Software\Wow6432Node""");
            loStringBuilder.AppendLine(@"	$CommonDirs[""HKLMSoftware64""] = ""hklm:\Software""");
            loStringBuilder.AppendLine(@"} else {");
            loStringBuilder.AppendLine(@"	$CommonDirs[""ProgramFiles32""] = ${env:ProgramFiles}");
            loStringBuilder.AppendLine(@"	$CommonDirs[""System32""] = ${env:SystemRoot} + ""\System32""");
            loStringBuilder.AppendLine(@"	$CommonDirs[""HKLMSoftware32""] = ""hklm:\Software""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"$CommonDirs[""ProgramsApplications""] = $CommonDirs[""Programs""] + ""\Applications""");
            loStringBuilder.AppendLine(@"$CommonDirs[""ProgramsUtilities""] = $CommonDirs[""Programs""] + ""\Utilities""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * job functions:");
            loStringBuilder.AppendLine(@"function niy { ""Not implemented yet!""; $global:returncode = 1 }");
            loStringBuilder.AppendLine(@"function Run-Check {");
            loStringBuilder.AppendLine(@"	title ""Check""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"	$CheckResult = 0");
            loStringBuilder.AppendLine(@"	$CheckLoop = 0");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"	:checkloop foreach ($CurrentSetup in $Setup) {");
            loStringBuilder.AppendLine(@"		foreach ( $v in $SetupLoopVariables ) { Remove-Variable $v -ErrorAction SilentlyContinue }");
            loStringBuilder.AppendLine(@"		if ( $CurrentSetup.Architecture ) { if ( $CurrentSetup.Architecture -ne $OS[""Architecture""] ) { continue checkloop } }");
            loStringBuilder.AppendLine(@"		$CheckLoop++");
            loStringBuilder.AppendLine(@"		switch ( Test-Setup -SetupDefinition $CurrentSetup ) {");
            loStringBuilder.AppendLine(@"			$true {}");
            loStringBuilder.AppendLine(@"			$false { $CheckResult++ }");
            loStringBuilder.AppendLine(@"			1024 {");
            loStringBuilder.AppendLine(@"				$global:errormessage = ""Unknown check configuration at setup block no. ${CheckLoop}!""");
            loStringBuilder.AppendLine(@"				$global:returncode = 1024");
            loStringBuilder.AppendLine(@"				break checkloop");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			default {}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"	} # end of :checkloop");
            loStringBuilder.AppendLine(@"	$global:returncode = $CheckResult");
            loStringBuilder.AppendLine(@"	""RESULT: $CheckResult check(s) are failed.""");
            loStringBuilder.AppendLine(@"	""""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Run-Install {");
            loStringBuilder.AppendLine(@"	title ""Installation""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"	:installloop foreach ($CurrentSetup in $Setup) {");
            loStringBuilder.AppendLine(@"		foreach ( $v in $SetupLoopVariables ) { Remove-Variable $v -ErrorAction SilentlyContinue }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		if ( $CurrentSetup.Architecture ) { if ( $CurrentSetup.Architecture -ne $OS[""Architecture""] ) { continue installloop } }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		# prepare setup");
            loStringBuilder.AppendLine(@"		if ( ""msi"", ""msp"" -contains $CurrentSetup.Type.ToLower() ) {");
            loStringBuilder.AppendLine(@"			# MSI/MSP setup");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Name ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Path ) { $CurrentSetup.Path = $SourcePath; }");
            loStringBuilder.AppendLine(@"			$Command = $CommonDirs[""System32_Current""] + ""\msiexec.exe""");
            loStringBuilder.AppendLine(@"			$MSI = ""`"""" + $CurrentSetup.Path + ""\"" + $CurrentSetup.Name + ""`""""");
            loStringBuilder.AppendLine(@"			switch ($CurrentSetup.Type.ToLower()) {");
            loStringBuilder.AppendLine(@"				""msi"" { $Parameters = @(""/package"") }");
            loStringBuilder.AppendLine(@"				""msp"" { $Parameters = @(""/update"") }");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			$Parameters += @($MSI, [String]$OS[""MSIExecDefaultParameters""])");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Transforms ) {");
            loStringBuilder.AppendLine(@"				$Parameters += ""TRANSFORMS="" + ""`"""" + $CurrentSetup.Path + ""\"" + $CurrentSetup.Transforms + ""`""""");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.MSILogfile ) {");
            loStringBuilder.AppendLine(@"				# for compatibility");
            loStringBuilder.AppendLine(@"				$CurrentSetup.LogFile = $CurrentSetup.MSILogfile");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.LogFile ) {");
            loStringBuilder.AppendLine(@"				$Parameters += ""/l*v "" + ""`"""" + $CurrentSetup.LogFile + ""`""""");
            loStringBuilder.AppendLine(@"				if ( -not (Test-Path (split-path -parent $CurrentSetup.LogFile)) ) {");
            loStringBuilder.AppendLine(@"					New-Item -Path (split-path -parent $CurrentSetup.LogFile) -type directory -force | Out-Null");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Properties ) {");
            loStringBuilder.AppendLine(@"				$Parameters += $CurrentSetup.Properties");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Features ) {");
            loStringBuilder.AppendLine(@"				$OFSbak = $OFS");
            loStringBuilder.AppendLine(@"				$OFS = "",""");
            loStringBuilder.AppendLine(@"				$Parameters += ""ADDLOCAL="" + $CurrentSetup.Features");
            loStringBuilder.AppendLine(@"				$OFS = $OFSbak");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""msu"" ) {");
            loStringBuilder.AppendLine(@"			# MSU update");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Name ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Path ) { $CurrentSetup.Path = $SourcePath; }");
            loStringBuilder.AppendLine(@"			$Command = $CommonDirs[""System32_Current""] + ""\wusa.exe""");
            loStringBuilder.AppendLine(@"			$MSU = ""`"""" + $CurrentSetup.Path + ""\"" + $CurrentSetup.Name + ""`""""");
            loStringBuilder.AppendLine(@"			$Parameters = @($MSU, ""/quiet"", ""/norestart"")");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.LogFile ) {");
            loStringBuilder.AppendLine(@"				$Parameters += ""/log:"" + ""`"""" + $CurrentSetup.LogFile + ""`""""");
            loStringBuilder.AppendLine(@"				if ( -not (Test-Path (split-path -parent $CurrentSetup.LogFile)) ) {");
            loStringBuilder.AppendLine(@"					New-Item -Path (split-path -parent $CurrentSetup.LogFile) -type directory -force | Out-Null");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""ps"" ) {");
            loStringBuilder.AppendLine(@"			# PS command");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Name ) { continue }");
            loStringBuilder.AppendLine(@"			$Command = $CurrentSetup.Name");
            loStringBuilder.AppendLine(@"			$Parameters = $CurrentSetup.Parameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""exe"" ) {");
            loStringBuilder.AppendLine(@"			# executable setup");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Name ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Path ) { $CurrentSetup.Path = $SourcePath; }");
            loStringBuilder.AppendLine(@"			$Command = $CurrentSetup.Path + ""\"" + $CurrentSetup.Name");
            loStringBuilder.AppendLine(@"			$Parameters = $CurrentSetup.Parameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""directexe"" ) {");
            loStringBuilder.AppendLine(@"			# direct executable command");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Name ) { continue }");
            loStringBuilder.AppendLine(@"			$Command = $CurrentSetup.Name");
            loStringBuilder.AppendLine(@"			$Parameters = $CurrentSetup.Parameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""reg"" ) {");
            loStringBuilder.AppendLine(@"			# registry setting");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Path ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Value ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Data ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.ValueType ) { $CurrentSetup.ValueType = ""String"" }");
            loStringBuilder.AppendLine(@"			$Path = $CurrentSetup.Path");
            loStringBuilder.AppendLine(@"			$Value = $CurrentSetup.Value");
            loStringBuilder.AppendLine(@"			$Data = $CurrentSetup.Data");
            loStringBuilder.AppendLine(@"			$ValueType = $CurrentSetup.ValueType");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		if ( -not $CurrentSetup.WindowStyle ) { $CurrentSetup.WindowStyle = ""Normal"" }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		# run setup");
            loStringBuilder.AppendLine(@"		if ( $Command ) {");
            loStringBuilder.AppendLine(@"			$CurrentExitCode = ""1860""");
            loStringBuilder.AppendLine(@"			""Command: $Command $Parameters""");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Type.ToLower() -ne ""ps"") {");
            loStringBuilder.AppendLine(@"				if ($Parameters) {");
            loStringBuilder.AppendLine(@"		        	$CurrentExitCode = ( `");
            loStringBuilder.AppendLine(@"						Start-Process -Wait -WindowStyle $CurrentSetup.WindowStyle -Passthru `");
            loStringBuilder.AppendLine(@"							-FilePath ""$Command"" -ArgumentList ""$Parameters"" `");
            loStringBuilder.AppendLine(@"					).ExitCode");
            loStringBuilder.AppendLine(@"				} else {");
            loStringBuilder.AppendLine(@"					$CurrentExitCode = ( `");
            loStringBuilder.AppendLine(@"						Start-Process -Wait -WindowStyle $CurrentSetup.WindowStyle -Passthru `");
            loStringBuilder.AppendLine(@"							-FilePath ""$Command"" `");
            loStringBuilder.AppendLine(@"					).ExitCode");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			else {");
            loStringBuilder.AppendLine(@"				Invoke-Expression -Command `");
            loStringBuilder.AppendLine(@"					""$Command -ErrorAction SilentlyContinue -ErrorVariable CurrentExitMessage $Parameters""");
            loStringBuilder.AppendLine(@"				if ( $CurrentExitMessage ) { $CurrentExitCode = 1 }");
            loStringBuilder.AppendLine(@"				else { $CurrentExitCode = 0 }");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"	        ""Exit code of last command: "" + $CurrentExitCode");
            loStringBuilder.AppendLine(@"	        if ( $CurrentExitMessage ) { ""Error message of last command: $CurrentExitMessage"" }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.AcceptExitCodes -contains $CurrentExitCode ) {");
            loStringBuilder.AppendLine(@"				""This exit code ($CurrentExitCode) was expected so exit code 0 will be assumed.""");
            loStringBuilder.AppendLine(@"				$CurrentExitCode = 0");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Type -eq 'directexe' ) {");
            loStringBuilder.AppendLine(@"				""This exit code ($CurrentExitCode) was expected so exit code 0 will be assumed.""");
            loStringBuilder.AppendLine(@"				$CurrentExitCode = 0");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			switch ($CurrentExitCode) {");
            loStringBuilder.AppendLine(@"				""0"" {");
            loStringBuilder.AppendLine(@"					""Last command was successful.""");
            loStringBuilder.AppendLine(@"					break");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				""1604"" {");
            loStringBuilder.AppendLine(@"					""Last command reported its already installed. This will be ignored.""");
            loStringBuilder.AppendLine(@"					break");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				""3010"" {");
            loStringBuilder.AppendLine(@"					""Last command requested a system reboot.""");
            loStringBuilder.AppendLine(@"					""This will be signalized at end of package setup with exit code 3010.""");
            loStringBuilder.AppendLine(@"					$global:Package[""Reboot""] = $true");
            loStringBuilder.AppendLine(@"					break");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				default {");
            loStringBuilder.AppendLine(@"					$global:errormessage = ""Last command exited with an error! Package setup will will canceled!""");
            loStringBuilder.AppendLine(@"					$global:returncode = $CurrentExitCode");
            loStringBuilder.AppendLine(@"					break installloop");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""reg"" ) {");
            loStringBuilder.AppendLine(@"			""Registry: set value `""${Path}\${Value}=${Data}`"" (${ValueType})""");
            loStringBuilder.AppendLine(@"			Set-RegistryValue -Path ""$Path"" -Value ""$Value"" -Data ""$Data"" -Type $ValueType");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		# setup ARP");
            loStringBuilder.AppendLine(@"		if ( $CurrentSetup.ARPID ) {");
            loStringBuilder.AppendLine(@"			""ARP: set `""$CurrentSetup.ARPID`""""");
            loStringBuilder.AppendLine(@"			if ( $OS[""Architecture""] -eq 'x64' `");
            loStringBuilder.AppendLine(@"					-and $OS[""ArchitectureEnvironment""] -eq 'x64' `");
            loStringBuilder.AppendLine(@"					-and $CurrentSetup.ARPWow6432Node -eq $true ) {");
            loStringBuilder.AppendLine(@"				$ARPRegPath = $OS[""HKLMSoftware32""]");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			else { $ARPRegPath = $OS[""HKLMSoftware_Current""] }");
            loStringBuilder.AppendLine(@"			$ARPRegPath += ""\Microsoft\Windows\CurrentVersion\Uninstall\"" + $CurrentSetup.ARPID");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.UninstallString ) {");
            loStringBuilder.AppendLine(@"				Set-RegistryValue `");
            loStringBuilder.AppendLine(@"					-Path ""$ARPRegPath"" -Value ""UninstallString"" `");
            loStringBuilder.AppendLine(@"					-Data $CurrentSetup.UninstallString -Type ExpandString");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			elseif ( -not (Get-RegistryValue -path ""$ARPRegPath"" -value ""UninstallString"") ) {");
            loStringBuilder.AppendLine(@"				Set-RegistryValue `");
            loStringBuilder.AppendLine(@"					-Path ""$ARPRegPath"" -Value ""UninstallString"" `");
            loStringBuilder.AppendLine(@"					-Data	""msg * `""A uninstallation via this function is not intended."" + `");
            loStringBuilder.AppendLine(@"							""Ask your servicedesk or administrator how to do this.`"""" `");
            loStringBuilder.AppendLine(@"					-Type ExpandString");
            loStringBuilder.AppendLine(@"				$CurrentSetup.ARPNoRemove = $true");
            loStringBuilder.AppendLine(@"				$CurrentSetup.ARPNoModify = $true");
            loStringBuilder.AppendLine(@"				$CurrentSetup.ARPNoRepair = $true");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPName )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""DisplayName"" -Data $CurrentSetup.ARPName }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPName )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""DisplayName"" -Data $CurrentSetup.ARPName }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPVersion )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""DisplayVersion"" -Data $CurrentSetup.ARPVersion }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPIcon )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""DisplayIcon"" -Data $CurrentSetup.ARPIcon }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPContact )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""Contact"" -Data $CurrentSetup.ARPContact }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPComments )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""Comments"" -Data $CurrentSetup.ARPComments }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPHelpLink ) {");
            loStringBuilder.AppendLine(@"				Set-RegistryValue -Path ""$ARPRegPath"" -Value ""HelpLink"" -Data $CurrentSetup.ARPHelpLink -Type ExpandString");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPHelpTelephone )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""HelpTelephone"" -Data $CurrentSetup.ARPHelpTelephone }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPNoModify -eq $true )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""NoModify"" -Data 0x1 -Type DWord }");
            loStringBuilder.AppendLine(@"			else { Set-RegistryValue -Path ""$ARPRegPath"" -Value ""NoModify"" -Data 0x0 -Type DWord }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPNoRemove -eq $true )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""NoRemove"" -Data 0x1 -Type DWord }");
            loStringBuilder.AppendLine(@"			else { Set-RegistryValue -Path ""$ARPRegPath"" -Value ""NoRemove"" -Data 0x0 -Type DWord }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPNoRepair -eq $true )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""NoRepair"" -Data 0x1 -Type DWord }");
            loStringBuilder.AppendLine(@"			else { Set-RegistryValue -Path ""$ARPRegPath"" -Value ""NoRepair"" -Data 0x0 -Type DWord }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.ARPSystemComponent -eq $true )");
            loStringBuilder.AppendLine(@"				{ Set-RegistryValue -Path ""$ARPRegPath"" -Value ""SystemComponent"" -Data 0x1 -Type DWord }");
            loStringBuilder.AppendLine(@"			else { Set-RegistryValue -Path ""$ARPRegPath"" -Value ""SystemComponent"" -Data 0x0 -Type DWord }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.RemoveARPURLUpdateInfo -eq $true ) {");
            loStringBuilder.AppendLine(@"				Remove-RegistryValue -Path ""$ARPRegPath"" -Value ""URLUpdateInfo""");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		} # end of setup ARP");
            loStringBuilder.AppendLine(@"	} # end of :installloop");
            loStringBuilder.AppendLine(@"	""""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Run-Uninstall {");
            loStringBuilder.AppendLine(@"	title ""Uninstallation""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"	[array]::Reverse($Setup)");
            loStringBuilder.AppendLine(@"	:removeloop foreach ($CurrentSetup in $Setup) {");
            loStringBuilder.AppendLine(@"		foreach ( $v in $SetupLoopVariables ) { Remove-Variable $v -ErrorAction SilentlyContinue }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		if ( $CurrentSetup.Architecture ) { if ( $CurrentSetup.Architecture -ne $OS[""Architecture""] ) { continue removeloop } }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		# prepare setup");
            loStringBuilder.AppendLine(@"		if ( $CurrentSetup.Type.ToLower() -eq ""msi"" ) {");
            loStringBuilder.AppendLine(@"			# MSI setup");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.GUID ) { continue }");
            loStringBuilder.AppendLine(@"			$Command = $CommonDirs[""System32_Current""] + ""\msiexec.exe""");
            loStringBuilder.AppendLine(@"			$GUID = ""`"""" + $CurrentSetup.GUID + ""`""""");
            loStringBuilder.AppendLine(@"			$Parameters = @(""/uninstall"", $GUID, [String]$OS[""MSIExecDefaultParameters""])");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.MSILogfile ) {");
            loStringBuilder.AppendLine(@"				# for compatibility");
            loStringBuilder.AppendLine(@"				$CurrentSetup.LogFile = $CurrentSetup.MSILogfile");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.LogFile ) {");
            loStringBuilder.AppendLine(@"				$Parameters += ""/l*v "" + ""`"""" + $CurrentSetup.LogFile + ""`""""");
            loStringBuilder.AppendLine(@"				if ( -not (Test-Path (split-path -parent $CurrentSetup.LogFile)) ) {");
            loStringBuilder.AppendLine(@"					New-Item -Path (split-path -parent $CurrentSetup.LogFile) -type directory -force | Out-Null");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Properties ) {");
            loStringBuilder.AppendLine(@"				$Parameters += $CurrentSetup.Properties");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Features ) {");
            loStringBuilder.AppendLine(@"				$OFSbak = $OFS");
            loStringBuilder.AppendLine(@"				$OFS = "",""");
            loStringBuilder.AppendLine(@"				$Parameters += ""REMOVE="" + $CurrentSetup.Features");
            loStringBuilder.AppendLine(@"				$OFS = $OFSbak");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			else {");
            loStringBuilder.AppendLine(@"				$Parameters += ""REMOVE=ALL""");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""msp"" ) { continue }");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""msu"" ) {");
            loStringBuilder.AppendLine(@"			# MSU update");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Name ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Path ) { $CurrentSetup.Path = $SourcePath; }");
            loStringBuilder.AppendLine(@"			$Command = $CommonDirs[""System32_Current""] + ""\wusa.exe""");
            loStringBuilder.AppendLine(@"			$MSU = ""`"""" + $CurrentSetup.Path + ""\"" + $CurrentSetup.Name + ""`""""");
            loStringBuilder.AppendLine(@"			$Parameters = @(""/uninstall"", $MSU, ""/quiet"", ""/norestart"")");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.LogFile ) {");
            loStringBuilder.AppendLine(@"				$Parameters += ""/log:"" + ""`"""" + $CurrentSetup.LogFile + ""`""""");
            loStringBuilder.AppendLine(@"				if ( -not (Test-Path (split-path -parent $CurrentSetup.LogFile)) ) {");
            loStringBuilder.AppendLine(@"					New-Item -Path (split-path -parent $CurrentSetup.LogFile) -type directory -force | Out-Null");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""ps"" ) {");
            loStringBuilder.AppendLine(@"			# PS command");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.UninstallName ) { continue }");
            loStringBuilder.AppendLine(@"			$Command = $CurrentSetup.UninstallName");
            loStringBuilder.AppendLine(@"			$Parameters = $CurrentSetup.UninstallParameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""exe"" ) {");
            loStringBuilder.AppendLine(@"			# executable setup");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.UninstallName ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.UninstallPath ) { $CurrentSetup.UninstallPath = $SourcePath; }");
            loStringBuilder.AppendLine(@"			$Command = $CurrentSetup.UninstallPath + ""\"" + $CurrentSetup.UninstallName");
            loStringBuilder.AppendLine(@"			$Parameters = $CurrentSetup.UninstallParameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""directexe"" ) {");
            loStringBuilder.AppendLine(@"			# executable setup");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.UninstallName ) { continue }");
            loStringBuilder.AppendLine(@"			$Command = $CurrentSetup.UninstallName");
            loStringBuilder.AppendLine(@"			$Parameters = $CurrentSetup.UninstallParameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""reg"" ) {");
            loStringBuilder.AppendLine(@"			# registry setting");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Path ) { continue }");
            loStringBuilder.AppendLine(@"			if ( ! $CurrentSetup.Value ) { continue }");
            loStringBuilder.AppendLine(@"			$Path = $CurrentSetup.Path");
            loStringBuilder.AppendLine(@"			$Value = $CurrentSetup.Value");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		if ( -not $CurrentSetup.WindowStyle ) { $CurrentSetup.WindowStyle = ""Normal"" }");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		# run setup");
            loStringBuilder.AppendLine(@"		if ( $Command ) {");
            loStringBuilder.AppendLine(@"			$CurrentExitCode = ""1860""");
            loStringBuilder.AppendLine(@"			""Command: $Command $Parameters""");
            loStringBuilder.AppendLine(@"	        if ( $CurrentSetup.Type.ToLower() -ne ""ps"") {");
            loStringBuilder.AppendLine(@"				if ($Parameters) {");
            loStringBuilder.AppendLine(@"		        	$CurrentExitCode = ( `");
            loStringBuilder.AppendLine(@"						Start-Process -Wait -WindowStyle $CurrentSetup.WindowStyle -Passthru `");
            loStringBuilder.AppendLine(@"							-FilePath ""$Command"" -ArgumentList ""$Parameters"" `");
            loStringBuilder.AppendLine(@"					).ExitCode");
            loStringBuilder.AppendLine(@"				} else {");
            loStringBuilder.AppendLine(@"					$CurrentExitCode = ( `");
            loStringBuilder.AppendLine(@"						Start-Process -Wait -WindowStyle $CurrentSetup.WindowStyle -Passthru `");
            loStringBuilder.AppendLine(@"							-FilePath ""$Command"" `");
            loStringBuilder.AppendLine(@"						).ExitCode");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			else {");
            loStringBuilder.AppendLine(@"				Invoke-Expression `");
            loStringBuilder.AppendLine(@"					-Command ""$Command -ErrorAction SilentlyContinue -ErrorVariable CurrentExitMessage $Parameters""");
            loStringBuilder.AppendLine(@"				if ( $CurrentExitMessage ) { $CurrentExitCode = 1 }");
            loStringBuilder.AppendLine(@"				else { $CurrentExitCode = 0 }");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"	        ""Exit code of last command: "" + $CurrentExitCode");
            loStringBuilder.AppendLine(@"	        if ( $CurrentExitMessage ) { ""Error message of last command: $CurrentExitMessage"" }");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.UninstallAcceptExitCodes -contains $CurrentExitCode ) {");
            loStringBuilder.AppendLine(@"				""This exit code ($CurrentExitCode) was expected so exit code 0 will be assumed.""");
            loStringBuilder.AppendLine(@"				$CurrentExitCode = 0");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			if ( $CurrentSetup.Type.ToLower() -eq 'directexe' ) {");
            loStringBuilder.AppendLine(@"				""This exit code ($CurrentExitCode) was expected so exit code 0 will be assumed.""");
            loStringBuilder.AppendLine(@"				$CurrentExitCode = 0");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"	        switch ($CurrentExitCode) {");
            loStringBuilder.AppendLine(@"				""0"" {");
            loStringBuilder.AppendLine(@"					""Last command was successful.""");
            loStringBuilder.AppendLine(@"					break");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				""1605"" {");
            loStringBuilder.AppendLine(@"					""Last command reported its NOT installed. This will be ignored.""");
            loStringBuilder.AppendLine(@"					break");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				""3010"" {");
            loStringBuilder.AppendLine(@"					""Last command requested a system reboot.""");
            loStringBuilder.AppendLine(@"					""This will be signalized at end of package setup with exit code 3010.""");
            loStringBuilder.AppendLine(@"					$global:Package[""Reboot""] = $true");
            loStringBuilder.AppendLine(@"					break");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"				default {");
            loStringBuilder.AppendLine(@"					$global:errormessage = ""Last command exited with an error! Package setup will will canceled!""");
            loStringBuilder.AppendLine(@"					$global:returncode = $CurrentExitCode");
            loStringBuilder.AppendLine(@"					break removeloop");
            loStringBuilder.AppendLine(@"				}");
            loStringBuilder.AppendLine(@"	        }");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		elseif ( $CurrentSetup.Type.ToLower() -eq ""reg"" ) {");
            loStringBuilder.AppendLine(@"			""Registry: remove value `""${Path}\${Value}`""""");
            loStringBuilder.AppendLine(@"			Remove-RegistryValue -Path ""$Path"" -Value ""$Value""");
            loStringBuilder.AppendLine(@"			if ( -not (get-itemproperty ""$Path"" -ErrorAction SilentlyContinue) `");
            loStringBuilder.AppendLine(@"					-and -not (get-childitem ""$Path"" -ErrorAction SilentlyContinue)) {");
            loStringBuilder.AppendLine(@"				""Registry: remove Path `""$Path`""""");
            loStringBuilder.AppendLine(@"				Remove-Item ""$Path"" -ErrorAction SilentlyContinue | Out-Null");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"		# remove ARP");
            loStringBuilder.AppendLine(@"        if ( $CurrentSetup.ARPID -and $CurrentSetup.UninstallARP -eq $true ) {");
            loStringBuilder.AppendLine(@"			""ARP: remove `""$CurrentSetup.ARPID`""""");
            loStringBuilder.AppendLine(@"			if ( $OS[""Architecture""] -eq 'x64' `");
            loStringBuilder.AppendLine(@"					-and $OS[""ArchitectureEnvironment""] -eq 'x64' `");
            loStringBuilder.AppendLine(@"					-and $CurrentSetup.ARPWow6432Node -eq $true ) {");
            loStringBuilder.AppendLine(@"				$ARPRegPath = $OS[""HKLMSoftware32""]");
            loStringBuilder.AppendLine(@"			}");
            loStringBuilder.AppendLine(@"			else { $ARPRegPath = $OS[""HKLMSoftware_Current""] }");
            loStringBuilder.AppendLine(@"			$ARPRegPath += ""\Microsoft\Windows\CurrentVersion\Uninstall\"" + $CurrentSetup.ARPID");
            loStringBuilder.AppendLine(@"			Remove-Item ""$ARPRegPath"" -recurse -force -ErrorAction SilentlyContinue");
            loStringBuilder.AppendLine(@"        } # end of remove ARP");
            loStringBuilder.AppendLine(@"	} # end of :removeloop");
            loStringBuilder.AppendLine(@"	""""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Write-Configuration {");
            loStringBuilder.AppendLine(@"	title ""Configuration""");
            loStringBuilder.AppendLine(@"	""===== Global variables and constants =====""; """"");
            loStringBuilder.AppendLine(@"	""Action = $Action""");
            loStringBuilder.AppendLine(@"	""ConfirmPreference = $ConfirmPreference""");
            loStringBuilder.AppendLine(@"	""ErrorActionPreference = $ErrorActionPreference""");
            loStringBuilder.AppendLine(@"	""LogFile = $LogFile""");
            loStringBuilder.AppendLine(@"	""Parameters = "" + [String]$Parameters");
            loStringBuilder.AppendLine(@"	""SourcePath = $SourcePath""");
            loStringBuilder.AppendLine(@"	""ScriptName = $ScriptName""");
            loStringBuilder.AppendLine(@"	""VERSION (of script) = $VERSION""");
            loStringBuilder.AppendLine(@"	""""");
            loStringBuilder.AppendLine(@"	""===== Hash `$Package ====="";");
            loStringBuilder.AppendLine(@"	$Package.GetEnumerator() | sort name | Format-Table;");
            loStringBuilder.AppendLine(@"	""===== Hash `$Organization ====="";");
            loStringBuilder.AppendLine(@"	$Organization.GetEnumerator() | sort name | Format-Table;");
            loStringBuilder.AppendLine(@"	""===== Hash `$OS ====="";");
            loStringBuilder.AppendLine(@"	$OS.GetEnumerator() | sort name | Format-Table;");
            loStringBuilder.AppendLine(@"	""===== Hash `$CommonDirs ====="";");
            loStringBuilder.AppendLine(@"	$CommonDirs.GetEnumerator() | sort name | Format-Table;");
            loStringBuilder.AppendLine(@"	""===== Hash `$Setup ====="";");
            loStringBuilder.AppendLine(@"	foreach ($CurrentSetup in $Setup) {");
            loStringBuilder.AppendLine(@"		$CurrentSetup.GetEnumerator() | sort name | Format-Table;");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Write-Help {");
            loStringBuilder.AppendLine(@"	title ""Usage""");
            loStringBuilder.AppendLine(@"	""$ScriptName { install | remove | check | reinstall* | repair* } [-f]* [-l LogFile]*""");
            loStringBuilder.AppendLine(@"	""$ScriptName { info | summary* | help }""");
            loStringBuilder.AppendLine(@"	""$ScriptName exportxml Output-Filename""");
            loStringBuilder.AppendLine(@"	""(* not implemented yet)""");
            loStringBuilder.AppendLine(@"	""""");
            loStringBuilder.AppendLine(@"	""check:     Test if deployment was successful.""");
            loStringBuilder.AppendLine(@"	""           Resulting exit code will be the count of failed setup""");
            loStringBuilder.AppendLine(@"	""           actions. If exit code is 1024 a script error occurred.""");
            loStringBuilder.AppendLine(@"	""exportxml: Exports package configuration to an XML file.""");
            loStringBuilder.AppendLine(@"	""help:      Shows this help.""");
            loStringBuilder.AppendLine(@"	""info:      Shows package informations and script configuration.""");
            loStringBuilder.AppendLine(@"	""install:   Installs this package to the system.""");
            loStringBuilder.AppendLine(@"	""remove:    Removes this package from the system.""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Write-DeploymentResultMessages {");
            loStringBuilder.AppendLine(@"	if ($global:returncode -eq 0) {");
            loStringBuilder.AppendLine(@"		""RESULT: Deployment of `"""" + [String]$Package[""Vendor"",""Product"",""Version"",""Architecture""] + ""`"" was successful.""");
            loStringBuilder.AppendLine(@"		if ($global:Package[""Reboot""] -eq $true) {");
            loStringBuilder.AppendLine(@"			""But a restart of the system is neccessary to complete installation!""");
            loStringBuilder.AppendLine(@"			$global:returncode = 3010");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	else {");
            loStringBuilder.AppendLine(@"		""RESULT: Deployment of `"""" + [String]$Package[""Vendor"",""Product"",""Version"",""Architecture""] + ""`"" was NOT successful!""");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"function Write-XML {");
            loStringBuilder.AppendLine(@"	param (");
            loStringBuilder.AppendLine(@"		[Parameter(Mandatory=$true)][String]$Path");
            loStringBuilder.AppendLine(@"	)");
            loStringBuilder.AppendLine(@"	title ""Export XML""");
            loStringBuilder.AppendLine(@"	if ( ! $Path ) {");
            loStringBuilder.AppendLine(@"		$global:errormessage = ""Missing file argument for XML output!""");
            loStringBuilder.AppendLine(@"		$global:returncode = 1");
            loStringBuilder.AppendLine(@"		return");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	Export-Clixml -Path $Path -InputObject @{");
            loStringBuilder.AppendLine(@"		Package = $global:Package;");
            loStringBuilder.AppendLine(@"		Organization = $global:Organization;");
            loStringBuilder.AppendLine(@"		OS = @{");
            loStringBuilder.AppendLine(@"			LogFile = $global:OS[""LogFile""];");
            loStringBuilder.AppendLine(@"			MSIExecDefaultParameters = $global:OS[""MSIExecDefaultParameters""];");
            loStringBuilder.AppendLine(@"		};");
            loStringBuilder.AppendLine(@"		Setup = $global:Setup;");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	""Package configuration exported to '"" + (Resolve-Path -Path $Path).Path + ""'.""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * main:");
            loStringBuilder.AppendLine(@"hr");
            loStringBuilder.AppendLine(@"$Organization[""Name""] + "" - Deployment Setup Script - Version ${VERSION}""");
            loStringBuilder.AppendLine(@"""Unattended Setup of `"""" + [String]$Package[""Vendor"",""Product"",""Version"",""Architecture""] + ""`""""");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"$global:returncode = 0");
            loStringBuilder.AppendLine(@"$Action, $Parameters = $args;");
            loStringBuilder.AppendLine(@"if ( -not $Action) { $Action = 'none' }");
            loStringBuilder.AppendLine(@"Set-Location ""$SourcePath""");
            loStringBuilder.AppendLine(@"Get-SetupJobs");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"switch -regex ($Action.ToLower()) {");
            loStringBuilder.AppendLine(@"	""^install$""				{ Run-Install; Write-DeploymentResultMessages }");
            loStringBuilder.AppendLine(@"	""^(remove|uninstall)$""	{ Run-Uninstall; Write-DeploymentResultMessages }");
            loStringBuilder.AppendLine(@"	""^check$""				{ Run-Check; Write-DeploymentResultMessages }");
            loStringBuilder.AppendLine(@"	""^reinstall$""			{ niy }");
            loStringBuilder.AppendLine(@"	""^repair$""				{ niy }");
            loStringBuilder.AppendLine(@"	""^info$""				{ Write-Configuration }");
            loStringBuilder.AppendLine(@"	""^summary$""				{ niy }");
            loStringBuilder.AppendLine(@"	""^(help|--help|-help|-h|-\?|\/\?|\?)$""	{ Write-Help }");
            loStringBuilder.AppendLine(@"	""^exportxml$"" {");
            loStringBuilder.AppendLine(@"		if ( $Parameters -and ($Parameters.GetType().Name -eq ""String"") ) {");
            loStringBuilder.AppendLine(@"			Write-XML -Path $Parameters");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"		else {");
            loStringBuilder.AppendLine(@"			$global:errormessage = ""Missing or wrong file argument for XML output!""");
            loStringBuilder.AppendLine(@"			$global:returncode = 1");
            loStringBuilder.AppendLine(@"		}");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"	default	{");
            loStringBuilder.AppendLine(@"		Write-Help");
            loStringBuilder.AppendLine(@"		$global:errormessage = ""Missing or wrong arguments! See documentation and usage above.""");
            loStringBuilder.AppendLine(@"		$global:returncode = 1");
            loStringBuilder.AppendLine(@"	}");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# * closing:");
            loStringBuilder.AppendLine(@"title ""End""");
            loStringBuilder.AppendLine(@"if ($global:returncode -ne 0) {");
            loStringBuilder.AppendLine(@"	if ($global:errormessage) { ""ERROR: "" + $global:errormessage }");
            loStringBuilder.AppendLine(@"	elseif (-not $Action.ToLower() -eq ""check"") { ""An error occurred!"" }");
            loStringBuilder.AppendLine(@"	""Exit code: $global:returncode""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"""""");
            loStringBuilder.AppendLine(@"if ( $LogFile ) { Stop-Transcript }");
            loStringBuilder.AppendLine(@"exit $global:returncode");
            loStringBuilder.AppendLine(@"# **************************************************************************************************");
            loStringBuilder.AppendLine(@"# END");
            loStringBuilder.AppendLine(@"");


            string lsReturn = loStringBuilder.ToString();
            lsReturn = ConvertWindowsVariablesToPowershell(lsReturn);


            return lsReturn;
        }

        public static void GetMyAppDeploymentScript(ref StringBuilder loStringBuilder, ref DataTable loTable, string lsTableType, string lsUninstallKey, string lsShopProcess)
        {

            DataRow[] loRows;
            loRows = loTable.Select("", "order asc");


            string lsLastCommand = "";
            string lsLastProductCode = "";

            foreach (DataRow loRow in loRows)
            {
                string lsInherit = "";
                for (int i = 1; i < Convert.ToInt32(loRow["level"].ToString()); i++)
                {
                    lsInherit = lsInherit + "  ";
                }


                switch (loRow["actiontype"].ToString().ToLower())
                {

                    case "launchprocess":
                    case "launchprocessnowait":
                        {
                            string lsEXE = loRow["command"].ToString();
                            switch (lsEXE.ToLower())
                            {
                                case "taskkill":
                                    break;
                                case "checkupdate.vbs":
                                    break;
                                case "cmd.exe":
                                case "cmd":
                                    {
                                        string lsRealExe = "";
                                        try
                                        {
                                            lsRealExe = System.IO.Path.GetFileName(lsEXE);
                                        }
                                        catch { }
                                        //switch (lsTableType)
                                        //{
                                        //    case "uninstall":
                                        //        //loStringBuilder.AppendLine(@"# direct uninstall");
                                        //        ////loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                        //        //loStringBuilder.AppendLine(@"$Setup += @{");
                                        //        //loStringBuilder.AppendLine(@"	Type = ""directexe"";");
                                        //        //loStringBuilder.AppendLine(@"	UninstallName = """ + lsRealExe + @""";");
                                        //        //loStringBuilder.AppendLine(@"	UninstallParameters = @(");
                                        //        //loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                        //        //loStringBuilder.AppendLine(@"}");
                                        //        break;
                                        //    default:
                                        //        //loStringBuilder.AppendLine(@"# direct install");
                                        //        ////loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                        //        //loStringBuilder.AppendLine(@"$Setup += @{");
                                        //        //loStringBuilder.AppendLine(@"	Type = ""directexe"";");
                                        //        //loStringBuilder.AppendLine(@"	Name = """ + lsRealExe + @""";");
                                        //        //loStringBuilder.AppendLine(@"	Parameters = @(");
                                        //        //loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                        //        //loStringBuilder.AppendLine(@"}");
                                        //        break;
                                        //}

                                    }
                                    break;

                                //    case "powershell":
                                //        //switch (lsTableType)
                                //        //{
                                //        //    case "uninstall":
                                //        //        //loStringBuilder.AppendLine(@"# App-V deinstallieren");
                                //        //        ////loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                //        //        //loStringBuilder.AppendLine(@"$Setup += @{");
                                //        //        //loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                //        //        //loStringBuilder.AppendLine(@"	UninstallName = """ + "uninstallappv.cmd" + @""";");
                                //        //        //loStringBuilder.AppendLine(@"}");
                                //        //        break;
                                //        //    default:
                                //        //        //loStringBuilder.AppendLine(@"# App-V installieren");
                                //        //        ////loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                //        //        //loStringBuilder.AppendLine(@"$Setup += @{");
                                //        //        //loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                //        //        //loStringBuilder.AppendLine(@"	Name = """ + "installappv.cmd" + @""";");
                                //        //        //loStringBuilder.AppendLine(@"}");
                                //        //        break;
                                //        //}
                                //        break;
                                default:
                                    if (lsEXE != lsLastCommand)
                                    {
                                        loStringBuilder.AppendLine(@"	<Description>Running " + lsEXE + @"</Description>");
                                        if (loRow["actiontype"].ToString().ToLower() == "launchprocessnowait")
                                        {
                                            loStringBuilder.AppendLine(@"	<Execution>Execute-Process -Path '" + lsEXE + @"' -Parameters '" + loRow["param"].ToString().Replace(@"""", @"""""") + @"' -NoWait -ContinueOnError");
                                        }
                                        else
                                        {
                                            loStringBuilder.AppendLine(@"	<Execution>Execute-Process -Path '" + lsEXE + @"' -Parameters '" + loRow["param"].ToString().Replace(@"""", @"""""") + @"' -ContinueOnError");
                                        }
                                    }
                                    lsLastCommand = lsEXE;
                                    break;
                                    //        switch (lsTableType)
                                    //        {
                                    //            //case "uninstall":
                                    //            //    {
                                    //            //        string lsRealExe = "";
                                    //            //        try
                                    //            //        {
                                    //            //            lsRealExe = System.IO.Path.GetFileName(lsEXE);
                                    //            //        }
                                    //            //        catch { }
                                    //            //        string lsRealpath = "";
                                    //            //        try
                                    //            //        {
                                    //            //            lsRealpath = System.IO.Path.GetDirectoryName(lsEXE);
                                    //            //        }
                                    //            //        catch { }


                                    //            //        loStringBuilder.AppendLine(@"# Software deinstallieren");

                                    //            //        loStringBuilder.AppendLine(@"if (Test-Path (""" + lsEXE + @""")) {");
                                    //            //        loStringBuilder.AppendLine(@"$Setup += @{");
                                    //            //        loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                    //            //        loStringBuilder.AppendLine(@"	UninstallName = """ + lsRealExe + @""";");
                                    //            //        loStringBuilder.AppendLine(@"	UninstallPath = """ + lsRealpath + @""";");
                                    //            //        loStringBuilder.AppendLine(@"	UninstallParameters = @(");
                                    //            //        loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                    //            //        loStringBuilder.AppendLine(@"}");
                                    //            //        loStringBuilder.AppendLine(@"}");
                                    //            //    }
                                    //            //    break;
                                    //            default:


                                    //                ////fix for flash

                                    //                //writeToLogFile("chkecking if lslastcommand: " + lsEXE + " -> " + lsLastCommand);
                                    //                //if (lsEXE != lsLastCommand)
                                    //                //{
                                    //                //    loStringBuilder.AppendLine(@"# Software installieren");
                                    //                //    //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                    //                //    loStringBuilder.AppendLine(@"$Setup += @{");
                                    //                //    loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                    //                //    loStringBuilder.AppendLine(@"	Name = """ + lsEXE + @""";");
                                    //                //    loStringBuilder.AppendLine(@"	Parameters = @(");
                                    //                //    loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                    //                //    loStringBuilder.AppendLine(@"}");
                                    //                //}
                                    //                //lsLastCommand = lsEXE;

                                    //                break;

                                    //        }
                                    //        break;
                            }
                            lsLastCommand = loRow["command"].ToString();
                            writeToLogFile("settings lastcommand to: " + lsLastCommand);
                            break;


                        }


                    case "msiexec":
                        {
                            if (lsTableType == "install")
                            {
                                string lsMSI = "";
                                string lsMST = "";
                                string lsMSP = "";
                                string lsParameters = "";
                                string lsProductCode = "";
                                bool lbIsInstallation = true;

                                try
                                {
                                    foreach (string lsArgument in CommandLineToArgs(loRow["param"].ToString()))
                                    {
                                        bool lbDoneSomething = false;

                                        if (lsArgument.ToLower().StartsWith("/x"))
                                        {
                                            lbIsInstallation = false;
                                        }


                                        if (lsArgument.ToLower().Contains(".msi"))
                                        {
                                            lsMSI = lsArgument;
                                            lbDoneSomething = true;
                                        }
                                        if (lsArgument.ToLower().Contains(".msp"))
                                        {
                                            lsMSP = lsArgument;
                                            lbDoneSomething = true;
                                        }

                                        if (lsArgument.Contains("{") && lsArgument.Contains("}"))
                                        {
                                            lsProductCode = lsArgument;
                                            try
                                            {
                                                if (!lsProductCode.StartsWith("{"))
                                                {
                                                    lsProductCode = lsProductCode.Substring(lsProductCode.IndexOf("{"));
                                                }
                                            }
                                            catch { }
                                            try
                                            {
                                                if (!lsProductCode.EndsWith("}"))
                                                {
                                                    lsProductCode = lsProductCode.Substring(0, lsProductCode.IndexOf("}") + 1);
                                                }
                                            }
                                            catch { }
                                            lbDoneSomething = true;
                                        }

                                        if (lsArgument.ToLower().Contains(".mst"))
                                        {
                                            lsMST = lsArgument;
                                            lsMST = lsMST.Replace("TRANSFORMS=", "");
                                            lsMST = lsMST.Replace("TRANSFORMS =", "");
                                            lsMST = lsMST.Replace(@"""", "");
                                            lbDoneSomething = true;
                                        }
                                        if (!lbDoneSomething)
                                        {
                                            if (lsArgument.Contains("="))
                                            {
                                                bool lbArgumentIsValid = true;
                                                if (lsArgument.Contains("REBOOT"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.StartsWith("MSI"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.Contains("ALLUSERS"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.Contains("ROOTDRIVE"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.Trim().EndsWith("="))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lbArgumentIsValid)
                                                {
                                                    lsParameters += @", """ + lsArgument + @"""";
                                                }
                                            }
                                        }
                                    }
                                }
                                catch { }

                                if (lsParameters.StartsWith(@", "))
                                {
                                    lsParameters = lsParameters.Substring(2);
                                }

                                writeToLogFile("chkecking if lslastcommand: " + lsMSI + " -> " + lsLastCommand);

                                if (!lbIsInstallation)
                                {
                                    loStringBuilder.AppendLine(@"	<Description>Removing " + lsProductCode + @"</Description>");
                                    loStringBuilder.AppendLine(@"	<Execution>Execute-MSI -Action 'Uninstall' -Path '" + lsProductCode + "'</Execution>");
                                }
                                else
                                {
                                    if (lsMSI != lsLastCommand)
                                    {
                                        if (lsMSP != "")
                                        {


                                            loStringBuilder.AppendLine(@"	<Description>Patching " + lsMSI + @"</Description>");
                                            loStringBuilder.AppendLine(@"	<Execution>Execute-MSI -Action 'Patch' -Path '" + lsMSI + "' -Path '" + lsMSP + "'</Execution>");

                                        }
                                        else
                                        {
                                            if (lsLastProductCode == "" || lsLastProductCode != lsProductCode)
                                            {
                                                if (lsParameters != "")
                                                {
                                                    lsParameters = " " + lsParameters;
                                                }
                                                loStringBuilder.AppendLine(@"	<Description>Installing " + lsMSI + @"</Description>");
                                                if (lsMST != "")
                                                {
                                                    loStringBuilder.AppendLine(@"	<Execution>Execute-MSI -Action 'Install' -Path '" + lsMSI + "' -Transform '" + lsMST + "' -Parameters '/QN" + lsParameters + "'</Execution>");
                                                }
                                                else
                                                {
                                                    loStringBuilder.AppendLine(@"	<Execution>Execute-MSI -Action 'Install' -Path '" + lsMSI + "' -Parameters '/QN" + lsParameters + "'</Execution>");
                                                }

                                                //loStringBuilder.AppendLine(@"# Software installieren");
                                                ////loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                                //loStringBuilder.AppendLine(@"$Setup += @{");
                                                //loStringBuilder.AppendLine(@"	Type = ""msi"";");
                                                //loStringBuilder.AppendLine(@"	Name = """ + lsMSI + @""";");
                                                //if (lsMST != "")
                                                //{
                                                //    loStringBuilder.AppendLine(@"	Transforms = """ + lsMST + @""";");
                                                //}
                                                //if (lsParameters != "")
                                                //{
                                                //    loStringBuilder.AppendLine(@"	Properties = @(" + lsParameters + @");");
                                                //}
                                                //if (lsProductCode != "")
                                                //{
                                                //    lsLastProductCode = lsProductCode;
                                                //    loStringBuilder.AppendLine(@"	GUID = """ + lsProductCode + @""";");
                                                //}
                                                //else
                                                //{
                                                //    loStringBuilder.AppendLine(@"	GUID = """ + lsUninstallKey + @""";");
                                                //}
                                                //loStringBuilder.AppendLine(@"");
                                                //loStringBuilder.AppendLine(@"}");
                                            }
                                        }
                                    }
                                }
                                lsLastCommand = lsMSI;
                            }
                            break;
                        }

                    case "removefile":
                        {
                            loStringBuilder.AppendLine(@"	<Description>Removing file " + loRow["command"].ToString() + @"</Description>");
                            loStringBuilder.AppendLine(@"	<Execution>Remove-File -Path '" + loRow["command"].ToString() + "' -ContinueOnError</Execution>");
                        }
                        lsLastCommand = "";
                        break;

                    case "removeregkey":
                        {
                            string lsRoot = "HKEY_LOCAL_MACHINE";
                            string lsPath = loRow["command"].ToString();
                            string lsName = "";
                            try
                            {
                                lsPath = lsPath.Substring(lsPath.IndexOf(@"\") + 1);
                            }
                            catch { }
                            try
                            {
                                lsPath = lsPath.Substring(0, lsPath.IndexOf(Convert.ToChar("|")));
                            }
                            catch { }
                            try
                            {
                                lsPath = lsPath.Replace(@"WOW6432Node\", "");
                                lsPath = lsPath.Replace(@"Wow6432Node\", "");

                            }
                            catch { }
                            try
                            {
                                lsName = loRow["command"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCU"))
                            {
                                lsRoot = "HKEY_CURRENT_USER";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKU"))
                            {
                                lsRoot = "HKEY_USERS";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCR"))
                            {
                                lsRoot = "HKEY_CLASSES_ROOT";
                            }
                            if (lsRoot != "")
                            {
                                loStringBuilder.AppendLine(@"	<Description>Removing registry key</Description>");
                                string lsMyName = lsName;
                                if (lsMyName == "(default)" || lsMyName == "")
                                {
                                    loStringBuilder.AppendLine(@"	<Execution>Remove-RegistryKey -Key '" + lsRoot + @"\" + lsPath + "' -ContinueOnError</Execution>");
                                }
                                else
                                {
                                    loStringBuilder.AppendLine(@"	<Execution>Remove-RegistryKey -Key '" + lsRoot + @"\" + lsPath + "' -Name '" + lsName + "' -ContinueOnError</Execution>");
                                }
                            }
                        }
                        break;

                    case "copyfile":
                        {


                            loStringBuilder.AppendLine(@"# Dateien kopieren ");
                            loStringBuilder.AppendLine(@"    $Setup += @{ ");
                            loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                            loStringBuilder.AppendLine(@"            Name = ""Copy-Item""; ");
                            loStringBuilder.AppendLine(@"            Parameters = @( ");
                            loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                            loStringBuilder.AppendLine(@"                ""-Destination"", (""'" + loRow["param"].ToString() + @"'""), ");
                            loStringBuilder.AppendLine(@"                ""-Force"" ");
                            loStringBuilder.AppendLine(@"            ); ");
                            loStringBuilder.AppendLine(@"               AcceptExitCodes = @(1); ");
                            loStringBuilder.AppendLine(@"    } ");




                        }
                        lsLastCommand = "";
                        break;

                    case "copyfolder":
                        {

                            loStringBuilder.AppendLine(@"# Folder kopieren ");
                            loStringBuilder.AppendLine(@"    $Setup += @{ ");
                            loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                            loStringBuilder.AppendLine(@"            Name = ""Copy-Item""; ");
                            loStringBuilder.AppendLine(@"            Parameters = @( ");
                            loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                            loStringBuilder.AppendLine(@"                ""-Destination"", (""'" + loRow["param"].ToString() + @"'""), ");
                            loStringBuilder.AppendLine(@"                ""-Recurse"", ");
                            loStringBuilder.AppendLine(@"                ""-Force"" ");
                            loStringBuilder.AppendLine(@"            ); ");
                            loStringBuilder.AppendLine(@"               AcceptExitCodes = @(1); ");
                            loStringBuilder.AppendLine(@"    } ");


                        }
                        lsLastCommand = "";
                        break;

                    case "removefolder":
                        {
                            loStringBuilder.AppendLine(@"	<Description>Removing folder</Description>");
                            loStringBuilder.AppendLine(@"	<Execution>Remove-Folder -Path '" + loRow["command"].ToString() + "' -ContinueOnError</Execution>");
                        }
                        lsLastCommand = "";
                        break;

                    case "addregkey":
                        {
                            string lsRoot = "HKLM";
                            string lsPath = loRow["command"].ToString();
                            string lsName = "";
                            string lsRegType = "";
                            string lsValue = "";
                            try
                            {
                                lsPath = lsPath.Substring(lsPath.IndexOf(@"\") + 1);
                            }
                            catch { }
                            try
                            {
                                lsPath = lsPath.Substring(0, lsPath.IndexOf(Convert.ToChar("|")));
                            }
                            catch { }
                            try
                            {
                                lsName = loRow["command"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCU"))
                            {
                                lsRoot = "HKCU";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKU"))
                            {
                                lsRoot = "HKU";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCR"))
                            {
                                lsRoot = "HKCR";
                            }
                            try
                            {
                                lsValue = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            try
                            {
                                lsRegType = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                            }
                            catch { }
                            if (lsRegType != "")
                            {
                                loStringBuilder.AppendLine(@"	<Description>Adding registry key</Description>");
                                loStringBuilder.AppendLine(@"	<Execution>Set-RegistryKey -Key '" + lsRoot + @"\" + lsPath + "' -Name '" + lsName + "' -Value '" + lsValue + "' -Type '" + lsRegType + "' -ContinueOnError</Execution>");
                            }
                        }
                        lsLastCommand = "";
                        break;

                    case "addshortcut":
                        {
                            if (loRow["param"].ToString().Contains("|"))
                            {
                                string lsDestination = "";
                                string lsWorkDir = "";
                                string lsIconPath = "";
                                string lsIconIndex = "0";
                                string lsDescription = "";
                                try
                                {
                                    lsDestination = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                catch { }
                                try
                                {
                                    lsWorkDir = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                try
                                {
                                    lsIconPath = loRow["param"].ToString().Split(Convert.ToChar("|"))[2];
                                }
                                catch { }
                                try
                                {
                                    lsIconIndex = loRow["param"].ToString().Split(Convert.ToChar("|"))[3];
                                }
                                catch { }
                                try
                                {
                                    lsDescription = loRow["param"].ToString().Split(Convert.ToChar("|"))[4];
                                }
                                catch { }
                                string lsMyExe = "";
                                string lsMyPath = "";
                                try
                                {
                                    lsMyExe = System.IO.Path.GetFileName(loRow["command"].ToString());
                                }
                                catch { }
                                try
                                {
                                    lsMyPath = System.IO.Path.GetDirectoryName(loRow["command"].ToString());
                                }
                                catch { }
                                loStringBuilder.AppendLine(@"	<Description>Adding Shortcut</Description>");
                                loStringBuilder.AppendLine(@"	<Execution>New-Shortcut -Path '" + lsMyPath + @"\" + lsMyExe + ".lnk' -TargetPath '" + lsDestination + "' -ContinueOnError</Execution>");

                            }

                        }
                        lsLastCommand = "";
                        break;

                    case "expandfolder":
                        lsLastCommand = "";
                        break;

                    case "killprocess":
                        lsLastCommand = "";
                        if (lsShopProcess == "kill")
                        {
                            loStringBuilder.AppendLine(@"	<Description>Killing " + loRow["command"].ToString() + "</Description>");
                            loStringBuilder.AppendLine(@"	<Execution>Stop-ServiceAndDependencies -Name '" + loRow["command"].ToString() + "' -ContinueOnError</Execution>");
                        }
                        break;

                    case "checkarchitecture":
                        loStringBuilder.AppendLine("$os_type = (Get-WmiObject -Class Win32_ComputerSystem).SystemType -match '(x64)'");
                        switch (loRow["command"].ToString().ToLower())
                        {
                            case "x86":
                                loStringBuilder.AppendLine("if($os_type -eq $false) {");
                                break;
                            case "x64":
                                loStringBuilder.AppendLine("if($os_type -eq $true) {");
                                break;
                        }
                        lsLastCommand = "";
                        break;

                    case "checkregistry":
                        if (lsLastCommand != "checkregistry")
                        {
                            loStringBuilder.AppendLine("{");
                        }
                        lsLastCommand = "checkregistry";
                        break;

                    case "endcheck":
                        if (lsLastCommand != "endcheck")
                        {
                            //loStringBuilder.AppendLine("}");
                        }
                        lsLastCommand = "endcheck";
                        break;


                }
            }


        }


        public static void GetMyPowershellScript(ref StringBuilder loStringBuilder, ref DataTable loTable, string lsTableType, string lsUninstallKey)
        {

            DataRow[] loRows;
            if (lsTableType == "install")
            {
                loRows = loTable.Select("", "order asc");
            }
            else
            {
                loRows = loTable.Select("", "order desc");
            }

            string lsLastCommand = "";
            string lsLastProductCode = "";

            foreach (DataRow loRow in loRows)
            {
                string lsInherit = "";
                for (int i = 1; i < Convert.ToInt32(loRow["level"].ToString()); i++)
                {
                    lsInherit = lsInherit + "  ";
                }


                switch (loRow["actiontype"].ToString().ToLower())
                {

                    case "launchprocess":

                        {
                            string lsEXE = loRow["command"].ToString();
                            switch (lsEXE.ToLower())
                            {
                                case "taskkill":
                                    break;
                                case "checkupdate.vbs":
                                    break;
                                case "cmd.exe":
                                case "cmd":
                                    {
                                        string lsRealExe = "";
                                        try
                                        {
                                            lsRealExe = System.IO.Path.GetFileName(lsEXE);
                                        }
                                        catch { }
                                        switch (lsTableType)
                                        {
                                            case "uninstall":
                                                loStringBuilder.AppendLine(@"# direct uninstall");
                                                //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                                loStringBuilder.AppendLine(@"$Setup += @{");
                                                loStringBuilder.AppendLine(@"	Type = ""directexe"";");
                                                loStringBuilder.AppendLine(@"	UninstallName = """ + lsRealExe + @""";");
                                                loStringBuilder.AppendLine(@"	UninstallParameters = @(");
                                                loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                                loStringBuilder.AppendLine(@"}");
                                                break;
                                            default:
                                                loStringBuilder.AppendLine(@"# direct install");
                                                //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                                loStringBuilder.AppendLine(@"$Setup += @{");
                                                loStringBuilder.AppendLine(@"	Type = ""directexe"";");
                                                loStringBuilder.AppendLine(@"	Name = """ + lsRealExe + @""";");
                                                loStringBuilder.AppendLine(@"	Parameters = @(");
                                                loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                                loStringBuilder.AppendLine(@"}");
                                                break;
                                        }
                                    }
                                    break;

                                case "powershell":
                                    switch (lsTableType)
                                    {
                                        case "uninstall":
                                            loStringBuilder.AppendLine(@"# App-V deinstallieren");
                                            //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                            loStringBuilder.AppendLine(@"$Setup += @{");
                                            loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                            loStringBuilder.AppendLine(@"	UninstallName = """ + "uninstallappv.cmd" + @""";");
                                            loStringBuilder.AppendLine(@"}");
                                            break;
                                        default:
                                            loStringBuilder.AppendLine(@"# App-V installieren");
                                            //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                            loStringBuilder.AppendLine(@"$Setup += @{");
                                            loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                            loStringBuilder.AppendLine(@"	Name = """ + "installappv.cmd" + @""";");
                                            loStringBuilder.AppendLine(@"}");
                                            break;
                                    }
                                    break;
                                default:
                                    switch (lsTableType)
                                    {
                                        case "uninstall":
                                            {
                                                string lsRealExe = "";
                                                try
                                                {
                                                    lsRealExe = System.IO.Path.GetFileName(lsEXE);
                                                }
                                                catch { }
                                                string lsRealpath = "";
                                                try
                                                {
                                                    lsRealpath = System.IO.Path.GetDirectoryName(lsEXE);
                                                }
                                                catch { }


                                                loStringBuilder.AppendLine(@"# Software deinstallieren");

                                                loStringBuilder.AppendLine(@"if (Test-Path (""" + lsEXE + @""")) {");
                                                loStringBuilder.AppendLine(@"$Setup += @{");
                                                loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                                loStringBuilder.AppendLine(@"	UninstallName = """ + lsRealExe + @""";");
                                                loStringBuilder.AppendLine(@"	UninstallPath = """ + lsRealpath + @""";");
                                                loStringBuilder.AppendLine(@"	UninstallParameters = @(");
                                                loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                                loStringBuilder.AppendLine(@"}");
                                                loStringBuilder.AppendLine(@"}");
                                            }
                                            break;
                                        default:


                                            //fix for flash

                                            writeToLogFile("chkecking if lslastcommand: " + lsEXE + " -> " + lsLastCommand);
                                            if (lsEXE != lsLastCommand)
                                            {
                                                loStringBuilder.AppendLine(@"# Software installieren");
                                                //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                                loStringBuilder.AppendLine(@"$Setup += @{");
                                                loStringBuilder.AppendLine(@"	Type = ""exe"";");
                                                loStringBuilder.AppendLine(@"	Name = """ + lsEXE + @""";");
                                                loStringBuilder.AppendLine(@"	Parameters = @(");
                                                loStringBuilder.AppendLine(@"	""" + loRow["param"].ToString().Replace(@"""", @"""""") + @""");");
                                                loStringBuilder.AppendLine(@"}");
                                            }
                                            lsLastCommand = lsEXE;

                                            break;

                                    }
                                    break;
                            }
                            lsLastCommand = loRow["command"].ToString();
                            writeToLogFile("settings lastcommand to: " + lsLastCommand);
                            break;


                        }


                    case "msiexec":
                        {
                            if (lsTableType == "install")
                            {
                                string lsMSI = "";
                                string lsMST = "";
                                string lsMSP = "";
                                string lsParameters = "";
                                string lsProductCode = "";
                                try
                                {
                                    foreach (string lsArgument in CommandLineToArgs(loRow["param"].ToString()))
                                    {
                                        bool lbDoneSomething = false;



                                        if (lsArgument.ToLower().Contains(".msi"))
                                        {
                                            lsMSI = lsArgument;
                                            lbDoneSomething = true;
                                        }
                                        if (lsArgument.ToLower().Contains(".msp"))
                                        {
                                            lsMSP = lsArgument;
                                            lbDoneSomething = true;
                                        }

                                        if (lsArgument.Contains("{") && lsArgument.Contains("}"))
                                        {
                                            lsProductCode = lsArgument;
                                            try
                                            {
                                                if (!lsProductCode.StartsWith("{"))
                                                {
                                                    lsProductCode = lsProductCode.Substring(lsProductCode.IndexOf("{"));
                                                }
                                            }
                                            catch { }
                                            try
                                            {
                                                if (!lsProductCode.EndsWith("}"))
                                                {
                                                    lsProductCode = lsProductCode.Substring(0, lsProductCode.IndexOf("}") + 1);
                                                }
                                            }
                                            catch { }
                                            lbDoneSomething = true;
                                        }

                                        if (lsArgument.ToLower().Contains(".mst"))
                                        {
                                            lsMST = lsArgument;
                                            lsMST = lsMST.Replace("TRANSFORMS=", "");
                                            lsMST = lsMST.Replace("TRANSFORMS =", "");
                                            lsMST = lsMST.Replace(@"""", "");
                                            lbDoneSomething = true;
                                        }
                                        if (!lbDoneSomething)
                                        {
                                            if (lsArgument.Contains("="))
                                            {
                                                bool lbArgumentIsValid = true;
                                                if (lsArgument.Contains("REBOOT"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.StartsWith("MSI"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.Contains("ALLUSERS"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.Contains("ROOTDRIVE"))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lsArgument.Trim().EndsWith("="))
                                                {
                                                    lbArgumentIsValid = false;
                                                }
                                                if (lbArgumentIsValid)
                                                {
                                                    lsParameters += @", """ + lsArgument + @"""";
                                                }
                                            }
                                        }
                                    }
                                }
                                catch { }

                                if (lsParameters.StartsWith(@", "))
                                {
                                    lsParameters = lsParameters.Substring(2);
                                }

                                writeToLogFile("chkecking if lslastcommand: " + lsMSI + " -> " + lsLastCommand);
                                if (lsMSI != lsLastCommand)
                                {
                                    if (lsMSP != "")
                                    {
                                        loStringBuilder.AppendLine(@"# Patch installieren");
                                        //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                        loStringBuilder.AppendLine(@"$Setup += @{");
                                        loStringBuilder.AppendLine(@"	Type = ""msp"";");
                                        loStringBuilder.AppendLine(@"	Name = """ + lsMSP + @""";");
                                        loStringBuilder.AppendLine(@"}");
                                    }
                                    else
                                    {
                                        if (lsLastProductCode == "" || lsLastProductCode != lsProductCode)
                                        {
                                            loStringBuilder.AppendLine(@"# Software installieren");
                                            //loStringBuilder.AppendLine(@"# " + loRow["param"].ToString());
                                            loStringBuilder.AppendLine(@"$Setup += @{");
                                            loStringBuilder.AppendLine(@"	Type = ""msi"";");
                                            loStringBuilder.AppendLine(@"	Name = """ + lsMSI + @""";");
                                            if (lsMST != "")
                                            {
                                                loStringBuilder.AppendLine(@"	Transforms = """ + lsMST + @""";");
                                            }
                                            if (lsParameters != "")
                                            {
                                                loStringBuilder.AppendLine(@"	Properties = @(" + lsParameters + @");");
                                            }
                                            if (lsProductCode != "")
                                            {
                                                lsLastProductCode = lsProductCode;
                                                loStringBuilder.AppendLine(@"	GUID = """ + lsProductCode + @""";");
                                            }
                                            else
                                            {
                                                loStringBuilder.AppendLine(@"	GUID = """ + lsUninstallKey + @""";");
                                            }
                                            loStringBuilder.AppendLine(@"");
                                            loStringBuilder.AppendLine(@"}");
                                        }
                                    }
                                }
                                lsLastCommand = lsMSI;
                            }
                            break;
                        }

                    case "removefile":
                        {
                            switch (lsTableType)
                            {
                                case "uninstall":
                                    {
                                        loStringBuilder.AppendLine(@"# Dateien loeschen ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            UninstallName = ""Remove-Item""; ");
                                        loStringBuilder.AppendLine(@"            UninstallParameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               UninstallAcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                                default:
                                    {
                                        loStringBuilder.AppendLine(@"# Dateien loeschen ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            Name = ""Remove-Item""; ");
                                        loStringBuilder.AppendLine(@"            Parameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               AcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                            }


                        }
                        lsLastCommand = "";
                        break;

                    case "copyfile":
                        {
                            switch (lsTableType)
                            {
                                case "uninstall":
                                    {
                                        loStringBuilder.AppendLine(@"# Dateien kopieren ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            UninstallName = ""Copy-Item""; ");
                                        loStringBuilder.AppendLine(@"            UninstallParameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Destination"", (""'" + loRow["param"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               UninstallAcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                                default:
                                    {
                                        loStringBuilder.AppendLine(@"# Dateien kopieren ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            Name = ""Copy-Item""; ");
                                        loStringBuilder.AppendLine(@"            Parameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Destination"", (""'" + loRow["param"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               AcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                            }


                        }
                        lsLastCommand = "";
                        break;

                    case "copyfolder":
                        {
                            switch (lsTableType)
                            {
                                case "uninstall":
                                    {
                                        loStringBuilder.AppendLine(@"# Folder kopieren ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            UninstallName = ""Copy-Item""; ");
                                        loStringBuilder.AppendLine(@"            UninstallParameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Destination"", (""'" + loRow["param"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Recurse"", ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               UninstallAcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                                default:
                                    {
                                        loStringBuilder.AppendLine(@"# Folder kopieren ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            Name = ""Copy-Item""; ");
                                        loStringBuilder.AppendLine(@"            Parameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Destination"", (""'" + loRow["param"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Recurse"", ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               AcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                            }


                        }
                        lsLastCommand = "";
                        break;

                    case "removefolder":
                        {
                            switch (lsTableType)
                            {
                                case "uninstall":
                                    {
                                        loStringBuilder.AppendLine(@"# Verzeichnisse loeschen ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            UninstallName = ""Remove-Item""; ");
                                        loStringBuilder.AppendLine(@"            UninstallParameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Recurse"" ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               UninstallAcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                                default:
                                    {
                                        loStringBuilder.AppendLine(@"# Verzeichnisse loeschen ");
                                        loStringBuilder.AppendLine(@"    $Setup += @{ ");
                                        loStringBuilder.AppendLine(@"            Type = ""ps""; ");
                                        loStringBuilder.AppendLine(@"            Name = ""Remove-Item""; ");
                                        loStringBuilder.AppendLine(@"            Parameters = @( ");
                                        loStringBuilder.AppendLine(@"                ""-Path"", (""'" + loRow["command"].ToString() + @"'""), ");
                                        loStringBuilder.AppendLine(@"                ""-Recurse"" ");
                                        loStringBuilder.AppendLine(@"                ""-Force"" ");
                                        loStringBuilder.AppendLine(@"            ); ");
                                        loStringBuilder.AppendLine(@"               AcceptExitCodes = @(1); ");
                                        loStringBuilder.AppendLine(@"    } ");
                                    }
                                    break;
                            }
                        }
                        lsLastCommand = "";
                        break;

                    case "addregkey":
                        {
                            string lsRoot = "HKLM";
                            string lsPath = loRow["command"].ToString();
                            string lsName = "";
                            string lsRegType = "";
                            string lsValue = "";
                            try
                            {
                                lsPath = lsPath.Substring(lsPath.IndexOf(@"\") + 1);
                            }
                            catch { }
                            try
                            {
                                lsPath = lsPath.Substring(0, lsPath.IndexOf(Convert.ToChar("|")));
                            }
                            catch { }
                            try
                            {
                                lsName = loRow["command"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCU"))
                            {
                                lsRoot = "HKCU";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKU"))
                            {
                                lsRoot = "HKU";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCR"))
                            {
                                lsRoot = "HKCR";
                            }
                            try
                            {
                                lsValue = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            try
                            {
                                lsRegType = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                            }
                            catch { }
                            if (lsRegType != "")
                            {
                                loStringBuilder.AppendLine(@"$Setup += @{");
                                loStringBuilder.AppendLine(@"	Type = ""reg"";");
                                loStringBuilder.AppendLine(@"	Path = """ + lsRoot + @":\" + lsPath + @""";");
                                loStringBuilder.AppendLine(@"	Value = """ + lsName + @""";");
                                loStringBuilder.AppendLine(@"	Data = """ + lsValue + @""";");
                                loStringBuilder.AppendLine(@"	ValueType = ""String"";");
                                loStringBuilder.AppendLine(@"}");
                            }
                        }
                        lsLastCommand = "";
                        break;

                    case "addshortcut":
                        {
                            if (loRow["param"].ToString().Contains("|"))
                            {
                                string lsDestination = "";
                                string lsWorkDir = "";
                                string lsIconPath = "";
                                string lsIconIndex = "0";
                                string lsDescription = "";
                                try
                                {
                                    lsDestination = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                catch { }
                                try
                                {
                                    lsWorkDir = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                try
                                {
                                    lsIconPath = loRow["param"].ToString().Split(Convert.ToChar("|"))[2];
                                }
                                catch { }
                                try
                                {
                                    lsIconIndex = loRow["param"].ToString().Split(Convert.ToChar("|"))[3];
                                }
                                catch { }
                                try
                                {
                                    lsDescription = loRow["param"].ToString().Split(Convert.ToChar("|"))[4];
                                }
                                catch { }
                                string lsMyExe = "";
                                string lsMyPath = "";
                                try
                                {
                                    lsMyExe = System.IO.Path.GetFileName(loRow["command"].ToString());
                                }
                                catch { }
                                try
                                {
                                    lsMyPath = System.IO.Path.GetDirectoryName(loRow["command"].ToString());
                                }
                                catch { }
                                loStringBuilder.AppendLine(@"# * PowerShell example to create shortcut:");
                                loStringBuilder.AppendLine(@"$Setup += @{");
                                loStringBuilder.AppendLine(@"	Type = ""ps"";");
                                loStringBuilder.AppendLine(@"	Name = ""Create-Shortcut"";");
                                loStringBuilder.AppendLine(@"	Parameters = @(");
                                loStringBuilder.AppendLine(@"		""-Path"",				""`""" + lsMyPath + @"`"""",	# directory path to the shortcut (mandatory)");
                                loStringBuilder.AppendLine(@"		""-Name"",				""`""" + lsMyExe + @"`"""",						# filename of the shortcut (mandatory)");
                                loStringBuilder.AppendLine(@"		""-Target"",				""`""" + lsDestination + @"`""""	# target of the shortcut (mandatory)");
                                //loStringBuilder.AppendLine(@"		""-Arguments"",			""`""N:\my.txt`"""",								# arguments to the target (optional)");
                                //loStringBuilder.AppendLine(@"		""-Icon"",				""`"""" + $CommonDirs[""System32_Current""] + ""\shell32.dll,152`"""",	# icon (optional)");
                                //loStringBuilder.AppendLine(@"		""-WorkingDirectory"",	""`""N:\`"""",										# working directory of target (optional)");
                                //loStringBuilder.AppendLine(@"		""-Description"",			""`""A test shortcut.`"""",							# description (optional)");
                                //loStringBuilder.AppendLine(@"		""-HotKey"",				""`""CTRL+ALT+N`""""								# hot key (optional)");
                                loStringBuilder.AppendLine(@"	);");
                                loStringBuilder.AppendLine(@"}");
                            }

                        }
                        lsLastCommand = "";
                        break;

                    case "expandfolder":
                        lsLastCommand = "";
                        break;

                    case "checkarchitecture":
                        loStringBuilder.AppendLine("$os_type = (Get-WmiObject -Class Win32_ComputerSystem).SystemType -match '(x64)'");
                        switch (loRow["command"].ToString().ToLower())
                        {
                            case "x86":
                                loStringBuilder.AppendLine("if($os_type -eq $false) {");
                                break;
                            case "x64":
                                loStringBuilder.AppendLine("if($os_type -eq $true) {");
                                break;
                        }
                        lsLastCommand = "";
                        break;

                    case "checkregistry":
                        if (lsLastCommand != "checkregistry")
                        {
                            loStringBuilder.AppendLine("{");
                        }
                        lsLastCommand = "checkregistry";
                        break;

                    case "endcheck":
                        if (lsLastCommand != "endcheck")
                        {
                            loStringBuilder.AppendLine("}");
                        }
                        lsLastCommand = "endcheck";
                        break;

                    case "killprocess":
                        switch (lsTableType)
                        {
                            case "uninstall":
                                loStringBuilder.AppendLine(@"# * Kill process:");
                                loStringBuilder.AppendLine(@"$Setup += @{");
                                loStringBuilder.AppendLine(@"	Type = ""ps"";");
                                loStringBuilder.AppendLine(@"	UninstallName = ""Stop-Process"";");
                                loStringBuilder.AppendLine(@"	UninstallParameters = @(");
                                loStringBuilder.AppendLine(@"		""-Name"",		""`""" + loRow["command"].ToString() + @"`"""",");
                                loStringBuilder.AppendLine(@"      "" -Force""");
                                loStringBuilder.AppendLine(@"	);");
                                loStringBuilder.AppendLine(@"   UninstallAcceptExitCodes = @(0, 1);");
                                loStringBuilder.AppendLine(@"}");
                                break;
                            default:
                                loStringBuilder.AppendLine(@"# * Kill process:");
                                loStringBuilder.AppendLine(@"$Setup += @{");
                                loStringBuilder.AppendLine(@"	Type = ""ps"";");
                                loStringBuilder.AppendLine(@"	Name = ""Stop-Process"";");
                                loStringBuilder.AppendLine(@"	Parameters = @(");
                                loStringBuilder.AppendLine(@"		""-Name"",		""`""" + loRow["command"].ToString() + @"`"""",");
                                loStringBuilder.AppendLine(@"      "" -Force""");
                                loStringBuilder.AppendLine(@"	);");
                                loStringBuilder.AppendLine(@"   AcceptExitCodes = @(0, 1);");
                                loStringBuilder.AppendLine(@"}");
                                break;
                        }
                        lsLastCommand = "";
                        break;
                }
            }



            loStringBuilder = loStringBuilder.Replace("{" + Environment.NewLine + "}", "");


        }

        public static string GetMSIXScript(string lsType)
        {
            StringBuilder tw = new StringBuilder();

            tw.AppendLine(@"$rootpath = $PSScriptRoot");
            tw.AppendLine(@"$arr = [System.IO.Directory]::EnumerateFiles($rootpath,'*.msix','TopDirectoryOnly')");
            tw.AppendLine(@"$mainpackage = ''");
            tw.AppendLine(@"");
            tw.AppendLine(@"if($arr.Count -eq 1)");
            tw.AppendLine(@"{");
            tw.AppendLine(@" $mainpackage = $arr[0]");
            tw.AppendLine(@"}");
            tw.AppendLine(@"if($arr.Count -lt 1)");
            tw.AppendLine(@"{");
            tw.AppendLine(@" if($arr[0].Length > $arr[1].Length)");
            tw.AppendLine(@" {");
            tw.AppendLine(@" $mainpackage = $arr[0]");
            tw.AppendLine(@" }");
            tw.AppendLine(@" else");
            tw.AppendLine(@" {");
            tw.AppendLine(@" $mainpackage = $arr[1]");
            tw.AppendLine(@" }");
            tw.AppendLine(@"}");

            switch(lsType)
            {
                case "uninstall":
                    tw.AppendLine(@"$packagename = ''");
                    tw.AppendLine(@"");
                    tw.AppendLine(@"if ([System.IO.File]::Exists($mainpackage))");
                    tw.AppendLine(@"{");
                    tw.AppendLine(@"try");
                    tw.AppendLine(@"{");
                    tw.AppendLine(@"	[Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem')");
                    tw.AppendLine(@"	$zipstream = [System.IO.Compression.ZipFile]::OpenRead($mainpackage)");
                    tw.AppendLine(@"");
                    tw.AppendLine(@"    foreach($zippedfile in $zipstream.Entries)");
                    tw.AppendLine(@"    {");
                    tw.AppendLine(@"        if($zippedfile.Name.ToLower() -eq 'appxmanifest.xml')");
                    tw.AppendLine(@"        {");
                    tw.AppendLine(@"            $memorystream = New-Object System.IO.MemoryStream");
                    tw.AppendLine(@"            $file = $zippedfile.Open()");
                    tw.AppendLine(@"            $file.CopyTo($memorystream)");
                    tw.AppendLine(@"            $file.Close");
                    tw.AppendLine(@"            $memorystream.Position=0;");
                    tw.AppendLine(@"            $streamread = New-Object System.IO.StreamReader($memorystream)");
                    tw.AppendLine(@"            $stringstream = $streamread.ReadToEnd()");
                    tw.AppendLine(@"            $packagename=$stringstream.Substring($stringstream.IndexOf('Identity Name=""') + 'Identity Name=""'.Length)");
                    tw.AppendLine(@"            $packagename=$packagename.Substring(0,$packagename.IndexOf('""'))");
                    tw.AppendLine(@"            break;");
                    tw.AppendLine(@"        }");
                    tw.AppendLine(@"    }");
                    tw.AppendLine(@"}");
                    tw.AppendLine(@"catch { }");
                    tw.AppendLine(@"}");
                    tw.AppendLine(@"if ($packagename.Length -gt 0) {");
                    tw.AppendLine(@"        Remove-AppxProvisionedPackage -Online -PackageName $packagename -AllUsers");
                    tw.AppendLine(@"}");
                    break;
                default:
                    tw.AppendLine(@"        Add-AppxProvisionedPackage -Online -PackagePath $mainpackage");
                    break;
            }

            return tw.ToString();

        }

        
        public static DataTable ConvertXMLToDataTable(string lsType, string lsDeployXML, bool lbNotDeep)
        {

            DataTable loTable = new DataTable();
            loTable.Columns.Add("id", typeof(Guid));
            loTable.Columns.Add("actiontype");
            loTable.Columns.Add("order", typeof(int));
            loTable.Columns.Add("level", typeof(int));
            loTable.Columns.Add("command");
            loTable.Columns.Add("param");
            loTable.Columns.Add("varname");
            loTable.Columns.Add("pidvarname");
            loTable.Columns.Add("options");
            loTable.Columns.Add("path");
            loTable.Columns.Add("name");
            loTable.Columns.Add("condition");
            loTable.Columns.Add("conditionid", typeof(string));

            string lsLastConditionId = "";

            string[] lsLevel = new string[10] { "", "", "", "", "", "", "", "", "", "" };
            string[] lsConditionId = new string[] { "", "", "", "", "", "", "", "", "", "" };
            for (int i = 0; i < 10; i++)
            {
                lsConditionId[i] = Guid.NewGuid().ToString();
            }

            writeToLogFile("does <" + lsType + "> exist in " + lsDeployXML);
            if (lsDeployXML.Contains("<" + lsType + ">"))
            {

                try
                {
                    XDocument loDoc = XDocument.Parse(lsDeployXML);

                    writeToLogFile("parsing successful for " + lsType);

                    int liOrder = 0;
                    string lsOldPath = "";

                    foreach (XElement install in loDoc.Root
                                        .Element(lsType)
                                        .Elements("tasks"))
                    {

                        int liPreviousLevel = 0;

                        foreach (XNode element in install.DescendantNodes())
                        {
                            switch (element.NodeType)
                            {
                                case XmlNodeType.Comment:
                                    XComment mycomment = (XComment)element;
                                    if (mycomment.Value.Contains(" combined: start"))
                                    {
                                        liOrder += 1;
                                        DataRow loNewRow = loTable.NewRow();
                                        loNewRow["id"] = Guid.NewGuid().ToString();
                                        loNewRow["actiontype"] = "combinedsection";
                                        loNewRow["order"] = liOrder;
                                        loNewRow["level"] = 0;
                                        loNewRow["command"] = "";
                                        loNewRow["param"] = mycomment.Value;
                                        loNewRow["conditionid"] = "";
                                        loTable.Rows.Add(loNewRow);
                                    }
                                    if (mycomment.Value.Contains(" combined: end"))
                                    {
                                        liOrder += 1;
                                        DataRow loNewRow = loTable.NewRow();
                                        loNewRow["id"] = Guid.NewGuid().ToString();
                                        loNewRow["actiontype"] = "combinedsection";
                                        loNewRow["order"] = liOrder;
                                        loNewRow["level"] = 0;
                                        loNewRow["command"] = "";
                                        loNewRow["param"] = mycomment.Value;
                                        loNewRow["conditionid"] = "";
                                        loTable.Rows.Add(loNewRow);
                                    }
                                    break;
                                case XmlNodeType.Element:
                                    XElement myelement = (XElement)element;
                                    writeToLogFile("element is " + myelement.Name);
                                    writeToLogFile("pathactual is " + GetMyPath(myelement));
                                    writeToLogFile("pathold is " + lsOldPath);
                                    string lsXMLPath = GetMyPath(myelement).ToLower();
                                    string lsConditionPath = "";
                                    foreach (string lsCondition in lsXMLPath.Split(Convert.ToChar(@"\")))
                                    {
                                        if (lsCondition.ToLower() == "checkvariable")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "checkregistry")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "checkfile")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "checkfolder")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "checkvariable")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "x86")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "x64")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                        if (lsCondition.ToLower() == "languagecode")
                                        {
                                            lsConditionPath += lsCondition.ToString() + @"\";
                                        }
                                    }

                                    writeToLogFile("pathcondition is " + lsConditionPath);
                                    writeToLogFile("level is " + (lsConditionPath.Split(Convert.ToChar(@"\")).Length - 1).ToString());

                                    int liNodeLevel = lsConditionPath.Split(Convert.ToChar(@"\")).Length - 1;

                                    if (liNodeLevel < liPreviousLevel)
                                    {
                                        //find condition:
                                        string lsMyConditionId = loTable.Select("conditionid<>''", "order DESC")[0]["conditionid"].ToString();
                                        string lsMyCondition = "";
                                        foreach (DataRow loRow in loTable.Select("conditionid='" + lsMyConditionId + "' and actiontype='checkarchitecture'"))
                                        {
                                            lsMyCondition = loRow["condition"].ToString();
                                        }


                                        liOrder += 1;
                                        DataRow loNewRow = loTable.NewRow();
                                        loNewRow["id"] = Guid.NewGuid().ToString();
                                        loNewRow["actiontype"] = "endcheck";
                                        loNewRow["order"] = liOrder;
                                        loNewRow["level"] = liPreviousLevel;
                                        loNewRow["command"] = "";
                                        loNewRow["param"] = @"based on previous";
                                        loNewRow["conditionid"] = lsMyConditionId;
                                        loNewRow["condition"] = lsMyCondition;
                                        //lsConditionId[liNodeLevel] = Guid.NewGuid().ToString();
                                        loTable.Rows.Add(loNewRow);
                                        lsLevel[liPreviousLevel] = "";
                                    }

                                    switch (myelement.Name.ToString().ToLower())
                                    {
                                        case "checkregistry":
                                        case "checkfile":
                                        case "checkfolder":
                                            {
                                                if ((lsLevel[liNodeLevel]) != "")
                                                {
                                                    liOrder += 1;
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "endcheck";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = "";
                                                    loNewRow["param"] = "based on " + myelement.Name.ToString().ToLower();
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = "";
                                                }

                                                try
                                                {
                                                    lsLastConditionId = lsConditionId[liNodeLevel];
                                                }
                                                catch { }
                                                lsConditionId[liNodeLevel] = Guid.NewGuid().ToString();

                                                string lsPath = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                }

                                                string lsName = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "name")
                                                    {
                                                        lsName = loAttribute.Value;
                                                    }
                                                }

                                                string lsValue = "";
                                                string lsContentRequired = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "contentrequired")
                                                    {
                                                        lsContentRequired = loAttribute.Value;
                                                    }
                                                }

                                                liOrder += 1;
                                                {
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = myelement.Name.ToString();
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = lsValue;
                                                    loNewRow["param"] = lsName;
                                                    loNewRow["path"] = lsPath;
                                                    loNewRow["options"] = lsContentRequired;
                                                    if (String.Concat(myelement.Nodes()).ToString().Trim().StartsWith("<exists>"))
                                                    {
                                                        loNewRow["condition"] = "exists";
                                                    }
                                                    if (String.Concat(myelement.Nodes()).ToString().Trim().StartsWith("<notexists>"))
                                                    {
                                                        loNewRow["condition"] = "notexists";
                                                    }
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = myelement.Name.ToString();
                                                }
                                            }
                                            break;
                                        case "x86":
                                        case "x64":
                                            {
                                                if ((lsLevel[liNodeLevel]) != "")
                                                {
                                                    liOrder += 1;
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "endcheck";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = "";
                                                    loNewRow["param"] = "based on " + myelement.Name.ToString().ToLower() + " - " + lsLevel[liNodeLevel];
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                    loNewRow["condition"] = lsLevel[liNodeLevel];
                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = "";
                                                }
                                                liOrder += 1;
                                                lsLastConditionId = lsConditionId[liNodeLevel];
                                                lsConditionId[liNodeLevel] = Guid.NewGuid().ToString();
                                                {
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "checkarchitecture";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = myelement.Name.ToString();
                                                    loNewRow["param"] = "";
                                                    loNewRow["path"] = "";
                                                    loNewRow["condition"] = myelement.Name.ToString().ToLower();
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = myelement.Name.ToString();
                                                }
                                            }
                                            break;
                                        case "languagecode":
                                            {
                                                string lsValue = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }

                                                if ((lsLevel[liNodeLevel]) != "")
                                                {
                                                    liOrder += 1;
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "endcheck";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = "";
                                                    loNewRow["param"] = "based on " + myelement.Name.ToString().ToLower() + " - " + lsLevel[liNodeLevel];
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                    loNewRow["condition"] = lsLevel[liNodeLevel];
                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = "";
                                                }
                                                liOrder += 1;
                                                lsLastConditionId = lsConditionId[liNodeLevel];
                                                lsConditionId[liNodeLevel] = Guid.NewGuid().ToString();

                                                {
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "checklanguagecode";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = lsValue;
                                                    loNewRow["param"] = "";
                                                    loNewRow["path"] = "";
                                                    loNewRow["condition"] = myelement.Name.ToString().ToLower();
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = myelement.Name.ToString();
                                                }
                                            }
                                            break;
                                        case "checkvariable":
                                            {
                                                if ((lsLevel[liNodeLevel]) != "")
                                                {
                                                    liOrder += 1;
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "endcheck";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = "";
                                                    loNewRow["param"] = "based on " + myelement.Name.ToString().ToLower() + " - " + lsLevel[liNodeLevel];
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = "";
                                                }

                                                string lsVariable = "";
                                                string lsValue = "";

                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "var")
                                                    {
                                                        lsVariable = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }


                                                liOrder += 1;
                                                lsLastConditionId = lsConditionId[liNodeLevel];
                                                lsConditionId[liNodeLevel] = Guid.NewGuid().ToString();
                                                {
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = myelement.Name.ToString();
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = lsVariable;
                                                    loNewRow["param"] = lsValue;
                                                    loNewRow["path"] = "";
                                                    if (String.Concat(myelement.Nodes()).ToString().ToLower().Trim().StartsWith("<exists>"))
                                                    {
                                                        loNewRow["condition"] = "exists";
                                                    }
                                                    if (String.Concat(myelement.Nodes()).ToString().ToLower().Trim().StartsWith("<notexists>"))
                                                    {
                                                        loNewRow["condition"] = "notexists";
                                                    }
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                    loTable.Rows.Add(loNewRow);
                                                    lsLevel[liNodeLevel] = myelement.Name.ToString();
                                                }
                                            }
                                            break;




                                        case "execute":
                                        case "executenowait":
                                            {
                                                //writeToLogFile(GetPath(myelement));
                                                string lsCommand = "";
                                                string lsOptions = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsCommand = loAttribute.Value;
                                                    }
                                                    try
                                                    {
                                                        if (loAttribute.Name.ToString().ToLower() == "windowstyle")
                                                        {
                                                            lsOptions = loAttribute.Value;
                                                        }
                                                    }
                                                    catch { }
                                                }
                                                string lsParameters = "";
                                                foreach (XElement loParameter in myelement.Descendants("parameter"))
                                                {
                                                    lsParameters = lsParameters + loParameter.Value.ToString() + " ";
                                                }
                                                lsParameters = lsParameters.Trim();
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                if (myelement.Name.ToString().ToLower() == "execute")
                                                {
                                                    loNewRow["actiontype"] = "LaunchProcess";
                                                }
                                                else
                                                {
                                                    loNewRow["actiontype"] = "LaunchProcessNoWait";
                                                }
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsCommand;
                                                loNewRow["param"] = lsParameters;
                                                loNewRow["options"] = lsOptions;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        //case "executenowait":
                                        //    {
                                        //        //writeToLogFile(GetPath(myelement));
                                        //        string lsCommand = "";
                                        //        foreach (XAttribute loAttribute in myelement.Attributes())
                                        //        {
                                        //            if (loAttribute.Name.ToString().ToLower() == "path")
                                        //            {
                                        //                lsCommand = loAttribute.Value;
                                        //            }
                                        //        }
                                        //        string lsParameters = "";
                                        //        foreach (XElement loParameter in myelement.Descendants("parameter"))
                                        //        {
                                        //            lsParameters = lsParameters + loParameter.Value.ToString() + " ";
                                        //        }
                                        //        lsParameters = lsParameters.Trim();
                                        //        liOrder += 1;
                                        //        DataRow loNewRow = loTable.NewRow();
                                        //        loNewRow["id"] = Guid.NewGuid().ToString();
                                        //        loNewRow["actiontype"] = "LaunchProcessNoWait";
                                        //        loNewRow["order"] = liOrder;
                                        //        loNewRow["level"] = liNodeLevel;
                                        //        loNewRow["command"] = lsCommand;
                                        //        loNewRow["param"] = lsParameters;
                                        //        loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                        //        loTable.Rows.Add(loNewRow);
                                        //    }
                                        //    break;

                                        case "sleep":
                                            {
                                                string lsCommand = "";
                                                string lsParameters = "";

                                                lsCommand = "sleep";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "seconds")
                                                    {
                                                        lsParameters = loAttribute.Value;
                                                    }
                                                }
                                                lsParameters = lsParameters.Trim();
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "sleep";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsCommand;
                                                loNewRow["param"] = lsParameters;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "killprocess":
                                            {
                                                string lsCommand = "";
                                                string lsParameters = "";

                                                //lsCommand = "taskkill";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "name")
                                                    {
                                                        //lsParameters = @"""" + loAttribute.Value + @""" /F /IM cmd.exe /T";
                                                        lsCommand = loAttribute.Value;
                                                    }
                                                }
                                                lsParameters = lsParameters.Trim();
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "killprocess";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsCommand;
                                                loNewRow["param"] = lsParameters;
                                                loNewRow["options"] = "hidden";
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        //case "abort":
                                        //    {

                                        //        liOrder += 1;
                                        //        DataRow loNewRow = loTable.NewRow();
                                        //        loNewRow["id"] = Guid.NewGuid().ToString();
                                        //        loNewRow["actiontype"] = "abort";
                                        //        loNewRow["order"] = liOrder;
                                        //        loNewRow["level"] = liNodeLevel;
                                        //        loNewRow["command"] = "abort";
                                        //        loNewRow["param"] = "";
                                        //        loNewRow["options"] = "";
                                        //        loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                        //        loTable.Rows.Add(loNewRow);
                                        //    }
                                        //    break;

                                        case "removeexistingsoftware":
                                            {
                                                string lsCommand = "";
                                                string lsParameters = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "uninstalltype")
                                                    {
                                                        lsCommand = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsParameters = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removeexistingsoftware";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsCommand;
                                                loNewRow["param"] = lsParameters;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "msiexec":
                                            {
                                                string lsCommand = "";
                                                string lsParameters = "";
                                                foreach (XElement loParameter in myelement.Descendants("parameter"))
                                                {
                                                    writeToLogFile("msiexec: parameter is " + loParameter.Value.ToString());
                                                    bool lbDoneSomething = false;
                                                    if (loParameter.Value.ToLower().Trim() == "/i")
                                                    {
                                                        lsCommand = "/i";
                                                        lbDoneSomething = true;
                                                    }
                                                    if (loParameter.Value.ToLower().Trim() == "/x")
                                                    {
                                                        lsCommand = "/x";
                                                        lbDoneSomething = true;
                                                    }
                                                    if (loParameter.Value.ToLower().Trim() == "/p")
                                                    {
                                                        lsCommand = "/p";
                                                        lbDoneSomething = true;
                                                    }
                                                    if (loParameter.Value.ToLower().Trim().StartsWith("/f"))
                                                    {
                                                        lsCommand = loParameter.Value.Trim();
                                                        lbDoneSomething = true;
                                                    }
                                                    if (!lbDoneSomething)
                                                    {
                                                        lsParameters = lsParameters + loParameter.Value.ToString() + " ";
                                                    }
                                                }
                                                lsParameters = lsParameters.Trim();
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "msiexec";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsCommand;
                                                loNewRow["param"] = lsParameters;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);

                                            }
                                            break;

                                        case "copyfile":
                                            {
                                                string lsSource = "";
                                                string lsDestination = "";
                                                string lsOverwrite = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "source")
                                                    {
                                                        lsSource = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "destination")
                                                    {
                                                        lsDestination = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "overwrite")
                                                    {
                                                        lsOverwrite = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "copyfile";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsSource;
                                                loNewRow["param"] = lsDestination;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "addfolder":
                                            {
                                                string lsPath = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "addfolder";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "removeshortcuts":
                                            {
                                                string lsPath = "";
                                                string lsFileName = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "filename")
                                                    {
                                                        lsFileName = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removeshortcuts";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["param"] = lsFileName;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "setvariable":
                                            {
                                                string lsVariable = "";
                                                string lsValue = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "var")
                                                    {
                                                        lsVariable = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "setvariable";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsVariable;
                                                loNewRow["param"] = lsValue;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "getvariablefromregistry":
                                            {
                                                string lsVariable = "";
                                                string lsPath = "";
                                                string lsName = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "var")
                                                    {
                                                        lsVariable = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "name")
                                                    {
                                                        lsName = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "getvariablefromregistry";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsVariable;
                                                loNewRow["param"] = lsPath + "|" + lsName;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "expandfolder":
                                            {
                                                string lsSource = "";
                                                string lsDestination = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "source")
                                                    {
                                                        lsSource = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "destination")
                                                    {
                                                        lsDestination = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;

                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "expandfolder";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsSource;
                                                loNewRow["param"] = lsDestination;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "copyfolder":
                                            {
                                                string lsSource = "";
                                                string lsDestination = "";
                                                string lsOverwrite = "";

                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "source")
                                                    {
                                                        lsSource = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "destination")
                                                    {
                                                        lsDestination = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "overwrite")
                                                    {
                                                        lsOverwrite = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "copyfolder";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsSource;
                                                loNewRow["param"] = lsDestination;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "removefile":
                                            {
                                                string lsSource = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsSource = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removefile";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsSource;
                                                loNewRow["param"] = "";
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                bool lbValid = true;
                                                if (loNewRow["command"].ToString().ToLower() == "machvars.wms")
                                                {
                                                    lbValid = false;
                                                }
                                                if (lbValid)
                                                {
                                                    loTable.Rows.Add(loNewRow);
                                                }
                                            }
                                            break;

                                        case "removefolder":
                                            {
                                                string lsSource = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsSource = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removefolder";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsSource;
                                                loNewRow["param"] = "";
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "addpath":
                                            {
                                                string lsValue = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "addpath";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsValue;
                                                loNewRow["param"] = "";
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "removepath":
                                            {
                                                string lsValue = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removepath";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsValue;
                                                loNewRow["param"] = "";
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];
                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "addregkey":
                                            {
                                                string lsPath = "";
                                                string lsName = "";
                                                string lsValue = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "name")
                                                    {
                                                        lsName = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "type")
                                                    {
                                                        lsType = loAttribute.Value;
                                                    }
                                                }
                                                if (lsType != "")
                                                {
                                                    liOrder += 1;
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "addregkey";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = lsPath + @"|" + lsName;
                                                    loNewRow["param"] = lsType + "|" + lsValue;
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                    loTable.Rows.Add(loNewRow);
                                                }
                                            }
                                            break;

                                        case "abort":
                                            {
                                                string lsExitCode = "0";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "exitcode")
                                                    {
                                                        lsExitCode = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "abort";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsExitCode;
                                                loNewRow["param"] = "";
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "removeregkey":
                                            {
                                                string lsPath = "";
                                                string lsName = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "name")
                                                    {
                                                        lsName = loAttribute.Value;
                                                    }
                                                }
                                                if (lsType != "")
                                                {
                                                    liOrder += 1;
                                                    DataRow loNewRow = loTable.NewRow();
                                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                                    loNewRow["actiontype"] = "removeregkey";
                                                    loNewRow["order"] = liOrder;
                                                    loNewRow["level"] = liNodeLevel;
                                                    loNewRow["command"] = lsPath + @"|" + lsName;
                                                    loNewRow["param"] = "";
                                                    loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                    loTable.Rows.Add(loNewRow);
                                                }
                                            }
                                            break;

                                        case "addshortcut":
                                            {
                                                string lsPath = "";
                                                string lsDestination = "";
                                                string lsWorkDir = "";
                                                string lsIconPath = "";
                                                string lsIconIndex = "0";
                                                string lsDescription = "";
                                                string lsArguments = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "destination")
                                                    {
                                                        lsDestination = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "workdir")
                                                    {
                                                        lsWorkDir = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "iconpath")
                                                    {
                                                        lsIconPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "iconindex")
                                                    {
                                                        lsIconIndex = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "description")
                                                    {
                                                        lsDescription = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "arguments")
                                                    {
                                                        lsArguments = loAttribute.Value;
                                                    }
                                                }

                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "addshortcut";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                writeToLogFile("addshortcut: workdir " + lsWorkDir);
                                                writeToLogFile("addshortcut: iconpath " + lsIconPath);
                                                writeToLogFile("addshortcut: arguments " + lsArguments);
                                                string lsParam = lsDestination;
                                                if (lsWorkDir != "" || lsIconPath != "" || lsArguments != "")
                                                {
                                                    lsParam = lsDestination + "|" + lsWorkDir + "|" + lsIconPath + "|" + lsIconIndex + "|" + lsDescription + "|" + lsArguments;
                                                }
                                                writeToLogFile("addshortcut: param " + lsParam);
                                                loNewRow["param"] = lsParam;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "writeini":
                                            {
                                                string lsIniFile = "";
                                                string lsSection = "";
                                                string lsValue = "";
                                                string lsKey = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "inifile")
                                                    {
                                                        lsIniFile = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "section")
                                                    {
                                                        lsSection = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "key")
                                                    {
                                                        lsKey = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "writeini";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsIniFile;
                                                loNewRow["param"] = lsSection + "|" + lsKey + "|" + lsValue;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "addtext":
                                            {
                                                string lsPath = "";
                                                string lsValue = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "addtext";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["param"] = lsValue;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "removetext":
                                            {
                                                string lsPath = "";
                                                string lsValue = "";
                                                string lsAggressive = "false";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "value")
                                                    {
                                                        lsValue = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "aggressive")
                                                    {
                                                        lsAggressive = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removetext";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["param"] = lsValue + "|" + lsAggressive;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;

                                        case "replacetext":
                                            {
                                                string lsPath = "";
                                                string lsSource = "";
                                                string lsDestination = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "source")
                                                    {
                                                        lsSource = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "destination")
                                                    {
                                                        lsDestination = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "replacetext";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["param"] = lsSource + "|" + lsDestination;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;


                                        case "addfilepermission":
                                            {
                                                string lsPath = "";
                                                string lsPermission = "";
                                                string lsAccount = "";
                                                string lsReplace = "";
                                                string lsInheritance = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "permission")
                                                    {
                                                        lsPermission = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "account")
                                                    {
                                                        lsAccount = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "replace")
                                                    {
                                                        lsReplace = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "inheritance")
                                                    {
                                                        lsInheritance = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "addfilepermission";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["param"] = lsPermission + "|" + lsAccount + "|" + lsReplace + "|" + lsInheritance;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;


                                        case "removefilepermission":
                                            {
                                                string lsPath = "";
                                                string lsPermission = "";
                                                string lsAccount = "";
                                                string lsInheritance = "";
                                                foreach (XAttribute loAttribute in myelement.Attributes())
                                                {
                                                    if (loAttribute.Name.ToString().ToLower() == "path")
                                                    {
                                                        lsPath = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "permission")
                                                    {
                                                        lsPermission = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "account")
                                                    {
                                                        lsAccount = loAttribute.Value;
                                                    }
                                                    if (loAttribute.Name.ToString().ToLower() == "inheritance")
                                                    {
                                                        lsInheritance = loAttribute.Value;
                                                    }
                                                }
                                                liOrder += 1;
                                                DataRow loNewRow = loTable.NewRow();
                                                loNewRow["id"] = Guid.NewGuid().ToString();
                                                loNewRow["actiontype"] = "removefilepermission";
                                                loNewRow["order"] = liOrder;
                                                loNewRow["level"] = liNodeLevel;
                                                loNewRow["command"] = lsPath;
                                                loNewRow["param"] = lsPermission + "|" + lsAccount + "|" + lsInheritance;
                                                loNewRow["conditionid"] = lsConditionId[liNodeLevel];

                                                loTable.Rows.Add(loNewRow);
                                            }
                                            break;




                                    }



                                    liPreviousLevel = liNodeLevel;

                                    lsOldPath = GetMyPath(myelement);

                                    break;
                            }
                        }

                        for (int liMyLevel = liPreviousLevel; liMyLevel > 0; liMyLevel -= 1)
                        {
                            if (lsLevel[liMyLevel] != "")
                            {
                                if (loTable.Select("actiontype='endcheck' and conditionid='" + lsLastConditionId + "'").Length == 0)
                                {
                                    if (loTable.Select("conditionid='" + lsLastConditionId + "'").Length > 0)
                                    {
                                        liOrder += 1;
                                        DataRow loNewRow = loTable.NewRow();
                                        loNewRow["id"] = Guid.NewGuid().ToString();
                                        loNewRow["actiontype"] = "endcheck";
                                        loNewRow["order"] = liOrder;
                                        loNewRow["level"] = liMyLevel;
                                        loNewRow["command"] = "";
                                        loNewRow["param"] = "from level";
                                        loNewRow["conditionid"] = lsLastConditionId;
                                        loTable.Rows.Add(loNewRow);
                                    }
                                }
                            }
                        }


                    }
                }
                catch (Exception ex) { writeToLogFile("convertxmldata: " + ex.Message); }

                writeToLogFile("now preparing endcheck...");
                //fix last endcheck

                bool lbEcheDonesomething = true;
                do
                {
                    int liOrder = 0;
                    try
                    {
                        liOrder = Convert.ToInt32(loTable.Select("", "order desc")[0]["order"]) + 1;
                    }
                    catch { }
                    writeToLogFile("rows: " + loTable.Rows.Count.ToString());
                    lbEcheDonesomething = false;
                    foreach (DataRow loRow in loTable.Rows)
                    {
                        if (loRow["actiontype"].ToString().ToLower().StartsWith("check"))
                        {
                            writeToLogFile("found command: " + loRow["actiontype"].ToString().ToLower() + "width " + loRow["conditionid"].ToString());
                            writeToLogFile("actiontype='endcheck' and [conditionid]='" + loRow["conditionid"].ToString() + "'");
                            writeToLogFile(loTable.Select("actiontype='endcheck' and [conditionid]='" + loRow["conditionid"].ToString() + "'").Length.ToString());
                            if (loTable.Select("actiontype='endcheck' and [conditionid]='" + loRow["conditionid"].ToString() + "'").Length == 0)
                            {
                                writeToLogFile("missing endcheck for " + loRow["conditionid"].ToString());
                                try
                                {
                                    DataRow loNewRow = loTable.NewRow();
                                    loNewRow["id"] = Guid.NewGuid().ToString();
                                    loNewRow["actiontype"] = "endcheck";
                                    loNewRow["order"] = liOrder;
                                    loNewRow["level"] = Convert.ToInt32(loRow["level"].ToString());
                                    loNewRow["command"] = "";
                                    loNewRow["param"] = "fixed";
                                    loNewRow["conditionid"] = loRow["conditionid"].ToString();
                                    loTable.Rows.Add(loNewRow);
                                    lbEcheDonesomething = true;
                                    break;
                                }
                                catch (Exception exx) { writeToLogFile(exx.Message); }
                            }
                        }
                    }
                } while (lbEcheDonesomething);

                writeToLogFile("end preparing endcheck...");


                if (lbNotDeep)
                {
                    writeToLogFile("looking for 6432node");
                    foreach (DataRow loRow in loTable.Rows)
                    {
                        if (loRow["actiontype"].ToString().ToLower() == "checkregistry")
                        {
                            //if (loTable.Select("actiontype='checkregistry' and [level]<>'" + loRow["level"].ToString() + "'").Length > 1)
                            //{
                            if (loRow["path"].ToString().ToLower().Contains(@"6432node\"))
                            {
                                writeToLogFile("deleting all 6432node: " + loRow["conditionid"].ToString());
                                foreach (DataRow losubrow in loTable.Select("conditionid='" + loRow["conditionid"].ToString() + "'"))
                                {
                                    //if (!losubrow["actiontype"].ToString().ToLower().StartsWith("check") && !losubrow["actiontype"].ToString().ToLower().StartsWith("endcheck") && Convert.ToInt32(losubrow["level"])>1)
                                    if (!(losubrow["actiontype"].ToString().ToLower().Contains("check")) && Convert.ToInt32(losubrow["level"]) > 1)
                                    {
                                        //check within check, keep actions alive...
                                    }
                                    else
                                    {
                                        //writeToLogFile("6432node: looking if conditionid exists: actiontype='checkregistry' and conditionid='" + losubrow["conditionid"].ToString() + "'");



                                        if (losubrow["actiontype"].ToString().ToLower() == "endcheck")
                                        {
                                            if (loTable.Select("actiontype='checkregistry' and conditionid='" + losubrow["conditionid"].ToString() + "'").Length > 0)
                                            {

                                            }
                                            else
                                            {
                                                writeToLogFile("deleted all 6432node: " + loRow["actiontype"].ToString());
                                                losubrow["conditionid"] = "deleted";
                                            }
                                        }
                                        else
                                        {
                                            writeToLogFile("deleted all 6432node: " + loRow["actiontype"].ToString());
                                            losubrow["conditionid"] = "deleted";
                                        }

                                    }
                                }
                            }
                            //}
                        }
                    }
                    loTable.AcceptChanges();
                }


                writeToLogFile("final table: ");
                foreach (DataRow loRow in loTable.Select("", "[order] ASC"))
                {
                    string lsLog = "";
                    foreach (DataColumn loColumn in loTable.Columns)
                    {

                        //lsLog += "[" + loColumn.ColumnName + "]=" + loRow[loColumn.ColumnName] + " ";
                    }
                    lsLog += loRow["order"].ToString() + ":" + loRow["level"].ToString() + "  " + loRow["actiontype"].ToString() + "    " + loRow["command"].ToString() + "   -   " + loRow["param"].ToString() + "   " + loRow["conditionid"].ToString();
                    writeToLogFile(lsLog);
                }
                writeToLogFile("end final table");
            }
            else
            {
                writeToLogFile("could now find section " + lsType + " in xml");
            }

            return loTable;
        }




        public static string GetMyPath(XElement node)
        {
            string path = node.Name.ToString();
            XElement currentNode = node;
            while (currentNode.Parent != null)
            {
                currentNode = currentNode.Parent;
                path = currentNode.Name.ToString() + @"\" + path;
            }
            return path;
        }



        public static string ConvertWindowsVariablesToPowershell(string lsLine)
        {
            string lsReturn = lsLine;
            lsReturn = lsReturn.Replace("%ProgramFiles(x86)%", @"${env:ProgramFiles(x86)}");
            lsReturn = lsReturn.Replace("%programfiles(x86)%", @"${env:ProgramFiles(x86)}");
            lsReturn = lsReturn.Replace("%ProgramFiles(x64)%", @"${env:ProgramFiles}");
            lsReturn = lsReturn.Replace("%programfiles(x64)%", @"${env:ProgramFiles}");
            lsReturn = lsReturn.Replace("%ProgramFiles%", @"${env:ProgramFiles}");
            lsReturn = lsReturn.Replace("%programfiles%", @"${env:ProgramFiles}");
            lsReturn = lsReturn.Replace("%ProgramData%", @"${env:ProgramData}");
            lsReturn = lsReturn.Replace("%PUBLIC%", @"${env:Public}");
            lsReturn = lsReturn.Replace("%USERPROFILE%", @"${env:UserProfile}");
            lsReturn = Regex.Replace(lsReturn, "%USERPROFILE%", @"${env:UserProfile}", RegexOptions.IgnoreCase);
            return lsReturn;
        }

    

        //public static string GetDeployXMLWithSettings2(string lsDeployXMLContent, string lsRequestString, string lsReleaseName, string lsReleaseComment, string lsLanguages, string lsRealLanguages, string lsArchitectures, string lsMaininstallfolderx86, string lsMaininstallfolderx64, string lsMainExe, string lsProduct, string lsUninstallKey, string lsManufacturer, string lsVersion, string lsSoftwareId, string lsReleaseId, string lsResolvedDownloadName, string lsInternalId, DataTable loParameterTable, string lsTaskSequence, DataTable loPreReqTable)
        //{
        //    //int liMyCounter = 0;

        //    writeToLogFile("getdeployxmlwithsettings: " + lsMaininstallfolderx86);

        //    writeToLogFile("languages=" + lsLanguages);

        //    writeToLogFile(lsDeployXMLContent);

         


        //    string lsCustomerTemplate = "";
        //    if (lsRequestString.ToLower().Contains("clisources"))
        //    {
        //        lsCustomerTemplate = "kssg";
        //    }

        //    try
        //    {

        //        if (lsManufacturer == "")
        //        {
        //            lsManufacturer = FindBetween(lsDeployXMLContent, "<manufacturer>", "</manufacturer>");
        //        }
        //        if (lsProduct == "")
        //        {
        //            lsProduct = FindBetween(lsDeployXMLContent, "<productname>", "</productname>");
        //        }
        //        if (lsVersion == "")
        //        {
        //            lsVersion = FindBetween(lsDeployXMLContent, "<productversion>", "</productversion>");
        //        }
        //        if (lsReleaseName == "")
        //        {
        //            lsReleaseName = FindBetween(lsDeployXMLContent, "<releaseversion>", "</releaseversion>");
        //        }

        //        string lsTaskSequences = "";
        //        if (lsDeployXMLContent.Contains("start tasksequence:"))
        //        {
        //            for (int i = 0; i < lsDeployXMLContent.Length; i++)
        //            {
        //                try
        //                {
        //                    if (lsDeployXMLContent.Substring(i, "start tasksequence:".Length) == "start tasksequence:")
        //                    {
        //                        lsTaskSequences = lsTaskSequences + lsDeployXMLContent.Substring(i + "start tasksequence:".Length, 9) + ";";
        //                    }
        //                }
        //                catch { }
        //            }
        //        }

        //        writeToLogFile("tasksequences: " + lsTaskSequences);

        //        foreach (string lsMyTaskSequence in lsTaskSequences.Split(Convert.ToChar(";")))
        //        {
        //            if (lsTaskSequence != "")
        //            {
        //                if (lsTaskSequence.Trim() == lsMyTaskSequence.Trim())
        //                {
        //                    writeToLogFile("found tasksequence: " + lsMyTaskSequence.Trim());
        //                    string lsInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                    writeToLogFile("lsInstall: " + lsInstall);
        //                    writeToLogFile("looking for " + "<!-- start tasksequence: " + lsTaskSequence.Trim() + " -->");
        //                    string lsNewInstall = FindBetween(lsInstall, "<!-- start tasksequence: " + lsTaskSequence.Trim() + " -->", "<!-- end tasksequence: " + lsTaskSequence.Trim() + " -->");
        //                    writeToLogFile("lsNewInstall: " + lsNewInstall);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsInstall, "<tasks>" + lsNewInstall + @"</tasks>");
        //                }
        //            }
        //        }



        //        try
        //        {
        //            XmlDocument myxDocument = new XmlDocument();
        //            myxDocument.LoadXml(lsDeployXMLContent);
        //            lsDeployXMLContent = Beautify(myxDocument);
        //        }
        //        catch (Exception exx) { writeToLogFile("beautify failed: " + exx.Message); }


        //        writeToLogFile("after beautify: ");

        //        writeToLogFile(lsDeployXMLContent);

        //        string lsRaiffeisenPackageId = "00000000";
        //        try
        //        {
        //            lsRaiffeisenPackageId = "0" + FindBetween(lsDeployXMLContent, "SCCMOriginalFolder=", "-->").Substring(1, 7);
        //        }
        //        catch { }
        //        if (lsReleaseComment.Length == 8)
        //        {
        //            lsRaiffeisenPackageId = lsReleaseComment;
        //        }
        //        if (lsInternalId.Length == 8)
        //        {
        //            lsRaiffeisenPackageId = lsInternalId;
        //        }


        //        if (lsDeployXMLContent.Contains("installappv.ps1"))
        //        {
        //            if (!lsDeployXMLContent.Contains(@"HKLM\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell"))
        //            {
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(@"<execute path=""powershell"">", @"<addregkey path=""HKLM\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell"" name=""ExecutionPolicy"" value=""Unrestricted"" type=""REG_SZ"" /><execute path=""powershell"">");
        //            }
        //        }

        //        //append 
        //        if (!lsDeployXMLContent.ToLower().Contains("<releaseversion>"))
        //        {
        //            if (lsReleaseName != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<releaseversion>" + lsReleaseName + "</releaseversion></metadata>", RegexOptions.IgnoreCase);
        //            }
        //            //lsDeployXMLContent = lsDeployXMLContent.ToLower().Replace("</metadata>", "<releaseversion>" + lsReleaseName + "</releaseversion></metadata>");
        //        }
        //        if (!lsDeployXMLContent.ToLower().Contains("<languages>"))
        //        {
        //            if (lsLanguages != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<languages>" + lsLanguages + "</languages></metadata>", RegexOptions.IgnoreCase);
        //            }
        //        }
        //        else
        //        {
        //            if (FindBetween(lsDeployXMLContent, "<languages>", "</languages>").Length > 0)
        //            {
        //                lsDeployXMLContent = lsDeployXMLContent.Replace("<languages>" + FindBetween(lsDeployXMLContent, "<languages>", "</languages>") + "</languages>", "<languages>" + lsLanguages + "</languages>");
        //            }
        //        }
        //        if (!lsDeployXMLContent.ToLower().Contains("<architecture>"))
        //        {
        //            if (lsArchitectures != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<architecture>" + lsArchitectures + "</architecture></metadata>", RegexOptions.IgnoreCase);
        //            }
        //        }
        //        if (!lsDeployXMLContent.ToLower().Contains("<maininstallfolderx86>"))
        //        {
        //            if (lsMaininstallfolderx86 != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<maininstallfolderx86>" + lsMaininstallfolderx86 + "</maininstallfolderx86></metadata>", RegexOptions.IgnoreCase);
        //            }
        //        }
        //        if (!lsDeployXMLContent.ToLower().Contains("<maininstallfolderx64>"))
        //        {
        //            if (lsMaininstallfolderx64 != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<maininstallfolderx64>" + lsMaininstallfolderx64 + "</maininstallfolderx64></metadata>", RegexOptions.IgnoreCase);
        //            }
        //        }
        //        if (!lsDeployXMLContent.ToLower().Contains("<maininstallexe>"))
        //        {
        //            if (lsMainExe != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<maininstallexe>" + lsMainExe + "</maininstallexe></metadata>", RegexOptions.IgnoreCase);
        //            }
        //        }
        //        if (!lsDeployXMLContent.ToLower().Contains("<originalsoftwareid>"))
        //        {
        //            if (lsSoftwareId != "")
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "</metadata>", "<originalsoftwareid>" + lsSoftwareId + "</originalsoftwareid></metadata>", RegexOptions.IgnoreCase);
        //            }
        //        }

        //        //shop
        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopgui") == "enabled")
        //        {
        //            lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<tasks>", @"<tasks><enableinstallgui unattended=""true"" />", RegexOptions.IgnoreCase);
        //        }
        //        else
        //        {
        //            lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, @"<enableinstallgui unattended=""true"" />", "", RegexOptions.IgnoreCase);
        //        }

        //        //allusers
        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopallusers") != "")
        //        {
        //            lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>ALLUSERS=1</parameter>", "<parameter>ALLUSERS=" + clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopallusers") + "</parameter>", RegexOptions.IgnoreCase);
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopdisableadvtshortcuts") == "disabled")
        //        {
        //            lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>REBOOT=ReallySuppress</parameter>", "<parameter>REBOOT=ReallySuppress</parameter><parameter>DISABLEADVTSHORTCUTS=1</parameter>", RegexOptions.IgnoreCase);
        //        }

        //        //shopsilentparam                
        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsilentparam") != "")
        //        {
        //            lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "/qb!-", "/" + clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsilentparam"), RegexOptions.IgnoreCase);
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopdisablearp") == "disabled")
        //        {
        //            if (!lsDeployXMLContent.Contains("ARPNOMODIFY="))
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>REBOOT=ReallySuppress</parameter>", "<parameter>REBOOT=ReallySuppress</parameter><parameter>ARPNOMODIFY=1</parameter><parameter>ARPNOREPAIR=1</parameter><parameter>ARPNOREMOVE=1</parameter>", RegexOptions.IgnoreCase);
        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopactivesetup") == "disabled")
        //        {
        //            lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>REBOOT=ReallySuppress</parameter>", "<parameter>REBOOT=ReallySuppress</parameter><parameter>DISABLEACTIVESETUP=1</parameter>", RegexOptions.IgnoreCase);
        //        }

        //        switch (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoprootdrive"))
        //        {
        //            case "ignore":
        //                if (lsDeployXMLContent.ToLower().Contains("<parameter>rootdrive=c:</parameter>"))
        //                {
        //                    lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>ROOTDRIVE=C:</parameter>", "", RegexOptions.IgnoreCase);
        //                }
        //                break;
        //            case "":
        //                break;
        //            default:
        //                if (lsDeployXMLContent.ToLower().Contains("<parameter>rootdrive=c:</parameter>"))
        //                {
        //                    lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>ROOTDRIVE=C:</parameter>", "<parameter>ROOTDRIVE=" + clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoprootdrive") + "</parameter>", RegexOptions.IgnoreCase);
        //                }
        //                else
        //                {
        //                    if (lsDeployXMLContent.Contains("<parameter>REBOOT=ReallySuppress</parameter>"))
        //                    {
        //                        lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, "<parameter>REBOOT=ReallySuppress</parameter>", "<parameter>REBOOT=ReallySuppress</parameter><parameter>ROOTDRIVE=" + clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoprootdrive") + "</parameter>", RegexOptions.IgnoreCase);
        //                    }
        //                }
        //                break;
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoplog").ToLower() != @"%systemroot%\debug\msipackages" && clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoplog").ToLower() != @"")
        //        {
        //            string lsLogPath = clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoplog");
        //            if (lsLogPath.ToLower() != "false" && lsLogPath != "")
        //            {
        //                try
        //                {
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(@"%systemroot%\debug\msipackages", lsLogPath);
        //                }
        //                catch (Exception ex)
        //                {
        //                    writeToLogFile("replacing log: error " + ex.Message);
        //                }
        //            }
        //            writeToLogFile("replacing log: now lsDeployXMLContent is : " + lsDeployXMLContent);
        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoplogexename").ToLower() != "")
        //        {
        //            string lsNewValue = clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoplogexename");
        //            lsNewValue = getlogname(lsNewValue, lsManufacturer, lsProduct, lsVersion, lsReleaseName);
        //            writeToLogFile("replacing exelog: ");
        //            writeToLogFile("replacing exelog: from " + lsUninstallKey + ".log" + " to " + lsNewValue);
        //            try
        //            {
        //                lsDeployXMLContent = Regex.Replace(lsDeployXMLContent, lsUninstallKey + ".log", lsNewValue, RegexOptions.IgnoreCase);
        //            }
        //            catch (Exception ex)
        //            {
        //                writeToLogFile("replacing exelog: error " + ex.Message);
        //            }
        //            writeToLogFile("replacing exelog: now lsDeployXMLContent is : " + lsDeployXMLContent);
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopprocess").ToLower() == "askuser")
        //        {
        //            writeToLogFile("askuser: parsing");
        //            XDocument doc = new XDocument();
        //            doc = XDocument.Parse(lsDeployXMLContent);
        //            var matchingElements = doc.Descendants().Where(x => x.Name == "killprocess");
        //            foreach (XElement loNode in matchingElements)
        //            {
        //                writeToLogFile("askuser: found " + loNode.ToString());
        //                try
        //                {
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(loNode.ToString(), @"<messagebox type=""PROCESS"">Please close the running process '" + loNode.Attribute("name").Value + "' to proceed with the installation of '" + lsManufacturer + " " + lsProduct + " " + lsVersion + "'.</messagebox>");
        //                }
        //                catch { }
        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsilentprocess") == "enabled")
        //        {
        //            for (int i = 0; i < lsDeployXMLContent.Length; i++)
        //            {
        //                try
        //                {
        //                    if (lsDeployXMLContent.ToLower().Substring(i, "<execute".Length) == "<execute")
        //                    {
        //                        string lsTempValue = lsDeployXMLContent.Substring(i);
        //                        string lsTempContent = lsTempValue.Substring(0, lsTempValue.IndexOf(">"));
        //                        if (!lsTempContent.ToLower().Contains(@"windowstyle="""))
        //                        {
        //                            writeToLogFile("windowstyle::adding " + lsTempContent);
        //                            lsDeployXMLContent = lsDeployXMLContent.Replace(lsTempContent, lsTempContent.Replace("<execute ", @"<execute windowstyle=""hidden"" "));
        //                            lsDeployXMLContent = lsDeployXMLContent.Replace(lsTempContent, lsTempContent.Replace("<executenowait ", @"<executenowait windowstyle=""hidden"" "));
        //                        }
        //                    }
        //                }
        //                catch { }

        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopreinstall") == "enabled")
        //        {
        //            string lsInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //            string lsUninstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //            lsUninstall = FindBetween(lsUninstall, "<tasks>", "</tasks>");
        //            lsUninstall = Regex.Replace(lsUninstall, @"<abort exitcode=""0"" />", "");
        //            lsInstall = Regex.Replace(lsInstall, "<tasks>", @"<tasks>" + lsUninstall, RegexOptions.IgnoreCase);
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(FindBetween(lsDeployXMLContent, "<install>", "</install>"), lsInstall);
        //        }

        //        writeToLogFile("looking for shopprereq (" + lsRequestString + ")");

        //        try
        //        {
        //            writeToLogFile("now getreq:");
        //            writeToLogFile("getreq: " + clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopprereq"));
        //        }
        //        catch (Exception ex) { writeToLogFile("erro3: " + ex.Message); }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopprereq") == "separate")
        //        {
        //            try
        //            {
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(FindBetween(lsDeployXMLContent, "<!-- start prereqs -->", "<!-- end prereqs -->"), "");
        //            }
        //            catch { }
        //        }
        //        else
        //        {
        //            if (loPreReqTable.Rows.Count > 0)
        //            {
        //                try
        //                {
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(FindBetween(lsDeployXMLContent, "<!-- start prereqs -->", "<!-- end prereqs -->"), "");
        //                }
        //                catch { }

        //                writeToLogFile("forcing prereqs...");

        //                string lsInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                lsInstall = FindBetween(lsInstall, "<tasks>", "</tasks>");

        //                string lsPrereq = "";
        //                if (loPreReqTable.Rows.Count > 0)
        //                {
        //                    foreach (DataRow loPreReqRow in loPreReqTable.Rows)
        //                    {
        //                        lsPrereq = lsPrereq + loPreReqRow["installsection"].ToString();
        //                    }
        //                }

        //                if (lsDeployXMLContent.Contains("<!-- start prereqs -->"))
        //                {
        //                    if (lsPrereq != "")
        //                    {
        //                        lsDeployXMLContent = lsDeployXMLContent.Replace(lsInstall, "<!-- start prereqs -->" + lsPrereq + "<!-- end prereqs -->" + lsInstall);
        //                    }
        //                }

        //            }
        //        }

        //        writeToLogFile("done for shopprereq");

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopadditionalfolders").ToLower() != "")
        //        {
        //            string addfolders = "";
        //            foreach (string lsItem in (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopadditionalfolders").Split(Convert.ToChar("|"))))
        //            {
        //                if (lsItem != "")
        //                {
        //                    if (!lsDeployXMLContent.Contains(@"addfolder path=""" + lsItem.Trim().Replace("%3A", ":") + @""""))
        //                    {
        //                        addfolders = addfolders + @"<addfolder path=""" + lsItem.Trim().Replace("%3A", ":") + @""" />";
        //                    }
        //                }
        //            }
        //            if (addfolders != "")
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "<tasks>", @"<tasks>" + addfolders, RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopforceremoval").ToLower() == "enabled")
        //        {
        //            writeToLogFile("found shop removal");
        //            if (lsDeployXMLContent.ToLower().Contains("msiexec"))
        //            {
        //                if (!lsDeployXMLContent.Contains(@"<removeregkey path=""HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\"))
        //                {
        //                    try
        //                    {
        //                        string lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                        string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<removeregkey path=""HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""" /><removeregkey path=""HKLM\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""" /></tasks>", RegexOptions.IgnoreCase);
        //                        lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    }
        //                    catch { }
        //                }
        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsupportshortcuts") != "")
        //        {
        //            string lsFinalName = "Linde_" + lsManufacturer.Replace(" ", "_") + "_" + lsProduct.Replace(" ", "_") + "_" + lsReleaseName.Replace(" ", "_") + "_001";
        //            lsDeployXMLContent = lsDeployXMLContent.Replace("<productname>" + FindBetween(lsDeployXMLContent, "<productname>", "</productname>") + "</productname>", "<productname>" + lsFinalName + "</productname>");
        //            string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //            string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<addshortcut path=""%SystemDrive%\_HI\Application_Detection\" + lsFinalName + @"\Uninstall_Software.lnk"" destination=""\\chrzmdb2025\PackageSource\01_Applications\" + lsFinalName + @"\Deliveries_Setup.exe"" arguments=""Type=X"" workdir=""\\chrzmdb2025\PackageSource\01_Applications\" + lsFinalName + @""" /></tasks>", RegexOptions.IgnoreCase);
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //            lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<removefolder path=""%SystemDrive%\_HI\Application_Detection\" + lsFinalName + @""" /></tasks>", RegexOptions.IgnoreCase);
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //            lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<addshortcut path=""%SystemDrive%\_HI\Application_Detection\" + lsFinalName + @"\Uninstall_Software.lnk"" destination=""\\chrzmdb2025\PackageSource\01_Applications\" + lsFinalName + @"\Deliveries_Setup.exe"" arguments=""Type=X"" workdir=""\\chrzmdb2025\PackageSource\01_Applications\" + lsFinalName + @""" /></tasks>", RegexOptions.IgnoreCase);
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsccmrefresh").ToLower() == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains(@"""{00000000-0000-0000-0000-000000000001}"""))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000001}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000001}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000001}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }

        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsccmsoftwareinventory").ToLower() == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains(@"""{00000000-0000-0000-0000-000000000002}"""))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000002}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000002}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000002}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }

        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsccmrequestmachinepolicy").ToLower() == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains(@"""{00000000-0000-0000-0000-000000000021}"""))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000021}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000021}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000021}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }

        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsccmevaluatemachinepolicy").ToLower() == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains(@"""{00000000-0000-0000-0000-000000000022}"""))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000022}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000022}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000022}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }

        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsccmappmanagerpolicy").ToLower() == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains(@"""{00000000-0000-0000-0000-000000000121}"""))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000121}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000121}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000121}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }

        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopsccmuseragenteval").ToLower() == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains(@"""{00000000-0000-0000-0000-000000000108}"""))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000108}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000108}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<execute path=""wmic"" windowstyle=""hidden""><parameters><parameter>/namespace:\\root\ccm path sms_client CALL TriggerSchedule ""{00000000-0000-0000-0000-000000000108}"" /NOINTERACTIVE</parameter></parameters></execute></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }

        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopdefenderpathinternal").ToLower() == "enabled")
        //        {

        //            if (!lsDeployXMLContent.Contains(@"""Add-MpPreference"""))
        //            {
        //                string lsDefenderInstallx86 = "";
        //                string lsDefenderInstallx64 = "";
        //                string lsDefenderUninstallx86 = "";
        //                string lsDefenderUninstallx64 = "";
        //                if (lsMaininstallfolderx86 != "")
        //                {
        //                    lsDefenderInstallx86 = @"-ExecutionPolicy ByPass -Command &quot;Add-MpPreference -ExclusionPath '" + lsMaininstallfolderx86 + "'&quot;";
        //                    lsDefenderUninstallx86 = @"-ExecutionPolicy ByPass -Command &quot;Remove-MpPreference -ExclusionPath '" + lsMaininstallfolderx86 + "'&quot;";
        //                }
        //                if (lsMaininstallfolderx64 != "")
        //                {
        //                    if (lsMaininstallfolderx86 != lsMaininstallfolderx64)
        //                    {
        //                        lsDefenderInstallx64 = @"-ExecutionPolicy ByPass -Command &quot;Add-MpPreference -ExclusionPath '" + lsMaininstallfolderx64 + "'&quot;";
        //                        lsDefenderInstallx64 = @"-ExecutionPolicy ByPass -Command &quot;Add-MpPreference -ExclusionPath '" + lsMaininstallfolderx64 + "'&quot;";
        //                    }
        //                }
        //                string lsDefenderInstall = "";
        //                string lsDefenderUninstall = "";
        //                if (lsDefenderInstallx86 != "")
        //                {
        //                    lsDefenderInstall += @"<execute path=""powershell.exe"" windowstyle=""hidden""><parameters><parameter>" + lsDefenderInstallx86 + @"</parameter></parameters></execute>";
        //                    lsDefenderUninstall += @"<execute path=""powershell.exe"" windowstyle=""hidden""><parameters><parameter>" + lsDefenderUninstallx86 + @"</parameter></parameters></execute>";
        //                }
        //                if (lsDefenderInstallx64 != "")
        //                {
        //                    lsDefenderInstall += @"<execute path=""powershell.exe"" windowstyle=""hidden""><parameters><parameter>" + lsDefenderInstallx64 + @"</parameter></parameters></execute>";
        //                    lsDefenderUninstall += @"<execute path=""powershell.exe"" windowstyle=""hidden""><parameters><parameter>" + lsDefenderUninstallx64 + @"</parameter></parameters></execute>";
        //                }

        //                if (lsDefenderInstall != "")
        //                {
        //                    string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                    string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", lsDefenderInstall + @"</tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                    lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", lsDefenderUninstall + "</tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                    lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", lsDefenderInstall + "</tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                }
        //            }

        //        }


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopfirewallinternal").ToLower() == "enabled")
        //        {

        //            if (!lsDeployXMLContent.Contains(@"""advfirewall"""))
        //            {
        //                string lsFirewallInstallx86 = "";
        //                string lsFirewallInstallx64 = "";
        //                if (lsMaininstallfolderx86 != "")
        //                {
        //                    lsFirewallInstallx86 = @"advfirewall firewall add rule name=""" + lsManufacturer + " " + lsProduct + " " + lsVersion + @""" dir=in action=allow program=""" + lsMaininstallfolderx86 + @"\" + lsMainExe + @""" enable=yes profile=any";
        //                }
        //                if (lsMaininstallfolderx64 != "")
        //                {
        //                    if (lsMaininstallfolderx86 != lsMaininstallfolderx64)
        //                    {
        //                        lsFirewallInstallx64 = @"advfirewall firewall add rule name=""" + lsManufacturer + " " + lsProduct + " " + lsVersion + @""" dir=in action=allow program=""" + lsMaininstallfolderx64 + @"\" + lsMainExe + @""" enable=yes profile=any";
        //                    }
        //                }
        //                string lsFirewallInstall = "";
        //                if (lsFirewallInstallx86 != "")
        //                {
        //                    lsFirewallInstall += @"<execute path=""netsh.exe"" windowstyle=""hidden""><parameters><parameter>" + lsFirewallInstallx86 + @"</parameter></parameters></execute>";
        //                }
        //                if (lsFirewallInstallx64 != "")
        //                {
        //                    lsFirewallInstall += @"<execute path=""netsh.exe"" windowstyle=""hidden""><parameters><parameter>" + lsFirewallInstallx64 + @"</parameter></parameters></execute>";
        //                }

        //                if (lsFirewallInstall != "")
        //                {
        //                    string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                    string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", lsFirewallInstall + @"</tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                    lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", lsFirewallInstall.Replace("add rule","remove rule") + "</tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                    lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", lsFirewallInstall + "</tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                }
        //            }

        //        }

        //        try
        //        {
        //            writeToLogFile("looking for startmenustructure");
        //            if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "startmenustructure").ToLower() != "")
        //            {
        //                writeToLogFile("found for startmenustructure");
        //                string lsSettingsValue = clsConvertEngine.GetValueFromRequestString(lsRequestString, "startmenustructure");
        //                writeToLogFile("startmenustructure: " + lsSettingsValue);
        //                if (lsSettingsValue.Trim() != "")
        //                {
        //                    string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                    writeToLogFile("oldinstall: " + lsOldInstall);
        //                    string lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<moveshortcuts path=""%ProgramData%\Microsoft\Windows\Start Menu\" + lsSettingsValue + @""" /></tasks>", RegexOptions.IgnoreCase);

        //                    writeToLogFile("newinstall: " + lsNewInstall);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                    lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<removeshortcuts path=""%ProgramData%\Microsoft\Windows\Start Menu\" + lsSettingsValue + @""" /></tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                    lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                    lsNewInstall = Regex.Replace(lsOldInstall, "</tasks>", @"<moveshortcuts path=""%ProgramData%\Microsoft\Windows\Start Menu\" + lsSettingsValue + @""" /></tasks>", RegexOptions.IgnoreCase);
        //                    lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //                }
        //            }
        //        }
        //        catch { }


        //        if (lsRequestString.ToLower().Contains("constellium"))
        //        {

        //            writeToLogFile("language fix for contellium");

        //            lsDeployXMLContent = lsDeployXMLContent.Replace("<getoslanguage>", @"<getvariablefromregistry var=""customlanguage"" path=""HKU\.DEFAULT\Control Panel\International"" name=""Locale"" />");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace("</getoslanguage>", @"");

        //            lsDeployXMLContent = lsDeployXMLContent.Replace("<languagecodes>", @"");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace("</languagecodes>", @"");

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""1036"">", @"<checkvariable var=""customlanguage"" value=""0000040C""><exists>");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""1033"">", @"<checkvariable var=""customlanguage"" value=""00000409""><exists>");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""1031"">", @"<checkvariable var=""customlanguage"" value=""00000407""><exists>");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""1029"">", @"<checkvariable var=""customlanguage"" value=""00000405""><exists>");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""1040"">", @"<checkvariable var=""customlanguage"" value=""00000410""><exists>");
        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""2055"">", @"<checkvariable var=""customlanguage"" value=""00000807""><exists>");

        //            for (int i = 1000; i < 3000; i++)
        //            {
        //                string lsHex = i.ToString("X");
        //                lsHex = "0000000000".Substring(0, 8 - lsHex.Length) + lsHex;
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(@"<languagecode value=""" + i.ToString() + @""">", @"<checkvariable var=""customlanguage"" value=""" + lsHex + @"""><exists>");
        //            }

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(@"</languagecode>", @"</exists></checkvariable>");

        //        }

        //        //serverusermode


        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopserverusermode") == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains("change.exe"))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                writeToLogFile("oldinstall: " + lsOldInstall);
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "<tasks>", @"<tasks><checkserver><exists><execute path=""change.exe"" windowstyle=""hidden""><parameters><parameter>user /install</parameter></parameters></execute></exists></checkserver>", RegexOptions.IgnoreCase);
        //                lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", @"<checkserver><exists><execute path=""change.exe"" windowstyle=""hidden""><parameters><parameter>user /execute</parameter></parameters></execute></exists></checkserver></tasks>", RegexOptions.IgnoreCase);
        //                writeToLogFile("newinstall: " + lsNewInstall);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);

        //                lsNewInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsNewInstall, "<tasks>", @"<tasks><checkserver><exists><execute path=""change.exe"" windowstyle=""hidden""><parameters><parameter>user /install</parameter></parameters></execute></exists></checkserver>", RegexOptions.IgnoreCase);
        //                lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", @"<checkserver><exists><execute path=""change.exe"" windowstyle=""hidden""><parameters><parameter>user /execute</parameter></parameters></execute></exists></checkserver></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);

        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopscomrefresh") == "enabled")
        //        {
        //            if (!lsDeployXMLContent.Contains("scom.mm.exe"))
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                writeToLogFile("oldinstall: " + lsOldInstall);
        //                string lsNewInstall = Regex.Replace(lsOldInstall, "<tasks>", @"<tasks><checkserver><exists><checkfile path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-s 60</parameter></parameters></execute></exists><notexists><checkfile path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-s 60</parameter></parameters></execute></exists></checkfile></notexists></checkfile></exists></checkserver>", RegexOptions.IgnoreCase);
        //                lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", @"<checkserver><exists><checkfile path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-d</parameter></parameters></execute></exists><notexists><checkfile path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-d</parameter></parameters></execute></exists></checkfile></notexists></checkfile></exists></checkserver></tasks>", RegexOptions.IgnoreCase);
        //                writeToLogFile("newinstall: " + lsNewInstall);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);

        //                lsNewInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsOldInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsNewInstall = Regex.Replace(lsOldInstall, "<tasks>", @"<tasks><checkserver><exists><checkfile path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-s 60</parameter></parameters></execute></exists><notexists><checkfile path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-s 60</parameter></parameters></execute></exists></checkfile></notexists></checkfile></exists></checkserver>", RegexOptions.IgnoreCase);
        //                lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", @"<checkserver><exists><checkfile path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-d</parameter></parameters></execute></exists><notexists><checkfile path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><exists><execute path=""%ProgramFiles(x86)%\SCOMMaintenance\scom.mm.exe""><parameters><parameter>-d</parameter></parameters></execute></exists></checkfile></notexists></checkfile></exists></checkserver></tasks>", RegexOptions.IgnoreCase);
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);

        //            }
        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopmsihandling") == "enhanced")
        //        {
        //            if (!lsDeployXMLContent.Contains("1602"))
        //            {
        //                lsDeployXMLContent = lsDeployXMLContent.Replace("</msiexec>", @"<returnvalues><returnvalue value=""1602""><!-- Files are in use --><abort error=""1602"" /></returnvalue></returnvalues></msiexec>");
        //            }
        //        }

        //        writeToLogFile("customertemplate is: [" + lsCustomerTemplate + "]");

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shopinstallreview") == "enabled")
        //        {
        //            writeToLogFile("now replacing:");

        //            string lsNewInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //            string lsOldInstall = lsNewInstall;

        //            writeToLogFile("lsOldInstall:" + lsOldInstall);

        //            string lsTempInstall = "";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<exists>";
        //            lsTempInstall += @"<abort exitcode=""0"" />";
        //            lsTempInstall += @"</exists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<exists>";
        //            lsTempInstall += @"<abort exitcode=""0"" />";
        //            lsTempInstall += @"</exists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsTempInstall += @"<abort exitcode=""9999"" />";
        //            lsNewInstall = lsNewInstall.Replace("</tasks>", lsTempInstall + "</tasks>");

        //            writeToLogFile("lsNewInstall:" + lsNewInstall);

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);


        //            string lsNewUninstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //            string lsOldUninstall = lsNewUninstall;
        //            lsTempInstall = "";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<exists>";
        //            lsTempInstall += @"<abort exitcode=""9999"" />";
        //            lsTempInstall += @"</exists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<exists>";
        //            lsTempInstall += @"<abort exitcode=""9999"" />";
        //            lsTempInstall += @"</exists>";
        //            lsTempInstall += @"</checkregistry>";

        //            lsNewUninstall = lsNewUninstall.Replace("</tasks>", lsTempInstall + "</tasks>");

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldUninstall, lsNewUninstall);


        //        }

        //        if (lsCustomerTemplate == "kssg")
        //        //if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "deployment").ToLower() == "uem")
        //        {

        //            writeToLogFile("now replacing:");

        //            string lsNewInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //            string lsOldInstall = lsNewInstall;

        //            writeToLogFile("lsOldInstall:" + lsOldInstall);

        //            string lsTempInstall = "";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<exists>";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""DisplayName"" value=""SSC-IT_" + lsResolvedDownloadName + @""" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""UninstallString"" value=""SSC-IT_" + lsResolvedDownloadName + @""" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""Publisher"" value=""SSC-IT"" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""SystemComponent"" value=""1"" type=""REG_DWORD"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""InstallDate"" value=""%DateTime%"" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""InstallSource"" value=""%CurrentFolder%"" type=""REG_SZ"" />";
        //            lsTempInstall += @"</exists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<exists>";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""DisplayName"" value=""SSC-IT_" + lsResolvedDownloadName + @""" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""UninstallString"" value=""SSC-IT_" + lsResolvedDownloadName + @""" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""Publisher"" value=""SSC-IT"" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""SystemComponent"" value=""1"" type=""REG_DWORD"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""InstallDate"" value=""%DateTime%"" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" name=""InstallSource"" value=""%CurrentFolder%"" type=""REG_SZ"" />";
        //            lsTempInstall += @"</exists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsNewInstall = lsNewInstall.Replace("</tasks>", lsTempInstall + "</tasks>");

        //            writeToLogFile("lsNewInstall:" + lsNewInstall);

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);


        //            string lsNewUninstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //            string lsOldUninstall = lsNewUninstall;
        //            lsTempInstall = "";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<notexists>";
        //            lsTempInstall += @"<removeregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" />";
        //            lsTempInstall += @"</notexists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsTempInstall += @"<checkregistry path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" + lsUninstallKey + @""">";
        //            lsTempInstall += @"<notexists>";
        //            lsTempInstall += @"<removeregkey path=""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\SSC-IT_" + lsResolvedDownloadName + @""" />";
        //            lsTempInstall += @"</notexists>";
        //            lsTempInstall += @"</checkregistry>";
        //            lsNewUninstall = lsNewUninstall.Replace("</tasks>", lsTempInstall + "</tasks>");

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldUninstall, lsNewUninstall);




        //            //lsNewUninstall = Regex.Replace(lsNewUninstall, "</tasks>", "", RegexOptions.IgnoreCase);


        //            //string lsTempUninstall = "";
        //            //lsTempUninstall += @"<removeregkey path=""HKLM\SOFTWARE\SSC-IT"" name=""" + lsResolvedDownloadName + @""" /> ";

        //            //lsNewUninstall += lsTempUninstall;
        //            //lsNewUninstall += @"</tasks>";

        //            //lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldUninstall, lsNewUninstall);

        //        }

        //        if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "deployment").ToLower() == "sitios")
        //        {
        //            string lsNewInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //            string lsOldInstall = lsNewInstall;
        //            lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", "", RegexOptions.IgnoreCase);

        //            string lsUGSNumber = "s10000";
        //            string lsUGSRevision = "1.0";
        //            foreach (DataRow loRow in loParameterTable.Rows)
        //            {
        //                if (loRow["name"].ToString().ToLower().Contains("ugsnumber"))
        //                {
        //                    lsUGSNumber = loRow["value"].ToString();
        //                }
        //                if (loRow["name"].ToString().ToLower().Contains("ugsrevision"))
        //                {
        //                    lsUGSRevision = loRow["value"].ToString();
        //                }
        //            }

        //            string lsTempInstall = "";


        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Revision""  value=""" + lsUGSRevision + @""" type=""REG_SZ"" /> ";
        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""ProductCode"" value=""" + lsUninstallKey + @"""  type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Product""  value=""" + lsProduct + @""" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Version""  value=""" + lsReleaseName + @""" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Vendor""  value=""" + lsManufacturer + @""" type=""REG_SZ"" />";
        //            if (lsUninstallKey.StartsWith("{"))
        //            {
        //                lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Uninstall""  value=""msiexec.exe /x " + lsUninstallKey + @""" type=""REG_SZ"" />";
        //                lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Repair""  value=""msiexec.exe /i " + lsUninstallKey + @" REINSTALL=ALL REINSTALLMODE=omus"" type=""REG_SZ"" />";
        //            }
        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Date""  value=""%Date% - %Time%"" type=""REG_SZ"" />";
        //            lsTempInstall += @"<addregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" name=""Language""  value=""" + lsRealLanguages + @""" type=""REG_SZ"" />";

        //            lsNewInstall += lsTempInstall;
        //            lsNewInstall += @"</tasks>";

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);


        //            string lsNewUninstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //            string lsOldUninstall = lsNewUninstall;
        //            lsNewUninstall = Regex.Replace(lsNewUninstall, "</tasks>", "", RegexOptions.IgnoreCase);


        //            string lsTempUninstall = "";
        //            lsTempUninstall += @"<removeregkey path=""HKLM\SYSTEM\UGS\" + lsUGSNumber + @""" /> ";

        //            lsNewUninstall += lsTempUninstall;
        //            lsNewUninstall += @"</tasks>";

        //            lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldUninstall, lsNewUninstall);

        //        }


        //        if (!lsDeployXMLContent.Contains(@"Raiffeisen\_PackageInfo\_Wrapper"))
        //        {
        //            if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "deployment").ToLower() == "sccmadvanced" && lsReleaseId != "")
        //            {
        //                string lsUninstallKeys = FindBetween(lsDeployXMLContent, "SCCMOriginalProductCodes=", "-->").Trim();
        //                if (lsUninstallKeys != "")
        //                {
        //                    writeToLogFile("uninstallkeys2: " + lsUninstallKeys);
        //                }
        //                else
        //                {
        //                    writeToLogFile("error: no uninstall keys");
        //                }

        //                string lsNewInstall = FindBetween(lsDeployXMLContent, "<install>", "</install>");
        //                string lsOldInstall = lsNewInstall;
        //                lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", "", RegexOptions.IgnoreCase);
        //                bool lbDoneSomething = false;

        //                string lsTempInstall = "";
        //                string lsMyReleaseId = "00000000-0000-0000-0086-0000" + lsRaiffeisenPackageId;
        //                if (lsArchitectures.Contains("64"))
        //                {
        //                    lsMyReleaseId = "00000000-0000-0000-0064-0000" + lsRaiffeisenPackageId;
        //                }

        //                if (lsUninstallKeys != "")
        //                {

        //                    foreach (string lsProductCode in lsUninstallKeys.Split(Convert.ToChar(";")))
        //                    {
        //                        lbDoneSomething = true;
        //                        string lsMyProductCode = lsProductCode.Trim();



        //                        if (lsTempInstall == "")
        //                        {
        //                            lsTempInstall += @"<checkmsiinstallation package=""" + lsMyProductCode + @""">";
        //                            lsTempInstall += @"<exists>";

        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""PackageID""  value=""" + lsRaiffeisenPackageId + @""" type=""REG_SZ"" /> ";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""Manufacturer"" value=""" + lsManufacturer + @"""  type=""REG_SZ"" />";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductName""  value=""" + lsProduct + @""" type=""REG_SZ"" />";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductVersion""  value=""" + lsVersion + @""" type=""REG_SZ"" />";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ApplicationName""  value=""" + lsProduct + " - " + lsRaiffeisenPackageId + @""" type=""REG_SZ"" />";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductRelease""  value=""" + lsReleaseName + @""" type=""REG_SZ"" />";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallDate""  value=""%Date%"" type=""REG_SZ"" />";
        //                            lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallTime""  value=""%Time%"" type=""REG_SZ"" />";

        //                            lsTempInstall += @"</exists>";
        //                            lsTempInstall += @"<notexists></notexists>";
        //                            lsTempInstall += @"</checkmsiinstallation>";
        //                        }
        //                        else
        //                        {
        //                            string lsNewTempInstall = "";

        //                            lsNewTempInstall += @"<checkmsiinstallation package=""" + lsMyProductCode + @""">";
        //                            lsNewTempInstall += @"<exists>";

        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""PackageID""  value=""" + lsRaiffeisenPackageId + @""" type=""REG_SZ"" /> ";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""Manufacturer"" value=""" + lsManufacturer + @"""  type=""REG_SZ"" />";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductName""  value=""" + lsProduct + @""" type=""REG_SZ"" />";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductVersion""  value=""" + lsVersion + @""" type=""REG_SZ"" />";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ApplicationName""  value=""" + lsProduct + " - " + lsRaiffeisenPackageId + @""" type=""REG_SZ"" />";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductRelease""  value=""" + lsReleaseName + @""" type=""REG_SZ"" />";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallDate""  value=""%Date%"" type=""REG_SZ"" />";
        //                            lsNewTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallTime""  value=""%Time%"" type=""REG_SZ"" />";

        //                            lsNewTempInstall += @"</exists>";
        //                            lsNewTempInstall += @"<notexists></notexists>";
        //                            lsNewTempInstall += @"</checkmsiinstallation>";


        //                            lsTempInstall = lsTempInstall.Replace("<notexists></notexists>", "<notexists>" + lsNewTempInstall + "</notexists>");
        //                        }

        //                    }
        //                }
        //                else
        //                {
        //                    if (lsUninstallKey != "")
        //                    {
        //                        lsTempInstall += @"<checkmsiinstallation package=""" + lsUninstallKey + @""">";
        //                        lsTempInstall += @"<exists>";

        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""PackageID""  value=""" + lsRaiffeisenPackageId + @""" type=""REG_SZ"" /> ";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""Manufacturer"" value=""" + lsManufacturer + @"""  type=""REG_SZ"" />";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductName""  value=""" + lsProduct + @""" type=""REG_SZ"" />";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductVersion""  value=""" + lsVersion + @""" type=""REG_SZ"" />";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ApplicationName""  value=""" + lsProduct + " - " + lsRaiffeisenPackageId + @""" type=""REG_SZ"" />";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductRelease""  value=""" + lsReleaseName + @""" type=""REG_SZ"" />";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallDate""  value=""%Date%"" type=""REG_SZ"" />";
        //                        lsTempInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallTime""  value=""%Time%"" type=""REG_SZ"" />";

        //                        lsTempInstall += @"</exists>";
        //                        lsTempInstall += @"<notexists></notexists>";
        //                        lsTempInstall += @"</checkmsiinstallation>";

        //                        lbDoneSomething = true;
        //                    }
        //                }


        //                lsTempInstall = lsTempInstall.Replace("<notexists></notexists>", @"<notexists><removeregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}\"" /><abort exitcode=""9999"" /></notexists>");

        //                lsNewInstall += lsTempInstall;

        //                if (!lbDoneSomething)
        //                {
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""PackageID""  value=""" + lsRaiffeisenPackageId + @""" type=""REG_SZ"" /> ";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""Manufacturer"" value=""" + lsManufacturer + @"""  type=""REG_SZ"" />";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ApplicationName""  value=""" + lsProduct + " - " + lsRaiffeisenPackageId + @""" type=""REG_SZ"" />";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductName""  value=""" + lsProduct + @""" type=""REG_SZ"" />";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductVersion""  value=""" + lsVersion + @""" type=""REG_SZ"" />";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""ProductRelease""  value=""" + lsReleaseName + @""" type=""REG_SZ"" />";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallDate""  value=""%Date%"" type=""REG_SZ"" />";
        //                    lsNewInstall += @"<addregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}"" name=""InstallTime""  value=""%Time%"" type=""REG_SZ"" />";

        //                }
        //                lsNewInstall += @"</tasks>";
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);

        //                lsNewInstall = FindBetween(lsDeployXMLContent, "<uninstall>", "</uninstall>");
        //                lsOldInstall = lsNewInstall;
        //                lsNewInstall = Regex.Replace(lsNewInstall, "</tasks>", "", RegexOptions.IgnoreCase);
        //                lsNewInstall += @"<!-- remove Wrapper GUID -->";
        //                lsNewInstall += @"<removeregkey path=""HKLM\Software\Raiffeisen\_PackageInfo\_Wrapper\PKG_{" + lsMyReleaseId + @"}\"" />";
        //                lsNewInstall += @"</tasks>";
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }
        //        }

        //        if (!lsDeployXMLContent.Contains(@"Raiffeisen\_PackageInfo\_Wrapper"))
        //        {
        //            if (clsConvertEngine.GetValueFromRequestString(lsRequestString, "shoprepair").ToLower() == "disabled")
        //            {
        //                string lsOldInstall = FindBetween(lsDeployXMLContent, "<repair>", "</repair>");
        //                string lsNewInstall = @"<tasks><abort exitcode=""0"" /></tasks>";
        //                lsDeployXMLContent = lsDeployXMLContent.Replace(lsOldInstall, lsNewInstall);
        //            }
        //        }

        //        try
        //        {
        //            if (loParameterTable.Columns.Count > 0)
        //            {
        //                foreach (DataRow loParameterRow in loParameterTable.Select("custom='true'"))
        //                {
        //                    lsDeployXMLContent += @"<!-- " + loParameterRow["name"].ToString() + " = " + loParameterRow["value"] + " -->";
        //                }
        //            }
        //        }
        //        catch { }

        //    }
        //    catch (Exception dummy) { writeToLogFile("error2: " + dummy.Message); }
        //    writeToLogFile("now lsdeployxml is " + lsDeployXMLContent);


        //    try
        //    {
        //        XmlDocument xDocument = new XmlDocument();
        //        xDocument.Load(new XmlTextReader(new StringReader(lsDeployXMLContent)));
        //        lsDeployXMLContent = Beautify(xDocument);
        //        lsDeployXMLContent = lsDeployXMLContent.Replace("<languages></languages>","");
        //    }
        //    catch { }

        //    try
        //    {
        //        XmlDocument xDocument = new XmlDocument();
        //        xDocument.Load(new XmlTextReader(new StringReader(lsDeployXMLContent)));
        //        lsDeployXMLContent = Beautify(xDocument);
        //    }
        //    catch { }

        //    lsDeployXMLContent = lsDeployXMLContent.Replace("utf-16", "utf-8");

        //    return lsDeployXMLContent;

        //}



        //public static string CreateDeliveriesSetupExeConfig2(string lsShopLog, string lsShopLogScriptName, string lsShopLogExeSplit, string lsShopLogExeName, string lsShopActiveSetup, string lsShopLogScriptSplit)
        //{


            
        //}

        private static string Beautify(XmlDocument doc)
        {
            StringBuilder sb = new StringBuilder();
            XmlWriterSettings settings = new XmlWriterSettings
            {
                Indent = true,
                IndentChars = "  ",
                NewLineChars = "\r\n",
                NewLineHandling = NewLineHandling.Replace
            };
            using (XmlWriter writer = XmlWriter.Create(sb, settings))
            {
                doc.Save(writer);
            }
            string lsReturn = sb.ToString();
            lsReturn = lsReturn.Replace(@"""utf-16""", @"""utf-8""");
            return lsReturn;
        }


        public static string GetValueFromRequestString(string lsRequestString, string lsMyName)
        {
            string lsValue = "";

            writeToLogFile("getvaluefromre: " + lsMyName);

            foreach (string lsRequest in lsRequestString.Replace("&amp;", "&").Split(Convert.ToChar("&")))
            {


                try
                {

                    {


                        //settings
                        {
                            if (lsRequest.IndexOf("=") > 0)
                            {
                                string lsSettingsName = "";
                                string lsSettingsValue = "";
                                try
                                {
                                    lsSettingsName = lsRequest.Substring(0, lsRequest.IndexOf("="));
                                    lsSettingsValue = lsRequest.Substring(lsRequest.IndexOf("=") + 1);
                                }
                                catch { }
                                lsSettingsValue = HttpUtility.HtmlDecode(lsSettingsValue);
                                lsSettingsValue = lsSettingsValue.Replace("%5C", @"\");
                                lsSettingsValue = lsSettingsValue.Replace("%20", " ");
                                lsSettingsValue = lsSettingsValue.Replace("%25", "%");
                                lsSettingsValue = lsSettingsValue.Replace("%27", "'");
                                lsSettingsValue = lsSettingsValue.Replace("%5B", "[");
                                lsSettingsValue = lsSettingsValue.Replace("%5D", "]");
                                lsSettingsValue = lsSettingsValue.Replace("%7C", "|");
                                lsSettingsValue = lsSettingsValue.Replace("%7c", "|");
                                lsSettingsValue = lsSettingsValue.Replace("%7B", "{");
                                lsSettingsValue = lsSettingsValue.Replace("%7b", "{");
                                lsSettingsValue = lsSettingsValue.Replace("%7D", "}");
                                lsSettingsValue = lsSettingsValue.Replace("%7d", "}");
                                if (lsSettingsName.ToLower() == lsMyName.ToLower())
                                {
                                    lsValue = lsSettingsValue;
                                    break;
                                }
                                if (lsMyName == "startmenustructure")
                                {
                                    if (lsSettingsName.ToLower().EndsWith("startmenustructure"))
                                    {
                                        lsValue = lsSettingsValue;
                                        break;
                                    }
                                }
                                //if (lsSettingsName.ToLower().Contains(lsMyName.ToLower()))
                                //{
                                //    lsValue = lsSettingsValue;
                                //    break;
                                //}

                            }
                        }
                    }
                }
                catch (Exception ex2) { writeToLogFile("getvaluefromre: " + ex2.Message); }
            }

            writeToLogFile("getvaluefromre dome: " + lsValue);

            return lsValue;
        }

        public static string FindBetween(string lsLine, string lsStart, string lsEnd)
        {
            int liCounter = 0;
            int liStartChar = 0;
            string lsReturn = "";
            bool lbInVariable = false;
            if (lsLine.Length > 0)
            {
                do
                {
                    if (lsLine.Substring(liCounter, lsStart.Length) == lsStart)
                    {
                        if (!lbInVariable)
                        {
                            liStartChar = liCounter;
                            lbInVariable = true;
                            liCounter += lsStart.Length;
                        }
                    }
                    if (lsLine.Substring(liCounter, lsEnd.Length) == lsEnd)
                    {
                        if (lbInVariable)
                        {
                            lsReturn = lsLine.Substring(liStartChar + lsStart.Length, liCounter - liStartChar - lsStart.Length);
                            break;
                        }
                        lbInVariable = false;
                    }
                    liCounter += 1;
                } while (liCounter < lsLine.Length - lsStart.Length);
            }
            return lsReturn;
        }


        public static void writeToLogFile(string logMessage)
        {

            string strLogMessage = string.Empty;
            string strLogFile = Environment.ExpandEnvironmentVariables(@"%temp%\convertengine.log");
            StreamWriter swLog;

            strLogMessage = string.Format("{0}: {1}", DateTime.Now, logMessage);

            try
            {
                if (!File.Exists(strLogFile))
                {
                    swLog = new StreamWriter(strLogFile);
                }
                else
                {
                    swLog = File.AppendText(strLogFile);
                }

                swLog.WriteLine(strLogMessage);

                swLog.Close();
            }
            catch { }





        }


        public static string getAppVFileRoot(string lsRoot)
        {
            string lsReturn = "";
            lsReturn = lsRoot;
            if (lsRoot != "")
            {
                lsReturn = "[{" + lsRoot + "}]";
            }
            return lsReturn;
        }

        public static string getAppVRegistryRoot(string lsRoot)
        {
            string lsReturn = "";
            lsReturn = lsRoot;
            if (lsRoot == "HKCU")
            {
                lsReturn = @"REGISTRY\USER\[{AppVCurrentUserSID}]";
            }
            if (lsRoot == "HKCUC")
            {
                lsReturn = @"REGISTRY\USER\[{AppVCurrentUserSID}]_CLASSES";
            }
            if (lsRoot == "HKLM")
            {
                lsReturn = @"REGISTRY\MACHINE";
            }
            if (lsRoot == "HKU")
            {
                lsReturn = @"REGISTRY\USER";
            }
            if (lsRoot == "")
            {
                lsReturn = @"REGISTRY";
            }
            return lsReturn;
        }


        public static void GetSetupParameters(string lsCommand, string lsParam, ref string lsEXEFile, ref string lsParameters)
        {
            lsEXEFile = lsCommand;
            lsParameters = lsParam;
        }

        public static string CreateVBScripts(string lsType, string lsDeployXML, string lsManufacturer, string lsProduct, string lsVersion, string lsAppVPackageId, string lsAppVVersionId)
        {
            writeToLogFile("createvbscripts");

            writeToLogFile("appvpackageid: " + lsAppVPackageId);

            DataTable loTable = ConvertXMLToDataTable(lsType, lsDeployXML, false);

            writeToLogFile("rows: " + loTable.Rows.Count.ToString());

            StringBuilder loStringBuilder = new StringBuilder();
            if (loTable.Rows.Count > 0)
            {
                loStringBuilder.AppendLine(@"'Manufacturer: " + lsManufacturer);
                loStringBuilder.AppendLine(@"'Product:      " + lsProduct);
                loStringBuilder.AppendLine(@"'Version:      " + lsVersion);
                loStringBuilder.AppendLine(@"'Date:         " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Option Explicit");
                loStringBuilder.AppendLine(@"Dim goFSO, goWshShell, goRegistry, goApplication, goWMI, giOSLang");
                loStringBuilder.AppendLine(@"Set goWshShell = CreateObject(""WScript.Shell"")");
                loStringBuilder.AppendLine(@"Set goApplication = CreateObject(""Shell.Application"")");
                loStringBuilder.AppendLine(@"Set goFSO      = CreateObject(""Scripting.FileSystemObject"")");
                loStringBuilder.AppendLine(@"Set goRegistry = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")");
                loStringBuilder.AppendLine(@"Set goWMI = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Const HKEY_CURRENT_USER =  &H80000001");
                loStringBuilder.AppendLine(@"Const HKEY_LOCAL_MACHINE = &H80000002");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Dim gsUserSID, gsUser");
                loStringBuilder.AppendLine(@"gsUser = CreateObject(""WScript.Network"").UserName");
                loStringBuilder.AppendLine(@"gsUserSID = GetSIDFromUser(gsUser)");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Dim goOperatingSystems, goOperatingSystem");
                loStringBuilder.AppendLine(@"Set goOperatingSystems = goWMI.ExecQuery(""Select * from Win32_OperatingSystem"")");
                loStringBuilder.AppendLine(@"For Each goOperatingSystem in goOperatingSystems");
                loStringBuilder.AppendLine(@"  giOSLang = goOperatingSystem.OSLanguage");
                loStringBuilder.AppendLine(@"Next");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Dim goFilesInZip");
                loStringBuilder.AppendLine(@"Dim goTextFile, gsTextFile, gsLine");
                loStringBuilder.AppendLine(@"");

                loStringBuilder.AppendLine(@"goWshShell.CurrentDirectory = goFSO.GetParentFolderName(WScript.ScriptFullName)");
                loStringBuilder.AppendLine(@"");

                DataTable loVarTable = new DataTable();
                loVarTable.Columns.Add("name", typeof(string));
                loVarTable.Columns.Add("value", typeof(string));

                foreach (DataRow loRow in loTable.Rows)
                {
                    string lsInherit = "";
                    for (int i = 1; i < Convert.ToInt32(loRow["level"].ToString()); i++)
                    {
                        lsInherit = lsInherit + "  ";
                    }
                    switch (loRow["actiontype"].ToString().ToLower())
                    {
                        case "launchprocess":
                            {
                                string lsExeAndParameters = @"ExpandEnvironmentStringsEx(""""""" + loRow["command"].ToString() + @""""" " + loRow["param"].ToString().Replace(@"""", @"""""") + @""")";
                                if (loRow["param"].ToString() == "")
                                {
                                    lsExeAndParameters = @"ExpandEnvironmentStringsEx(""""""" + loRow["command"].ToString() + @""""""")";
                                }
                                string lsWindowStyle = "1";
                                if (loRow["options"].ToString().ToLower() == "hidden")
                                {
                                    lsWindowStyle = "0";
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run " + lsExeAndParameters + ", " + lsWindowStyle + ", true");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            }
                            break;
                        case "launchprocessnowait":
                            {
                                string lsExeAndParameters = @"ExpandEnvironmentStringsEx(""""""" + loRow["command"].ToString() + @""""" " + loRow["param"].ToString().Replace(@"""", @"""""") + @""")";
                                if (loRow["param"].ToString() == "")
                                {
                                    lsExeAndParameters = @"ExpandEnvironmentStringsEx(""""""" + loRow["command"].ToString() + @""""""")";
                                }
                                string lsWindowStyle = "1";
                                if (loRow["options"].ToString().ToLower() == "hidden")
                                {
                                    lsWindowStyle = "0";
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run " + lsExeAndParameters + ", " + lsWindowStyle + ", false");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            }
                            break;
                        case "msiexec":
                            if (loRow["command"].ToString().ToLower() == "/i")
                            {
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run ExpandEnvironmentStringsEx(""msiexec /i " + loRow["param"].ToString().Replace(@"""", @"""""") + @"""), 0, true");
                            }
                            else
                            {
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run ExpandEnvironmentStringsEx(""msiexec /x " + loRow["param"].ToString().Replace(@"""", @"""""") + @"""), 0, true");
                            }
                            break;
                        case "killprocess":
                            {
                                string lsCommand = loRow["command"].ToString();
                                if (!lsCommand.ToLower().EndsWith(".exe"))
                                {
                                    lsCommand = lsCommand + ".exe";
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run ""TASKKILL /F /IM " + lsCommand + @""",0, true");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            }
                            break;
                        case "checklanguagecode":
                            {
                                string lsCommand = loRow["command"].ToString();
                                loStringBuilder.AppendLine(lsInherit + @"If giOSLang=" + loRow["command"].ToString() + @" Then");
                            }
                            break;
                        case "sleep":
                            int liSeconds = 5;
                            try
                            {
                                liSeconds = Convert.ToInt32(loRow["param"].ToString());
                            }
                            catch { }
                            loStringBuilder.AppendLine(lsInherit + @"WScript.Sleep " + liSeconds.ToString() + "000");
                            break;
                        case "setvariable":
                            if (!loStringBuilder.ToString().Contains(@"Dim custom" + loRow["command"].ToString()))
                            {
                                loStringBuilder.AppendLine(lsInherit + @"Dim custom" + loRow["command"].ToString());
                            }
                            loStringBuilder.AppendLine(lsInherit + @"custom" + loRow["command"].ToString() + @"=""" + loRow["param"].ToString() + @"""");

                            if (loVarTable.Select("name='custom" + loRow["command"].ToString() + "'").Length == 0)
                            {
                                DataRow loNewRow = loVarTable.NewRow();
                                loNewRow["name"] = loRow["command"].ToString();
                                loNewRow["value"] = "";
                                loVarTable.Rows.Add(loNewRow);
                            }

                            break;
                        case "getvariablefromregistry":
                            {
                                string lsMyPath = "";
                                string lsMyRootSz = "HKEY_LOCAL_MACHINE";
                                try
                                {
                                    lsMyPath = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                catch { }
                                string lsName = "";
                                try
                                {
                                    lsName = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                if (lsMyPath.ToUpper().StartsWith("HKLM"))
                                {
                                    lsMyPath = lsMyPath.Substring(5);
                                }
                                if (lsMyPath.ToUpper().StartsWith("HKCR"))
                                {
                                    lsMyPath = lsMyPath.Substring(5);
                                    lsMyRootSz = "HKEY_CLASSES_ROOT";
                                }
                                if (lsMyPath.ToUpper().StartsWith("HKCU"))
                                {
                                    lsMyPath = lsMyPath.Substring(5);
                                    lsMyRootSz = "HKEY_CURRENT_USER";
                                }
                                if (!loStringBuilder.ToString().Contains(@"Dim custom" + loRow["command"].ToString()))
                                {
                                    loStringBuilder.AppendLine(lsInherit + @"Dim custom" + loRow["command"].ToString());
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"custom" + loRow["command"].ToString() + @" = """"");
                                loStringBuilder.AppendLine(lsInherit + @"custom" + loRow["command"].ToString() + @" = goWshShell.RegRead(""" + lsMyRootSz + @"\" + lsMyPath + @"\" + lsName + @""")");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");

                                if (loVarTable.Select("name='custom" + loRow["command"].ToString() + "'").Length == 0)
                                {
                                    DataRow loNewRow = loVarTable.NewRow();
                                    loNewRow["name"] = loRow["command"].ToString();
                                    loNewRow["value"] = "";
                                    loVarTable.Rows.Add(loNewRow);
                                }
                            }
                            break;
                        case "copyfile":
                            loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                            loStringBuilder.AppendLine(lsInherit + @"goFSO.CopyFile ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @"""), ExpandEnvironmentStringsEx(""" + loRow["param"].ToString() + @"""), true");
                            loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            break;
                        case "copyfolder":
                            loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                            loStringBuilder.AppendLine(lsInherit + @"goFSO.CreateFolder ExpandEnvironmentStringsEx(""" + loRow["param"].ToString() + @""")");
                            loStringBuilder.AppendLine(lsInherit + @"goFSO.CopyFolder ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @"""), ExpandEnvironmentStringsEx(""" + loRow["param"].ToString() + @"""), true");
                            loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            break;
                        case "expandfolder":
                            loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                            loStringBuilder.AppendLine(lsInherit + @"Set goFilesInZip = goApplication.NameSpace(ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @""").Items()");
                            loStringBuilder.AppendLine(lsInherit + @"goApplication.NameSpace(ExpandEnvironmentStringsEx(""" + loRow["param"].ToString() + @""")).CopyHere goFilesInZip, 16");
                            loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            break;
                        case "addfolder":
                            loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                            loStringBuilder.AppendLine(lsInherit + @"goFSO.CreateFolder ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @""")");
                            loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            break;
                        case "removefile":
                            loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                            loStringBuilder.AppendLine(lsInherit + @"goFSO.DeleteFile ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @"""), true");
                            loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            break;
                        case "removefolder":
                            loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                            loStringBuilder.AppendLine(lsInherit + @"goFSO.DeleteFolder ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @"""), true");
                            loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            break;
                        case "addfilepermission":
                            {
                                string lsPath = "";
                                string lsPermission = "";
                                string lsAccount = "";
                                string lsReplace = "";
                                string lsInheritance = "";
                                try
                                {
                                    lsPath = loRow["command"].ToString();
                                }
                                catch { }
                                try
                                {
                                    lsPermission = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                catch { }
                                try
                                {
                                    lsAccount = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                try
                                {
                                    lsReplace = loRow["param"].ToString().Split(Convert.ToChar("|"))[2];
                                }
                                catch { }
                                try
                                {
                                    lsInheritance = loRow["param"].ToString().Split(Convert.ToChar("|"))[3];
                                }
                                catch { }
                                if (lsType == "initialize" && lsAppVPackageId != "")
                                {
                                    lsPath = lsPath.Replace(@"%ProgramData%\", @"%LOCALAPPDATA%\Microsoft\AppV\Client\VFS\" + lsAppVPackageId + @"\Common AppDataS\");
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run ExpandEnvironmentStringsEx(""""""icacls.exe"""" """"" + lsPath + @""""" /grant:r """"Jeder"""":(OI)(CI)M /c /t /q""), true");
                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.Run ExpandEnvironmentStringsEx(""""""icacls.exe"""" """"" + lsPath + @""""" /grant:r """"Jeder"""":(OI)(CI)M /c /t /q""), true");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            }
                            break;
                        case "checkvariable":
                            {
                                loStringBuilder.AppendLine(lsInherit + @"If custom" + loRow["command"].ToString() + @"=""" + loRow["param"].ToString() + @""" Then");
                            }
                            break;
                        case "checkregistry":
                            {
                                string lsVariableName = "var" + Guid.NewGuid().ToString().Replace("-", "").ToLower();
                                string lsMyPath = loRow["path"].ToString();
                                string lsMyName = loRow["param"].ToString();
                                string lsMyValue = loRow["command"].ToString();
                                //string lsMyRoot = "&H80000002";
                                string lsMyRootSz = "HKEY_LOCAL_MACHINE";
                                if (lsMyPath.ToUpper().StartsWith("HKLM"))
                                {
                                    lsMyPath = lsMyPath.Substring(5);
                                }
                                if (lsMyPath.ToUpper().StartsWith("HKCR"))
                                {
                                    lsMyPath = lsMyPath.Substring(5);
                                    //lsMyRoot = "&H80000000";
                                    lsMyRootSz = "HKEY_CLASSES_ROOT";
                                }
                                if (lsMyPath.ToUpper().StartsWith("HKCU"))
                                {
                                    lsMyPath = lsMyPath.Substring(5);
                                    //lsMyRoot = "&H80000001";
                                    lsMyRootSz = "HKEY_CURRENT_USER";
                                }
                                loStringBuilder.AppendLine(lsInherit + @"Dim " + lsVariableName);
                                loStringBuilder.AppendLine(lsInherit + lsVariableName + @"=""""");

                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + lsVariableName + @" = goWshShell.RegRead(""" + lsMyRootSz + @"\" + lsMyPath + @"\" + lsMyName + @""")");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");


                                switch (loRow["condition"].ToString())
                                {
                                    case "notexists":
                                        loStringBuilder.AppendLine(lsInherit + @"If lcase(" + lsVariableName + @")="""" Then");
                                        break;
                                    default:
                                        if (lsMyValue == "")
                                        {
                                            loStringBuilder.AppendLine(lsInherit + @"If lcase(" + lsVariableName + @")<>"""" Then");
                                        }
                                        else
                                        {
                                            loStringBuilder.AppendLine(lsInherit + @"If lcase(" + lsVariableName + @")=""" + lsMyValue.ToLower() + @""" Then");
                                        }
                                        break;
                                }
                            }
                            break;
                        case "abort":
                            loStringBuilder.AppendLine(lsInherit + @"WScript.Quit 0");
                            break;
                        case "addregkey":
                            {
                                string lsRoot = "HKEY_LOCAL_MACHINE";
                                string lsPath = loRow["command"].ToString();
                                string lsName = "";
                                string lsMyType = "";
                                string lsValue = "";
                                try
                                {
                                    lsPath = lsPath.Substring(lsPath.IndexOf(@"\") + 1);
                                }
                                catch { }
                                try
                                {
                                    lsPath = lsPath.Substring(0, lsPath.IndexOf(Convert.ToChar("|")));
                                }
                                catch { }
                                try
                                {
                                    lsName = loRow["command"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                if (loRow["command"].ToString().ToUpper().StartsWith("HKCU"))
                                {
                                    lsRoot = "HKEY_CURRENT_USER";
                                }
                                if (loRow["command"].ToString().ToUpper().StartsWith("HKU"))
                                {
                                    lsRoot = "HKEY_USERS";
                                }
                                if (loRow["command"].ToString().ToUpper().StartsWith("HKCR"))
                                {
                                    lsRoot = "HKEY_CLASSES_ROOT";
                                }
                                try
                                {
                                    lsValue = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                try
                                {
                                    lsMyType = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                catch { }

                                bool lbHasVars = false;
                                foreach (DataRow loVarRow in loVarTable.Rows)
                                {
                                    if (lsValue.Contains("%" + loVarRow["name"].ToString() + "%"))
                                    {
                                        lsValue = lsValue.Replace("%" + loVarRow["name"].ToString() + "%", @""" & custom" + loVarRow["name"].ToString() + @" & """);
                                        lbHasVars = true;
                                    }
                                }
                                if (lsValue.StartsWith(@""" & "))
                                {
                                    try
                                    {
                                        lsValue = lsValue.Substring(4);
                                    }
                                    catch { }
                                }
                                if (lsValue.EndsWith(@" & """))
                                {
                                    try
                                    {
                                        lsValue = lsValue.Substring(0, lsValue.Length - 4);
                                    }
                                    catch { }
                                }
                                if (lbHasVars)
                                {
                                    if (lsValue.Contains(@""" & "))
                                    {
                                        if (!lsValue.StartsWith(@""""))
                                        {
                                            lsValue = @"""" + lsValue;
                                        }
                                    }
                                    if (lsValue.Contains(@" & """))
                                    {
                                        if (!lsValue.EndsWith(@""""))
                                        {
                                            lsValue = lsValue + @"""";
                                        }
                                    }
                                }
                                else
                                {
                                    lsValue = lsValue.Replace(@"""", @"""""");
                                    lsValue = @"""" + lsValue + @"""";
                                }

                                if (lsValue.StartsWith(@""""))
                                {
                                    lsValue = " ExpandEnvironmentStringsEx(" + lsValue + ")";
                                }

                                loStringBuilder.AppendLine(lsInherit + "On Error Resume Next");

                                writeToLogFile("check lsPath (" + lsPath + ") for slash ");

                                if (lsPath.Contains("/"))
                                {
                                    switch (lsMyType.ToUpper())
                                    {
                                        default:
                                            if (lsValue.ToLower().Contains("port%"))
                                            {
                                                loStringBuilder.AppendLine(lsInherit + @"goRegistry.SetStringValue " + lsRoot + @",""" + @"SOFTWARE\Microsoft\AppV\Client\Packages\" + lsAppVPackageId + @"\REGISTRY\USER\"" + gsUserSID + ""\" + lsPath + @""",""" + lsName + @""", " + lsValue + @"""");
                                            }
                                            else
                                            {
                                                loStringBuilder.AppendLine(lsInherit + @"goRegistry.SetStringValue " + lsRoot + @",""" + lsPath + @""",""" + lsName + @""", " + lsValue + @"""");
                                            }
                                            break;
                                    }

                                }
                                else
                                {
                                    switch (lsMyType.ToUpper())
                                    {
                                        case "REG_MULTI_SZ":
                                            try
                                            {
                                                string lsMyRoot = "&H80000002";
                                                if (lsRoot == "HKEY_CURRENT_USER")
                                                {
                                                    lsMyRoot = "&H80000001";
                                                }
                                                string lsArrayData = "Array(";
                                                foreach (string lsString in lsValue.Replace("[~]", "~").Split(Convert.ToChar("~")))
                                                {
                                                    lsArrayData += @"""" + lsString + @""",";
                                                }
                                                if (lsArrayData.EndsWith(","))
                                                {
                                                    lsArrayData = lsArrayData.Substring(0, lsArrayData.Length - 1);
                                                }
                                                lsArrayData += ")";
                                                loStringBuilder.AppendLine(lsInherit + @"goRegistry.SetMultiStringValue " + lsMyRoot + @", """ + lsPath + @""", """ + lsName + @""", " + lsArrayData);
                                            }
                                            catch { }
                                            break;
                                        default:
                                            if (lsName != "")
                                            {
                                                if (lsName.ToLower() == "(default)")
                                                {
                                                    loStringBuilder.AppendLine(lsInherit + @"goWshShell.RegWrite """ + lsRoot + @"\" + lsPath + @"\"", " + lsValue + @", """ + lsMyType + @"""");
                                                }
                                                else
                                                {
                                                    loStringBuilder.AppendLine(lsInherit + @"goWshShell.RegWrite """ + lsRoot + @"\" + lsPath + @"\" + lsName + @""", " + lsValue + @", """ + lsMyType + @"""");
                                                }
                                            }
                                            else
                                            {
                                                loStringBuilder.AppendLine(lsInherit + @"goWshShell.RegWrite """ + lsRoot + @"\" + lsPath + @""", " + lsValue + @", """ + lsMyType + @"""");
                                            }
                                            break;
                                    }
                                }

                                loStringBuilder.AppendLine(lsInherit + "On Error Goto 0");
                            }
                            break;
                        case "removeregkey":
                            {
                                string lsRoot = "HKEY_LOCAL_MACHINE";
                                string lsPath = loRow["command"].ToString();
                                string lsName = "";
                                try
                                {
                                    lsPath = lsPath.Substring(lsPath.IndexOf(@"\") + 1);
                                }
                                catch { }
                                try
                                {
                                    lsPath = lsPath.Substring(0, lsPath.IndexOf(Convert.ToChar("|")));
                                }
                                catch { }
                                try
                                {
                                    lsName = loRow["command"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }
                                if (loRow["command"].ToString().ToUpper().StartsWith("HKCU"))
                                {
                                    lsRoot = "HKEY_CURRENT_USER";
                                }
                                if (loRow["command"].ToString().ToUpper().StartsWith("HKU"))
                                {
                                    lsRoot = "HKEY_USERS";
                                }
                                if (loRow["command"].ToString().ToUpper().StartsWith("HKCR"))
                                {
                                    lsRoot = "HKEY_CLASSES_ROOT";
                                }
                                if (!lsPath.EndsWith(@"\"))
                                {
                                    lsPath = lsPath + @"\";
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                if (lsName == "")
                                {
                                    loStringBuilder.AppendLine(lsInherit + @"goWshShell.RegDelete """ + lsRoot + @"\" + lsPath + @"""");
                                }
                                else
                                {
                                    loStringBuilder.AppendLine(lsInherit + @"goWshShell.RegDelete """ + lsRoot + @"\" + lsPath + @"\" + lsName + @"""");
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error goto 0");
                            }
                            break;
                        case "removetext":
                            {
                                string lsText = loRow["param"].ToString();
                                if (loRow["param"].ToString().Split(Convert.ToChar("|")).Length > 0)
                                {
                                    lsText = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"gsTextFile = """"");
                                loStringBuilder.AppendLine(lsInherit + @"If goFSO.FileExists(goWshShell.ExpandEnvironmentStrings(""" + loRow["path"].ToString() + @""")) Then");
                                loStringBuilder.AppendLine(lsInherit + @"Set goTextFile = goFSO.OpenTextFile(goWshShell.ExpandEnvironmentStrings(""" + loRow["path"].ToString() + @"""),1)");
                                loStringBuilder.AppendLine(lsInherit + @"gsTextFile = goTextFile.ReadAll");
                                loStringBuilder.AppendLine(lsInherit + @"goTextFile.Close");
                                loStringBuilder.AppendLine(lsInherit + @"Set goTextFile = goFSO.OpenTextFile(goWshShell.ExpandEnvironmentStrings(""" + loRow["path"].ToString() + @"""),2)");
                                loStringBuilder.AppendLine(lsInherit + @"For Each gsLine in Split(gsTextFile,vbcrlf)");
                                loStringBuilder.AppendLine(lsInherit + @"  If Not Instr(1,lcase(gsLine),""" + lsText + @""",1) Then");
                                loStringBuilder.AppendLine(lsInherit + @"    goTextFile.WriteLine(gsLine)");
                                loStringBuilder.AppendLine(lsInherit + @"  End If");
                                loStringBuilder.AppendLine(lsInherit + @"Next");
                                loStringBuilder.AppendLine(lsInherit + @"goTextFile.Close");
                                loStringBuilder.AppendLine(lsInherit + @"End If");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                            }
                            break;
                        case "replacetext":
                            {
                                string lsMyGuid = Guid.NewGuid().ToString().Replace("-", "");
                                string lsSource = "";
                                string lsDestination = "";
                                try
                                {
                                    lsSource = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                                }
                                catch { }
                                try
                                {
                                    lsDestination = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                                }
                                catch { }

                                loStringBuilder.AppendLine(lsInherit + @"Dim gsNextLine" + lsMyGuid + @"");
                                loStringBuilder.AppendLine(lsInherit + @"Dim gsNewFile" + lsMyGuid + @"");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Resume Next");
                                loStringBuilder.AppendLine(lsInherit + @"If goFSO.FileExists(goWshShell.ExpandEnvironmentStrings(""" + loRow["command"].ToString() + @""")) Then");
                                loStringBuilder.AppendLine(lsInherit + @"Set goTextFile = goFSO.OpenTextFile(goWshShell.ExpandEnvironmentStrings(""" + loRow["command"].ToString() + @"""),1)");
                                loStringBuilder.AppendLine(lsInherit + @"Do Until goTextFile.AtEndOfStream");
                                loStringBuilder.AppendLine(lsInherit + @"    gsNextLine" + lsMyGuid + @" = goTextFile.Readline");
                                loStringBuilder.AppendLine(lsInherit + @"	 gsNextLine" + lsMyGuid + @" = Replace(gsNextLine" + lsMyGuid + @", ExpandEnvironmentStringsEx(""" + lsSource + @"""), ExpandEnvironmentStringsEx(""" + lsDestination + @"""))");
                                loStringBuilder.AppendLine(lsInherit + @"    gsNewFile" + lsMyGuid + @" = gsNewFile" + lsMyGuid + @" & gsNextLine" + lsMyGuid + @" & vbCrLf");
                                loStringBuilder.AppendLine(lsInherit + @"Loop");
                                loStringBuilder.AppendLine(lsInherit + @"goTextFile.Close");
                                loStringBuilder.AppendLine(lsInherit + @"Set goTextFile = goFSO.OpenTextFile(ExpandEnvironmentStringsEx(""" + loRow["command"].ToString() + @"""), 2)");
                                loStringBuilder.AppendLine(lsInherit + @"goTextFile.WriteLine gsNewFile" + lsMyGuid + @"");
                                loStringBuilder.AppendLine(lsInherit + @"goTextFile.Close");
                                loStringBuilder.AppendLine(lsInherit + @"Set goTextFile = Nothing");
                                loStringBuilder.AppendLine(lsInherit + @"On Error Goto 0");
                                loStringBuilder.AppendLine(lsInherit + @"End If");
                            }
                            break;
                        case "addtext":

                            break;
                        case "checkfile":
                            loStringBuilder.AppendLine(lsInherit + @"If goFSO.FileExists(ExpandEnvironmentStringsEx(""" + loRow["path"].ToString() + @""")) Then");
                            break;
                        case "checkarchitecture":
                            switch (loRow["condition"].ToString())
                            {
                                case "x86":
                                    loStringBuilder.AppendLine(lsInherit + @"If not goFSO.FolderExists(ExpandEnvironmentStringsEx(""%windir%\syswow64"")) Then");
                                    break;
                                case "x64":
                                    loStringBuilder.AppendLine(lsInherit + @"If goFSO.FolderExists(ExpandEnvironmentStringsEx(""%windir%\syswow64"")) Then");
                                    break;
                            }
                            break;

                        case "endcheck":
                            loStringBuilder.AppendLine(lsInherit + @"End If");
                            break;
                    }
                }

                if (lsAppVPackageId != "")
                {
                    loStringBuilder.AppendLine(@"");
                    loStringBuilder.AppendLine(@"goWshShell.Run ""robocopy """"%LOCALAPPDATA%\Microsoft\AppV\Client\VFS\" + lsAppVPackageId + @"\CommonAppDataS"""" """"%LOCALAPPDATA%\Microsoft\AppV\Client\VFS\" + lsAppVPackageId + @"\CommonAppData"""" /E /XO"",0,true");
                    loStringBuilder.AppendLine(@"goWshShell.Run ""robocopy """"%LOCALAPPDATA%\Microsoft\AppV\Client\VFS\" + lsAppVPackageId + @"\CommonAppData"""" """"%LOCALAPPDATA%\Microsoft\AppV\Client\VFS\" + lsAppVPackageId + @"\CommonAppDataS"""" /E /XO"",0,true");
                    loStringBuilder.AppendLine(@"");
                }



                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Set goWMI         = Nothing");
                loStringBuilder.AppendLine(@"Set goFSO         = Nothing");
                loStringBuilder.AppendLine(@"Set goApplication = Nothing");
                loStringBuilder.AppendLine(@"Set goWshShell    = Nothing");
                loStringBuilder.AppendLine(@"Set goRegistry    = Nothing");

                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Function ExpandEnvironmentStringsEx(lsString)");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"   Dim loRegKeys, loRegKey, lsValue, lsReturn");
                loStringBuilder.AppendLine(@"   lsReturn = goWshShell.ExpandEnvironmentStrings(lsString)");
                loStringBuilder.AppendLine(@"   If lsReturn = lsString Then");
                loStringBuilder.AppendLine(@"      If Left(lsReturn,1)=""%"" Then");
                loStringBuilder.AppendLine(@"         goRegistry.EnumKey HKEY_CURRENT_USER, ""Volatile Environment"", loRegKeys");
                loStringBuilder.AppendLine(@"         If Ubound(loRegKeys)>=0 Then");
                loStringBuilder.AppendLine(@"         For Each loRegKey in loRegKeys");
                loStringBuilder.AppendLine(@"            lsValue = """"");
                loStringBuilder.AppendLine(@"            On Error Resume Next");
                loStringBuilder.AppendLine(@"            lsValue = goWshShell.RegRead(""HKEY_CURRENT_USER\Volatile Environment\"" + loRegKey + ""\"" + Replace(lsString,""%"",""""))");
                loStringBuilder.AppendLine(@"            On Error Goto 0");
                loStringBuilder.AppendLine(@"            If lsValue <> """" Then");
                loStringBuilder.AppendLine(@"               lsReturn = lsValue");
                loStringBuilder.AppendLine(@"            End If");
                loStringBuilder.AppendLine(@"         Next");
                loStringBuilder.AppendLine(@"         End If");
                loStringBuilder.AppendLine(@"      End If");
                loStringBuilder.AppendLine(@"   End If");
                loStringBuilder.AppendLine(@"   ExpandEnvironmentStringsEx = lsReturn");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"End Function");
                loStringBuilder.AppendLine(@"");
                loStringBuilder.AppendLine(@"Function GetSIDFromUser(UserName)");
                loStringBuilder.AppendLine(@"  Dim DomainName, Result, WMIUser");
                loStringBuilder.AppendLine(@"  If InStr(UserName, ""\"") > 0 Then");
                loStringBuilder.AppendLine(@"    DomainName = Mid(UserName, 1, InStr(UserName, ""\"") - 1)");
                loStringBuilder.AppendLine(@"    UserName = Mid(UserName, InStr(UserName, ""\"") + 1)");
                loStringBuilder.AppendLine(@"  Else");
                loStringBuilder.AppendLine(@"    DomainName = CreateObject(""WScript.Network"").UserDomain");
                loStringBuilder.AppendLine(@"  End If");
                loStringBuilder.AppendLine(@"  On Error Resume Next");
                loStringBuilder.AppendLine(@"  Set WMIUser = GetObject(""winmgmts:{impersonationlevel=impersonate}!"" _");
                loStringBuilder.AppendLine(@"    & ""/root/cimv2:Win32_UserAccount.Domain='"" & DomainName & ""'"" _");
                loStringBuilder.AppendLine(@"    & "",Name='"" & UserName & ""'"")");
                loStringBuilder.AppendLine(@"  If Err.Number = 0 Then");
                loStringBuilder.AppendLine(@"    Result = WMIUser.SID");
                loStringBuilder.AppendLine(@"  Else");
                loStringBuilder.AppendLine(@"    Result = """"");
                loStringBuilder.AppendLine(@"  End If");
                loStringBuilder.AppendLine(@"  On Error GoTo 0");
                loStringBuilder.AppendLine(@"  GetSIDFromUser = Result");
                loStringBuilder.AppendLine(@"End Function");


            }

            return loStringBuilder.ToString();


        }

        public static string CreatePSScripts(string lsType, string lsDeployXML, string lsManufacturer, string lsProduct, string lsVersion)
        {

            DataTable loTable = ConvertXMLToDataTable(lsType, lsDeployXML, false);

            StringBuilder loStringBuilder = new StringBuilder();
            loStringBuilder.AppendLine(@"# Manufacturer: " + lsManufacturer);
            loStringBuilder.AppendLine(@"# Product:      " + lsProduct);
            loStringBuilder.AppendLine(@"# Version:      " + lsVersion);
            loStringBuilder.AppendLine(@"# Date:         " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            loStringBuilder.AppendLine(@"");
            loStringBuilder.AppendLine(@"$oslanguage = ""1033""");
            loStringBuilder.AppendLine(@"$prefereduilanguage = ""en-US""");
            loStringBuilder.AppendLine(@"try {");
            loStringBuilder.AppendLine(@"$prefereduilanguage = get-systempreferreduilanguage");
            loStringBuilder.AppendLine(@"} catch { }");
            loStringBuilder.AppendLine(@"$prefereduilanguage = $prefereduilanguage.ToLower()");
            loStringBuilder.AppendLine(@"if($prefereduilanguage.StartsWith(""en-""))");
            loStringBuilder.AppendLine(@"{");
            loStringBuilder.AppendLine(@"$oslanguage = ""1033""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if($prefereduilanguage.StartsWith(""de-""))");
            loStringBuilder.AppendLine(@"{");
            loStringBuilder.AppendLine(@"$oslanguage = ""1031""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if($prefereduilanguage.StartsWith(""fr-""))");
            loStringBuilder.AppendLine(@"{");
            loStringBuilder.AppendLine(@"$oslanguage = ""1036""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if($prefereduilanguage.StartsWith(""es-""))");
            loStringBuilder.AppendLine(@"{");
            loStringBuilder.AppendLine(@"$oslanguage = ""1034""");
            loStringBuilder.AppendLine(@"}");
            loStringBuilder.AppendLine(@"if($prefereduilanguage.StartsWith(""it-""))");
            loStringBuilder.AppendLine(@"{");
            loStringBuilder.AppendLine(@"$oslanguage = ""1040""");
            loStringBuilder.AppendLine(@"}");

            foreach (DataRow loRow in loTable.Rows)
            {
                string lsInherit = "";
                for (int i = 1; i < Convert.ToInt32(loRow["level"].ToString()); i++)
                {
                    lsInherit = lsInherit + "  ";
                }
                switch (loRow["actiontype"].ToString().ToLower())
                {
                    case "launchprocess":

                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$ps = new-object System.Diagnostics.Process");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.Filename = [System.Environment]::ExpandEnvironmentVariables(""" + loRow["command"].ToString() + @""")");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.Arguments = [System.Environment]::ExpandEnvironmentVariables('" + loRow["param"].ToString() + @"')");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.RedirectStandardOutput = $True");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.UseShellExecute = $false");
                        loStringBuilder.AppendLine(@"$ps.start()");
                        loStringBuilder.AppendLine(@"$ps.WaitForExit()");
                        loStringBuilder.AppendLine(@"[string] $Out = $ps.StandardOutput.ReadToEnd();");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "msiexec":
                        {
                            switch (loRow["command"].ToString().ToLower())
                            {
                                case "/i":
                                    loStringBuilder.AppendLine(@"try {");
                                    loStringBuilder.AppendLine(@"$ps = new-object System.Diagnostics.Process");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.Filename = [System.Environment]::ExpandEnvironmentVariables(""msiexec.exe"")");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.Arguments = ""/i " + loRow["param"].ToString().Replace(@"""", @"'") + @"""");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.RedirectStandardOutput = $True");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.UseShellExecute = $false");
                                    loStringBuilder.AppendLine(@"$ps.start()");
                                    loStringBuilder.AppendLine(@"$ps.WaitForExit()");
                                    loStringBuilder.AppendLine(@"[string] $Out = $ps.StandardOutput.ReadToEnd();");
                                    loStringBuilder.AppendLine(@"}");
                                    loStringBuilder.AppendLine(@"catch { }");
                                    break;
                                default:
                                    loStringBuilder.AppendLine(@"try {");
                                    loStringBuilder.AppendLine(@"$ps = new-object System.Diagnostics.Process");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.Filename = [System.Environment]::ExpandEnvironmentVariables(""msiexec.exe"")");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.Arguments = ""/x " + loRow["param"].ToString().Replace(@"""", @"'") + @"""");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.RedirectStandardOutput = $True");
                                    loStringBuilder.AppendLine(@"$ps.StartInfo.UseShellExecute = $false");
                                    loStringBuilder.AppendLine(@"$ps.start()");
                                    loStringBuilder.AppendLine(@"$ps.WaitForExit()");
                                    loStringBuilder.AppendLine(@"[string] $Out = $ps.StandardOutput.ReadToEnd();");
                                    loStringBuilder.AppendLine(@"}");
                                    loStringBuilder.AppendLine(@"catch { }");
                                    break;
                            }
                        }

                        break;
                    case "launchprocessnowait":

                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$ps = new-object System.Diagnostics.Process");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.Filename = [System.Environment]::ExpandEnvironmentVariables(""" + loRow["command"].ToString() + @""")");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.Arguments = [System.Environment]::ExpandEnvironmentVariables(""" + loRow["param"].ToString().Replace(@"""", @"'") + @""")");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.RedirectStandardOutput = $false");
                        loStringBuilder.AppendLine(@"$ps.StartInfo.UseShellExecute = $false");
                        loStringBuilder.AppendLine(@"$ps.start()");
                        //loStringBuilder.AppendLine(@"$ps.WaitForExit()");
                        //loStringBuilder.AppendLine(@"[string] $Out = $ps.StandardOutput.ReadToEnd();");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "sleep":
                        int liSeconds = 5;
                        try
                        {
                            liSeconds = Convert.ToInt32(loRow["param"].ToString());
                        }
                        catch { }
                        loStringBuilder.AppendLine("Start-Sleep -s " + liSeconds);
                        //loStringBuilder.AppendLine(lsInherit + @"WScript.Sleep " + liSeconds.ToString() + "000");
                        break;
                    case "killprocess":
                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"stop-process -name '" + loRow["command"].ToString() + @"' -Force");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "abort":
                        //loStringBuilder.AppendLine(@"exit");
                        break;
                    case "copyfile":
                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$path=[System.Environment]::ExpandEnvironmentVariables('" + System.IO.Path.GetDirectoryName(loRow["param"].ToString()) + @"')");
                        loStringBuilder.AppendLine(@"New-Item -ItemType directory -Path $path");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$source=[System.Environment]::ExpandEnvironmentVariables(""" + loRow["command"].ToString() + @""")");
                        loStringBuilder.AppendLine(@"$destination=[System.Environment]::ExpandEnvironmentVariables(""" + loRow["param"].ToString() + @""")");
                        loStringBuilder.AppendLine(@"Copy-Item $source -Destination $destination -force");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "addfolder":
                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$path=[System.Environment]::ExpandEnvironmentVariables('" + loRow["command"].ToString() + @"')");
                        loStringBuilder.AppendLine(@"New-Item -ItemType directory -Path $path");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "removefile":
                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$path=[System.Environment]::ExpandEnvironmentVariables('" + loRow["command"].ToString() + @"')");
                        loStringBuilder.AppendLine(@"Remove-Item -Path $path -Force");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "removefolder":
                        loStringBuilder.AppendLine(@"try {");
                        loStringBuilder.AppendLine(@"$path=[System.Environment]::ExpandEnvironmentVariables('" + loRow["command"].ToString() + @"\*')");
                        loStringBuilder.AppendLine(@"Remove-Item -Path $path -recurse -Force");
                        loStringBuilder.AppendLine(@"}");
                        loStringBuilder.AppendLine(@"catch { }");
                        break;
                    case "checkregistry":
                        {
                            //string lsVariableName = "var" + Guid.NewGuid().ToString().Replace("-", "").ToLower();
                            string lsMyPath = loRow["path"].ToString();
                            string lsMyValue = loRow["command"].ToString();
                            string lsMyRoot = "HKLM";
                            if (lsMyPath.ToUpper().StartsWith("HKLM"))
                            {
                                lsMyPath = lsMyPath.Substring(5);
                            }
                            if (lsMyPath.ToUpper().StartsWith("HKCR"))
                            {
                                lsMyPath = lsMyPath.Substring(5);
                                lsMyRoot = "HKCR";
                            }
                            if (lsMyPath.ToUpper().StartsWith("HKCU"))
                            {
                                lsMyPath = lsMyPath.Substring(5);
                                lsMyRoot = "HKCU";
                            }
                            loStringBuilder.AppendLine("if (Test-Path '" + lsMyRoot + @":\" + lsMyPath + "')");
                            loStringBuilder.AppendLine("{");

                        }
                        break;
                    case "addregkey":
                        {
                            string lsRoot = "HKLM";
                            string lsPath = loRow["command"].ToString();
                            string lsName = "";
                            string lsMyType = "";
                            string lsValue = "";
                            try
                            {
                                lsPath = lsPath.Substring(lsPath.IndexOf(@"\") + 1);
                            }
                            catch { }
                            try
                            {
                                lsPath = lsPath.Substring(0, lsPath.IndexOf(Convert.ToChar("|")));
                            }
                            catch { }
                            try
                            {
                                lsName = loRow["command"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCU"))
                            {
                                lsRoot = "HKCU";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKU"))
                            {
                                lsRoot = "HKU";
                            }
                            if (loRow["command"].ToString().ToUpper().StartsWith("HKCR"))
                            {
                                lsRoot = "HKCR";
                            }
                            try
                            {
                                lsValue = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            try
                            {
                                lsMyType = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                            }
                            catch { }

                            loStringBuilder.AppendLine(@"try {");
                            loStringBuilder.AppendLine(@"$RegKey = """ + lsRoot + @":\" + lsPath + @"""");
                            loStringBuilder.AppendLine(@"if (-Not(Test-Path ""$RegKey"")) {");
                            loStringBuilder.AppendLine(@"New-Item -Path ""$($RegKey.TrimEnd($RegKey.Split('\')[-1]))"" -Name ""$($RegKey.Split('\')[-1])"" -Force | Out-Null");
                            loStringBuilder.AppendLine(@"}");
                            loStringBuilder.AppendLine(@"Set-ItemProperty -Path ""$RegKey"" -Name """ + lsName + @""" -Type " + lsType + @" -Value """ + lsValue + @"""");
                            loStringBuilder.AppendLine(@"}");
                            loStringBuilder.AppendLine(@"catch { }");
                        }
                        break;

                    case "checklanguagecode":
                        loStringBuilder.AppendLine(@"if ($oslanguage -eq '" + loRow["command"].ToString() + "')");
                        loStringBuilder.AppendLine(@"{");
                        break;


                    case "checkfile":
                        loStringBuilder.AppendLine("$testpath=[System.Environment]::ExpandEnvironmentVariables('" + loRow["path"].ToString() + "')");
                        loStringBuilder.AppendLine(@"if (Test-Path $testpath)");
                        loStringBuilder.AppendLine(@"{");

                        break;

                    case "checkarchitecture":
                        loStringBuilder.AppendLine("$os_type = (Get-WmiObject -Class Win32_ComputerSystem).SystemType -match '(x64)'");
                        switch (loRow["condition"].ToString())
                        {
                            case "x86":
                                loStringBuilder.AppendLine(@"if ($os_type -eq $false) {");

                                break;
                            case "x64":
                                loStringBuilder.AppendLine(@"if ($os_type -eq $true) {");

                                break;
                        }
                        break;

                    case "endcheck":
                        loStringBuilder.AppendLine(lsInherit + @"}");
                        break;

                    case "replacetext":
                        {
                            string lsSource = "";
                            try
                            {
                                lsSource = loRow["param"].ToString().Split(Convert.ToChar("|"))[1];
                            }
                            catch { }
                            string lsDestination = "";
                            try
                            {
                                lsDestination = loRow["param"].ToString().Split(Convert.ToChar("|"))[0];
                            }
                            catch { }
                            loStringBuilder.AppendLine("$filename = [System.Environment]::ExpandEnvironmentVariables('" + loRow["command"].ToString() + "')");
                            loStringBuilder.AppendLine("(Get-Content $filename).replace('" + lsSource + "', '" + lsDestination + "') | Set-Content $filename");
                        }
                        break;
                }
            }

            loStringBuilder.AppendLine(@"");
            //loStringBuilder.AppendLine(@"Set goFSO      = Nothing");
            //loStringBuilder.AppendLine(@"Set goWshShell = Nothing");
            //loStringBuilder.AppendLine(@"Set goRegistry = Nothing");

            return loStringBuilder.ToString();

        }


    }
}
